<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Solana[part20]_ETF的购买</title>
      <link href="/2025/08/25/Solana-part20-ETF%E7%9A%84%E8%B4%AD%E4%B9%B0/"/>
      <url>/2025/08/25/Solana-part20-ETF%E7%9A%84%E8%B4%AD%E4%B9%B0/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=a2bd2d32-2cf2-a775-d415-da2c894b3dd1</cover>
      <date>Mon Aug 25 2025 10:40:22 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part20]_ETF的购买</h1><h1>购买 ETF</h1><h2 id="基本思路">基本思路</h2><p>以 ETF No.1 为例，ETF No.1 包含 jitoSOL 和 mSOL，权重分别为 20%、80%。 「 etf里面不是token账户吗 拿来的sol 」</p><h3 id="当前价格">当前价格</h3><ul><li>1 JitoSOL = 1.16 SOL</li><li>1 mSOL = 1.25 SOL</li></ul><h3 id="用户需求与成本计算">用户需求与成本计算</h3><p>用户当前持有 SOL，计划购买 ETF No.1 100 份，需花费：100×20%×1.16+100×80%×1.25=123.2 SOL</p><h2 id="方案一：前端-swap">方案一：前端 swap</h2><ol><li><strong>【用户】</strong> 通过 ray 或 okx 等平台，将 123.2 SOL 换出 80 mSOL 和 20 JitoSOL。</li><li><strong>【用户】</strong> 执行【Transfer】操作，将 JitoSOL 20 份和 mSOL 80 份转入【合约】。</li><li><strong>【合约】</strong> 执行【Mint】操作，向【用户】发行 100 份 ETF No.1。</li></ol><h2 id="方案二：合约-swap">方案二：合约 swap</h2><ol><li><strong>【用户】</strong> 执行【Transfer】操作，将 123.2 SOL 转入【合约】。</li><li><strong>【合约】</strong> 通过 ray 或 okx 等平台，将 123.2 SOL 换出 80 mSOL 和 20 JitoSOL。</li><li><strong>【合约】</strong> 执行【Mint】操作，向【用户】发行 100 份 ETF No.1。</li></ol><p>（注：操作中的【Transfer】【Mint】为链上交互动作，需结合具体合约逻辑执行。）</p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana实战Bug记录</title>
      <link href="/2025/08/24/Solana%E5%AE%9E%E6%88%98Bug%E8%AE%B0%E5%BD%95/"/>
      <url>/2025/08/24/Solana%E5%AE%9E%E6%88%98Bug%E8%AE%B0%E5%BD%95/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=25902a58-eb9c-75d0-afeb-5b23229f90a0</cover>
      <date>Sun Aug 24 2025 17:07:11 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana实战Bug记录</h1><h2 id="Cross-program-invocation-with-unauthorized-signer-or-writable-account">Cross-program invocation with unauthorized signer or writable account</h2><table><thead><tr><th style="text-align:left">问题</th><th style="text-align:left">解决方案</th></tr></thead><tbody><tr><td style="text-align:left">PDA 派生路径不一致</td><td style="text-align:left">统一 <code>seeds</code> 和 <code>signer_seeds</code></td></tr><tr><td style="text-align:left">Mint Authority 未授权</td><td style="text-align:left">在 CPI 中使用 <code>signer_seeds</code> 显式授权</td></tr><tr><td style="text-align:left">Metadata 账户约束错误</td><td style="text-align:left">显式指定 Token Metadata Program 地址</td></tr><tr><td style="text-align:left">Mint Authority 设置错误</td><td style="text-align:left">确保 <code>mint::authority</code> 指向 PDA 并通过签名授权</td></tr></tbody></table><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> signer_seeds<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>        <span class="token class-name">EtfToken</span><span class="token punctuation">::</span><span class="token constant">SEEDS_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        m<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token punctuation">[</span>ctx<span class="token punctuation">.</span>bumps<span class="token punctuation">.</span>etf_token_info<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 需要和创建账户的时候设置的约束一致</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init_if_needed<span class="token punctuation">,</span>        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>        space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token class-name">EtfToken</span><span class="token punctuation">::</span><span class="token constant">INIT_SPACE</span><span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token class-name">EtfToken</span><span class="token punctuation">::</span><span class="token constant">SEEDS_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            etf_token_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> etf_token_info<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">EtfToken</span><span class="token operator">></span><span class="token punctuation">,</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part19]_ETF的介绍和创建指令实现</title>
      <link href="/2025/08/24/Solana-part19-ETF%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%88%9B%E5%BB%BA%E6%8C%87%E4%BB%A4%E5%AE%9E%E7%8E%B0/"/>
      <url>/2025/08/24/Solana-part19-ETF%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%88%9B%E5%BB%BA%E6%8C%87%E4%BB%A4%E5%AE%9E%E7%8E%B0/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/08/image-20250825111246391.png</cover>
      <date>Sun Aug 24 2025 11:26:36 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>ETF的介绍和创建指令实现</h1><p><img src="https://img.soniachen.com/blog/posts/2025/08/image-20250825111246391.png" alt="image-20250825111246391"></p><blockquote><p>代码提交地址：<a href="https://github.com/SoniaChan33/iswap/commit/25b017929923a3d1e46d853f3a12da05f0b77172">https://github.com/SoniaChan33/iswap/commit/25b017929923a3d1e46d853f3a12da05f0b77172</a></p></blockquote><h2 id="一、项目概述">一、项目概述</h2><p>iSwap项目中的ETF创建功能用于在Solana区块链上生成自定义ETF（交易所交易基金），核心目标是实现ETF相关账户的创建与管理，包括ETF信息存储账户、资产关联账户（ATA）、ETF代币铸造账户（Mint）及元数据（Metadata）账户，确保所有操作的原子性与链上数据一致性。</p><h2 id="二、核心链上组件（Rust程序）">二、核心链上组件（Rust程序）</h2><p>链上逻辑通过Solana程序（智能合约）实现，负责ETF相关账户的初始化、数据存储及跨程序调用（CPI）。</p><h3 id="1-账户结构定义（etf-token-rs）">1. 账户结构定义（<code>etf_token.rs</code>）</h3><p>定义了链上存储ETF数据的核心账户结构，用于持久化ETF的关键信息。</p><h4 id="EtfToken-账户"><code>EtfToken</code> 账户</h4><p>存储ETF的整体信息，包括铸造账户地址、创建者、创建时间、描述及资产列表：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[account]</span><span class="token attribute attr-name">#[derive(InitSpace)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">EtfToken</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> mint_account<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>       <span class="token comment">// ETF代币的Mint账户地址</span>    <span class="token keyword">pub</span> creator<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>            <span class="token comment">// ETF创建者地址</span>    <span class="token keyword">pub</span> create_at<span class="token punctuation">:</span> <span class="token keyword">i64</span><span class="token punctuation">,</span>             <span class="token comment">// 创建时间（Unix时间戳）</span>    <span class="token attribute attr-name">#[max_len(50)]</span>    <span class="token keyword">pub</span> descriptor<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>         <span class="token comment">// ETF描述信息（最大长度50）</span>    <span class="token attribute attr-name">#[max_len(10)]</span>    <span class="token keyword">pub</span> assets<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">EtfAsset</span><span class="token operator">></span><span class="token punctuation">,</span>      <span class="token comment">// 包含的资产列表（最多10个资产）</span><span class="token punctuation">&#125;</span></code></pre><ul><li>种子前缀：<code>SEEDS_PREFIX = &quot;ETF_TOKEN&quot;</code>（用于PDA派生）</li><li>初始化方法：<code>new</code> 方法接收参数并返回实例，自动填充创建时间（通过<code>Clock</code>获取）。</li></ul><h4 id="EtfAsset-账户"><code>EtfAsset</code> 账户</h4><p>存储ETF中单个资产的信息（代币地址及权重）：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[account]</span><span class="token attribute attr-name">#[derive(InitSpace)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">EtfAsset</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> token<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>  <span class="token comment">// 资产代币的Mint地址</span>    <span class="token keyword">pub</span> weight<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>    <span class="token comment">// 资产在ETF中的权重（数值类型为无符号16位整数）</span><span class="token punctuation">&#125;</span></code></pre><ul><li>初始化方法：<code>new</code> 方法接收代币地址和权重，返回实例。</li></ul><h3 id="2-ETF创建指令（etf-create-rs）">2. ETF创建指令（<code>etf_create.rs</code>）</h3><p>实现ETF创建的核心逻辑，包括账户初始化、元数据创建及数据存储。</p><h4 id="输入参数-EtfTokenArgs">输入参数 <code>EtfTokenArgs</code></h4><p>客户端传入的ETF配置信息，用于初始化链上数据：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[account]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">EtfTokenArgs</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>        <span class="token comment">// ETF名称</span>    <span class="token keyword">pub</span> symbol<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>      <span class="token comment">// ETF符号（唯一标识，用于派生地址）</span>    <span class="token keyword">pub</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token comment">// ETF描述</span>    <span class="token keyword">pub</span> url<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>         <span class="token comment">// ETF元数据URL（如官网、详情页）</span>    <span class="token keyword">pub</span> assets<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">EtfAsset</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 包含的资产列表</span><span class="token punctuation">&#125;</span></code></pre><h4 id="账户约束-EtfTokenCreate">账户约束 <code>EtfTokenCreate</code></h4><p>定义指令所需的账户及约束条件，确保账户合法性：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token attribute attr-name">#[instruction(args: EtfTokenArgs)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">EtfTokenCreate</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ETF信息账户（PDA），若不存在则初始化</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init_if_needed<span class="token punctuation">,</span>        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>        space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token class-name">EtfToken</span><span class="token punctuation">::</span><span class="token constant">INIT_SPACE</span><span class="token punctuation">,</span>  <span class="token comment">// 8字节为账户 discriminator</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">EtfToken</span><span class="token punctuation">::</span><span class="token constant">SEEDS_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> etf_token_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        bump    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> etf_token_info<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">EtfToken</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// ETF元数据账户（关联Mint，通过元数据程序规则派生）</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        <span class="token keyword">mut</span><span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">b"metadata"</span><span class="token punctuation">,</span> token_metadata_program<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> etf_token_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>        <span class="token namespace">seeds<span class="token punctuation">::</span></span>program <span class="token operator">=</span> token_metadata_program<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> etf_metadata_account<span class="token punctuation">:</span> <span class="token class-name">UncheckedAccount</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// ETF代币Mint账户（PDA），若不存在则初始化</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init_if_needed<span class="token punctuation">,</span>        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">EtfToken</span><span class="token punctuation">::</span><span class="token constant">SEEDS_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>symbol<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>        <span class="token namespace">mint<span class="token punctuation">::</span></span>decimals <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token comment">// 固定小数位为9</span>        <span class="token namespace">mint<span class="token punctuation">::</span></span>authority <span class="token operator">=</span> etf_token_info<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 权限归属于ETF信息账户</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> etf_token_mint_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Mint</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>  <span class="token comment">// 交易签名者（创建者钱包）</span>    <span class="token keyword">pub</span> rent<span class="token punctuation">:</span> <span class="token class-name">Sysvar</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Rent</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// Solana租金系统变量</span>    <span class="token keyword">pub</span> token_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Token</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// SPL Token程序</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 系统程序</span>    <span class="token keyword">pub</span> token_metadata_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Metadata</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// MPL元数据程序</span><span class="token punctuation">&#125;</span></code></pre><h4 id="指令逻辑-etf-token-create">指令逻辑 <code>etf_token_create</code></h4><ol><li><strong>派生PDA签名种子</strong>：使用<code>etf_token_info</code>的种子和bump生成签名种子（用于CPI授权）。</li><li><strong>创建元数据账户</strong>：通过CPI调用MPL元数据程序，创建关联ETF Mint的元数据账户，包含名称、符号、URL等信息。</li><li><strong>初始化ETF信息账户</strong>：将<code>EtfTokenArgs</code>转换为<code>EtfToken</code>实例，存储创建者、Mint地址、时间等数据。</li></ol><h2 id="三、客户端核心逻辑（TypeScript）">三、客户端核心逻辑（TypeScript）</h2><p>客户端负责构建交易、派生地址、处理账户交互，最终调用链上程序完成ETF创建。</p><h3 id="1-基础配置（const-ts）">1. 基础配置（<code>const.ts</code>）</h3><p>提供程序实例、Provider及默认钱包，作为客户端与链上交互的基础：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> anchor <span class="token keyword">from</span> <span class="token string">"@coral-xyz/anchor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Iswap <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../target/types/iswap"</span><span class="token punctuation">;</span><span class="token comment">// 初始化Provider（连接Solana网络）</span><span class="token keyword">let</span> provider <span class="token operator">=</span> anchor<span class="token punctuation">.</span>AnchorProvider<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>anchor<span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 程序实例（关联iSwap程序）</span><span class="token keyword">const</span> program <span class="token operator">=</span> anchor<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span>Iswap <span class="token keyword">as</span> anchor<span class="token punctuation">.</span>Program<span class="token operator">&lt;</span>Iswap<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">// 默认钱包（本地钱包）</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useDefaultWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> wallet <span class="token operator">=</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> wallet<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> program<span class="token punctuation">,</span> provider <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h3 id="2-地址派生（address-ts）">2. 地址派生（<code>address.ts</code>）</h3><p>通过种子规则派生ETF相关账户的PDA地址，确保客户端与链上程序地址一致。</p><h4 id="deriveEtfTokenMintAccount"><code>deriveEtfTokenMintAccount</code></h4><p>根据ETF符号（symbol）派生Mint账户地址：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">deriveEtfTokenMintAccount</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddressSync</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"etf_token"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 种子：前缀 + symbol</span>        program<span class="token punctuation">.</span>programId    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="deriveEtfInfoAccount"><code>deriveEtfInfoAccount</code></h4><p>根据Mint账户地址派生ETF信息账户（<code>etf_token_info</code>）地址：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">deriveEtfInfoAccount</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>mintAccount<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deriveEtfTokenMintAccount</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddressSync</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"etf_token"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mintAccount<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 种子：前缀 + Mint地址</span>        program<span class="token punctuation">.</span>programId    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-ETF创建函数（etf-token-ts）">3. ETF创建函数（<code>etf_token.ts</code>）</h3><p><code>createETF</code>函数是客户端创建ETF的入口，负责构建交易并发送至链上：</p><h4 id="核心流程：">核心流程：</h4><ol><li><strong>派生账户地址</strong>：通过<code>deriveEtfInfoAccount</code>获取<code>etf_token_info</code>账户地址。</li><li><strong>创建资产ATA账户</strong>：为ETF包含的每个资产创建关联Token账户（ATA），若账户不存在则添加创建指令（确保ETF能持有资产）。</li><li><strong>构建交易</strong>：<ul><li>添加ATA创建指令（若需要）。</li><li>添加调用链上<code>etfCreate</code>方法的指令（传入名称、符号、资产等参数）。</li></ul></li><li><strong>发送交易</strong>：使用Provider发送交易，由创建者钱包签名。</li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createETF</span><span class="token punctuation">(</span>wallet<span class="token operator">:</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">symbol</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> assets<span class="token operator">:</span> <span class="token punctuation">&#123;</span> token<span class="token operator">:</span> PublicKey<span class="token punctuation">,</span> weight<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 派生ETF信息账户地址</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>etfTokenInfoAddress<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deriveEtfInfoAccount</span><span class="token punctuation">(</span><span class="token builtin">symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化交易</span>    <span class="token keyword">let</span> tx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">anchor</span><span class="token punctuation">.</span>web3<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 为每个资产创建ATA（若不存在）</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> token <span class="token punctuation">&#125;</span> <span class="token keyword">of</span> assets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getAssociatedTokenAddressSync</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> etfTokenInfoAddress<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">await</span> <span class="token function">getAccount</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span>connection<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查账户是否存在</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TokenAccountNotFoundError</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 添加创建ATA的指令</span>                tx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createAssociatedTokenAccountInstruction</span><span class="token punctuation">(</span>                    wallet<span class="token punctuation">.</span>payer<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token comment">//  payer</span>                    address<span class="token punctuation">,</span>                <span class="token comment">// ATA地址</span>                    etfTokenInfoAddress<span class="token punctuation">,</span>    <span class="token comment">// 所有者（ETF信息账户）</span>                    token                   <span class="token comment">// 资产代币Mint</span>                <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加调用链上程序的指令</span>    tx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">etfCreate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        name<span class="token punctuation">,</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span> description<span class="token punctuation">,</span> url<span class="token punctuation">,</span> assets    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送并确认交易</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span><span class="token function">sendAndConfirmTransaction</span><span class="token punctuation">(</span>        provider<span class="token punctuation">.</span>connection<span class="token punctuation">,</span>        tx<span class="token punctuation">,</span>        <span class="token punctuation">[</span>wallet<span class="token punctuation">.</span>payer<span class="token punctuation">]</span> <span class="token comment">// 签名者</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-示例调用（index-ts）">4. 示例调用（<code>index.ts</code>）</h3><p>演示如何使用<code>createETF</code>函数创建ETF，包含参数示例：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> defaultWallet <span class="token operator">=</span> <span class="token function">useDefaultWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用默认钱包</span>    <span class="token comment">// ETF基本信息</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span> description<span class="token punctuation">,</span> url<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"MyETF3"</span><span class="token punctuation">,</span>        <span class="token string">"MYETF3"</span><span class="token punctuation">,</span>        <span class="token string">"This is my ETF3"</span><span class="token punctuation">,</span>        <span class="token string">"https://my-etf.com"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 包含的资产（代币地址+权重）</span>    <span class="token keyword">const</span> assets <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            token<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">anchor</span><span class="token punctuation">.</span>web3<span class="token punctuation">.</span><span class="token function">PublicKey</span><span class="token punctuation">(</span><span class="token string">"FGNSbKTiKd4d1Zv97c2iQACADB8N7MnDnDsv5auHGAHo"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            weight<span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            token<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">anchor</span><span class="token punctuation">.</span>web3<span class="token punctuation">.</span><span class="token function">PublicKey</span><span class="token punctuation">(</span><span class="token string">"GTzKipZ6PcTEV2iV4LP1Yowwc4QPt1hvKmk6vuqY8ywp"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            weight<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 调用创建函数并打印交易哈希</span>    <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createETF</span><span class="token punctuation">(</span>defaultWallet<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span> description<span class="token punctuation">,</span> url<span class="token punctuation">,</span> assets<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="四、完整流程总结">四、完整流程总结</h2><ol><li><strong>客户端准备</strong>：用户指定ETF参数（名称、符号、资产等），通过<code>useDefaultWallet</code>获取签名钱包。</li><li><strong>地址派生</strong>：客户端通过<code>deriveEtfTokenMintAccount</code>和<code>deriveEtfInfoAccount</code>计算Mint和信息账户的PDA地址。</li><li><strong>交易构建</strong>：<ul><li>检查并创建资产ATA账户（确保ETF可持有资产）。</li><li>构建调用链上<code>etfCreate</code>指令的交易。</li></ul></li><li><strong>链上处理</strong>：<ul><li>程序验证账户约束，初始化Mint账户（若不存在）。</li><li>通过CPI创建元数据账户，关联Mint。</li><li>初始化<code>etf_token_info</code>账户，存储ETF数据。</li></ul></li><li><strong>交易确认</strong>：客户端接收交易哈希，完成ETF创建。</li></ol><h2 id="五、关键技术点">五、关键技术点</h2><ul><li><strong>PDA（Program Derived Address）</strong>：用于生成Mint和信息账户地址，确保地址唯一性和程序控制权。</li><li><strong>ATA（Associated Token Account）</strong>：为ETF自动创建资产持有账户，遵循SPL Token标准。</li><li><strong>CPI（Cross-Program Invocation）</strong>：调用MPL元数据程序创建元数据，实现模块化功能复用。</li><li><strong>原子性交易</strong>：所有操作（ATA创建、程序调用）在同一交易中完成，确保要么全部成功，要么全部失败。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part18]_Solana DAPP-前端单元测试与合约接入</title>
      <link href="/2025/08/23/Solana-part18-Solana-DAPP-%E5%89%8D%E7%AB%AF%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%90%88%E7%BA%A6%E6%8E%A5%E5%85%A5/"/>
      <url>/2025/08/23/Solana-part18-Solana-DAPP-%E5%89%8D%E7%AB%AF%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%90%88%E7%BA%A6%E6%8E%A5%E5%85%A5/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/08/solanapart18.jpg</cover>
      <date>Sat Aug 23 2025 11:33:06 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana DAPP-前端单元测试与合约接入</h1><h3 id="一、初始化-Solana-DApp-项目">一、初始化 Solana DApp 项目</h3><h4 id="1-环境准备">1. 环境准备</h4><p>先确保安装基础工具：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 Node.js（推荐 v16+）</span><span class="token comment"># 安装 Solana CLI（用于本地节点和钱包管理）</span><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-sSfL</span> https://release.solana.com/v1.18.4/install<span class="token variable">)</span></span>"</span><span class="token comment"># 检查版本</span>solana <span class="token parameter variable">--version</span><span class="token function">node</span> <span class="token parameter variable">--version</span></code></pre><h4 id="2-初始化项目">2. 初始化项目</h4><p>使用官方模板创建项目：</p><pre class="language-bash" data-language="bash"><code class="language-bash">npx create-solana-dapp@latest my-solana-dapp<span class="token builtin class-name">cd</span> my-solana-dapp</code></pre><h4 id="3-项目结构解析（核心文件）">3. 项目结构解析（核心文件）</h4><pre class="language-none"><code class="language-none">my-solana-dapp&#x2F;├── app&#x2F;                  # 前端代码（React）├── programs&#x2F;             # 后端程序（Rust）│   └── my_solana_dapp&#x2F;   # 核心逻辑├── tests&#x2F;                # 测试文件（TypeScript）│   └── my-solana-dapp.ts # 测试用例├── Anchor.toml           # 项目配置（集群、程序ID等）└── package.json          # 依赖管理</code></pre><h3 id="二、测试文件编写（TypeScript）">二、测试文件编写（TypeScript）</h3><p>测试文件位于 <code>tests/</code> 目录，用于验证程序逻辑，后端学员需重点关注以下几点：</p><h4 id="1-测试基本结构">1. 测试基本结构</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// tests/my-solana-dapp.ts</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> anchor <span class="token keyword">from</span> <span class="token string">"@coral-xyz/anchor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Program <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@coral-xyz/anchor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> MySolanaDapp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../target/types/my_solana_dapp"</span><span class="token punctuation">;</span> <span class="token comment">// 自动生成的类型</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"my-solana-dapp"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 1. 初始化环境</span>  <span class="token keyword">const</span> provider <span class="token operator">=</span> anchor<span class="token punctuation">.</span>AnchorProvider<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用环境变量配置的集群</span>  anchor<span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> program <span class="token operator">=</span> anchor<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span>MySolanaDapp <span class="token keyword">as</span> Program<span class="token operator">&lt;</span>MySolanaDapp<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// 加载程序</span>  <span class="token keyword">const</span> wallet <span class="token operator">=</span> provider<span class="token punctuation">.</span>wallet <span class="token keyword">as</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">;</span> <span class="token comment">// 测试钱包</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"初始化一个计数器"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 2. 准备账户（比如创建一个计数器账户）</span>    <span class="token keyword">const</span> counterKeypair <span class="token operator">=</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>Keypair<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 随机生成账户</span>    <span class="token comment">// 3. 调用程序指令（比如初始化计数器）</span>    <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods      <span class="token punctuation">.</span><span class="token function">initializeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        counter<span class="token operator">:</span> counterKeypair<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token comment">// 计数器账户地址</span>        user<span class="token operator">:</span> wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token comment">// 调用者地址</span>        systemProgram<span class="token operator">:</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>SystemProgram<span class="token punctuation">.</span>programId<span class="token punctuation">,</span> <span class="token comment">// 系统程序（创建账户用）</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">signers</span><span class="token punctuation">(</span><span class="token punctuation">[</span>counterKeypair<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 新账户需要签名（因为是刚生成的）</span>      <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送交易</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"交易签名:"</span><span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. 验证结果</span>    <span class="token keyword">const</span> counterAccount <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>account<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>counterKeypair<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"初始计数:"</span><span class="token punctuation">,</span> counterAccount<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>counterAccount<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 断言初始值为0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-测试注意事项">2. 测试注意事项</h4><ul><li><strong>集群选择</strong>：默认使用 <code>localnet</code>（本地节点），测试前需启动 <code>solana-test-validator</code></li><li><strong>账户权限</strong>：<ul><li>新生成的账户（<code>Keypair.generate()</code>）需要放在 <code>signers</code> 中签名</li><li>钱包账户（<code>wallet.publicKey</code>）的签名由 <code>provider</code> 自动处理，无需手动添加</li></ul></li><li><strong>数据读取</strong>：用 <code>program.account.xxx.fetch(地址)</code> 读取账户数据</li><li><strong>错误处理</strong>：使用 <code>try/catch</code> 捕获交易失败（如权限不足、数据错误）</li></ul><h4 id="3-常用-TS-语法（测试中高频使用）">3. 常用 TS 语法（测试中高频使用）</h4><ul><li><strong>类型注解</strong>：<code>const wallet: anchor.Wallet = provider.wallet;</code>（指定变量类型）</li><li><strong>异步函数</strong>：<code>async/await</code> 处理区块链交易（网络操作都是异步的）</li><li><strong>接口定义</strong>：描述账户数据结构<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>  count<span class="token operator">:</span> anchor<span class="token punctuation">.</span><span class="token constant">BN</span><span class="token punctuation">;</span> <span class="token comment">// Solana中常用BN处理大数字</span>  owner<span class="token operator">:</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>PublicKey<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><strong>解构赋值</strong>：快速获取账户字段<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> count<span class="token punctuation">,</span> owner <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>account<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="三、前端交互（调用-Anchor-程序）">三、前端交互（调用 Anchor 程序）</h3><p>前端通过 Anchor 客户端库与链上程序交互，核心流程：连接钱包 → 初始化程序 → 调用指令。</p><h4 id="1-前端项目结构（app-目录）">1. 前端项目结构（<code>app/</code> 目录）</h4><pre class="language-none"><code class="language-none">app&#x2F;├── components&#x2F;  # UI组件├── lib&#x2F;         # 工具函数（连接钱包、程序初始化）│   └── anchor.ts # 核心交互逻辑└── pages&#x2F;       # 页面（如首页）</code></pre><h4 id="2-核心交互代码（lib-anchor-ts）">2. 核心交互代码（<code>lib/anchor.ts</code>）</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> anchor <span class="token keyword">from</span> <span class="token string">"@coral-xyz/anchor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PublicKey <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@solana/web3.js"</span><span class="token punctuation">;</span><span class="token keyword">import</span> idl <span class="token keyword">from</span> <span class="token string">"../target/idl/my_solana_dapp.json"</span><span class="token punctuation">;</span> <span class="token comment">// 程序IDL（接口描述）</span><span class="token comment">// 1. 初始化程序</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">initProgram</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 连接到浏览器钱包（如Phantom）</span>  <span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">anchor</span><span class="token punctuation">.</span><span class="token function">AnchorProvider</span><span class="token punctuation">(</span>    window<span class="token punctuation">.</span>solana<span class="token punctuation">,</span> <span class="token comment">// 钱包注入的provider</span>    window<span class="token punctuation">.</span>solana<span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> preflightCommitment<span class="token operator">:</span> <span class="token string">"processed"</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  anchor<span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 加载程序（IDL + 程序地址）</span>  <span class="token keyword">const</span> programId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicKey</span><span class="token punctuation">(</span>idl<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">anchor</span><span class="token punctuation">.</span><span class="token function">Program</span><span class="token punctuation">(</span>idl <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">,</span> programId<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> program<span class="token punctuation">,</span> provider <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 2. 调用程序指令（比如增加计数器）</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">incrementCounter</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>counterAddr<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> program<span class="token punctuation">,</span> provider <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">initProgram</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> counterPubkey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicKey</span><span class="token punctuation">(</span>counterAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发送交易</span>    <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods      <span class="token punctuation">.</span><span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 对应Rust中的increment_counter函数</span>      <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        counter<span class="token operator">:</span> counterPubkey<span class="token punctuation">,</span>        user<span class="token operator">:</span> provider<span class="token punctuation">.</span>wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 钱包会自动弹出签名请求</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"交易成功:"</span><span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tx<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"交易失败:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="3-在页面中使用（React-示例）">3. 在页面中使用（React 示例）</h4><pre class="language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// pages/index.tsx</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> incrementCounter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../lib/anchor"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>counterAddr<span class="token punctuation">,</span> setCounterAddr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleIncrement</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>counterAddr<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">incrementCounter</span><span class="token punctuation">(</span>counterAddr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>计数器地址<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>counterAddr<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCounterAddr</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleIncrement<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">增加计数</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="4-前端交互注意事项">4. 前端交互注意事项</h4><ul><li><strong>钱包连接</strong>：需用户安装 Phantom 等钱包，通过 <code>window.solana</code> 注入</li><li><strong>权限请求</strong>：首次调用会请求钱包授权（访问公钥）</li><li><strong>交易确认</strong>：区块链交易需要时间确认，可通过 <code>@solana/web3.js</code> 的 <code>Connection.confirmTransaction</code> 等待确认</li><li><strong>错误提示</strong>：常见错误如“用户拒绝签名”“余额不足”（需确保钱包有 SOL 支付手续费）</li></ul><h3 id="四、快速上手命令">四、快速上手命令</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动本地节点</span>solana-test-validator<span class="token comment"># 部署程序到本地节点</span>anchor deploy<span class="token comment"># 运行测试</span>anchor <span class="token builtin class-name">test</span><span class="token comment"># 启动前端（开发模式）</span><span class="token builtin class-name">cd</span> app <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> run dev</code></pre><h3 id="总结">总结</h3><p>重点理解：</p><ol><li>测试文件通过模拟交易验证程序逻辑，核心是 <code>program.methods.xxx</code> 调用指令</li><li>前端交互本质是通过 Anchor 客户端库将用户操作转化为链上交易，依赖钱包签名</li><li>TypeScript 类型系统帮助匹配程序接口（IDL），减少调用错误</li></ol><p>通过以上流程，可实现从后端程序到前端交互的完整闭环，后续可逐步深入复杂功能（如 NFT 操作、状态管理等）。</p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part17]_Solana质押-编写应用级别的质押合约-解质押部分</title>
      <link href="/2025/08/22/Solana-part17-Solana%E8%B4%A8%E6%8A%BC-%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8%E7%BA%A7%E5%88%AB%E7%9A%84%E8%B4%A8%E6%8A%BC%E5%90%88%E7%BA%A6-%E8%A7%A3%E8%B4%A8%E6%8A%BC%E9%83%A8%E5%88%86/"/>
      <url>/2025/08/22/Solana-part17-Solana%E8%B4%A8%E6%8A%BC-%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8%E7%BA%A7%E5%88%AB%E7%9A%84%E8%B4%A8%E6%8A%BC%E5%90%88%E7%BA%A6-%E8%A7%A3%E8%B4%A8%E6%8A%BC%E9%83%A8%E5%88%86/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/08/solanap17.jpg</cover>
      <date>Fri Aug 22 2025 17:34:10 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana质押-编写应用级别的质押合约-解质押部分</h1><blockquote><p>核心代码地址提交：</p><p><a href="https://github.com/SoniaChan33/anchor_social/commit/b6ca707c33992ef5e72d1be5e4b6edc14e385b98">https://github.com/SoniaChan33/anchor_social/commit/b6ca707c33992ef5e72d1be5e4b6edc14e385b98</a></p></blockquote><h2 id="1-解质押功能核心逻辑">1. 解质押功能核心逻辑</h2><p>解质押是质押流程的反向操作，核心目标是将质押的 NFT 归还给用户，并销毁质押时获得的流动性代币。具体流程通过 <code>nft_unstake</code> 函数实现，步骤如下：</p><h3 id="1-1-权限校验">1.1 权限校验</h3><p>函数首先验证解质押操作的合法性，确保：</p><ul><li>解质押的 NFT 与质押记录中的 NFT 匹配（<code>stake_info.nft_mint_account == nft_mint_account.key()</code>）；</li><li>发起解质押的用户是原质押人（<code>stake_info.staker == authority.key()</code>）。<br>若不满足，返回 <code>UnstakeError::NoAuthority</code> 错误。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 权限校验代码（源自nft_unstake.rs）</span><span class="token macro property">require!</span><span class="token punctuation">(</span>    <span class="token operator">&amp;</span>ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>stake_info<span class="token punctuation">.</span>nft_mint_account <span class="token operator">==</span> <span class="token operator">&amp;</span>ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">UnstakeError</span><span class="token punctuation">::</span><span class="token class-name">NoAuthority</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">require!</span><span class="token punctuation">(</span>    <span class="token operator">&amp;</span>ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>stake_info<span class="token punctuation">.</span>staker <span class="token operator">==</span> <span class="token operator">&amp;</span>ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">UnstakeError</span><span class="token punctuation">::</span><span class="token class-name">NoAuthority</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-2-NFT-转回用户账户">1.2 NFT 转回用户账户</h3><p>通过 <code>transfer</code> 操作将暂存于合约托管账户（<code>program_receipt_ata</code>）的 NFT 转回用户的关联账户（<code>nft_associated_token_account</code>）。</p><ul><li>由于合约托管账户的权限归 <code>stake_info</code>（PDA 账户），需使用 <code>stake_info</code> 的种子（<code>StakeInfo::SEED_PREFIX + nft_mint_account.key() + bump</code>）生成签名，确保操作合法性。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// NFT 转移代码（源自nft_unstake.rs）</span><span class="token keyword">let</span> nft_mint_account <span class="token operator">=</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> signer_seeds<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>    <span class="token class-name">StakeInfo</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nft_mint_account<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span><span class="token punctuation">[</span>ctx<span class="token punctuation">.</span>bumps<span class="token punctuation">.</span>stake_info<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">transfer</span><span class="token punctuation">(</span>    <span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>        ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Transfer</span> <span class="token punctuation">&#123;</span>            from<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>program_receipt_ata<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            to<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_associated_token_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>stake_info<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">with_signer</span><span class="token punctuation">(</span>signer_seeds<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// NFT 数量固定为1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></code></pre><h3 id="1-3-流动性代币销毁">1.3 流动性代币销毁</h3><p>用户解质押时，需销毁质押时获得的流动性代币（通过 <code>burn</code> 操作），数量通过 <code>stake_info.salvage_value(10000)</code> 计算（基于质押时长）。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 代币销毁代码（源自nft_unstake.rs）</span><span class="token keyword">let</span> amount <span class="token operator">=</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>stake_info<span class="token punctuation">.</span><span class="token function">salvage_value</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">burn</span><span class="token punctuation">(</span>    <span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>        ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Burn</span> <span class="token punctuation">&#123;</span>            mint<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            from<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>associated_token_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    amount<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></code></pre><h2 id="2-账户结构说明（NFTUnStake）">2. 账户结构说明（<code>NFTUnStake</code>）</h2><p><code>NFTUnStake</code> 结构体定义了解质押所需的所有账户，各账户作用如下：</p><table><thead><tr><th>账户名</th><th>作用描述</th></tr></thead><tbody><tr><td><code>stake_info</code></td><td>存储质押记录（质押人、NFT 地址、质押时间），以 <code>StakeInfo::SEED_PREFIX + NFT Mint 地址</code> 为种子的 PDA 账户。</td></tr><tr><td><code>program_receipt_ata</code></td><td>合约托管 NFT 的关联账户，权限归 <code>stake_info</code>，用于暂存质押的 NFT。</td></tr><tr><td><code>token_mint_account</code></td><td>流动性代币的 Mint 账户，以 <code>MyToken::SEED_PREFIX</code> 为种子的 PDA 账户，用于销毁代币。</td></tr><tr><td><code>associated_token_account</code></td><td>用户持有的流动性代币账户，用于销毁质押时获得的代币。</td></tr><tr><td><code>nft_mint_account</code></td><td>被质押 NFT 的 Mint 账户，标识唯一 NFT。</td></tr><tr><td><code>nft_associated_token_account</code></td><td>用户接收 NFT 的关联账户，解质押后 NFT 转回此处。</td></tr><tr><td><code>authority</code></td><td>解质押发起者（原质押人），需签名授权操作。</td></tr><tr><td>系统程序（<code>token_program</code> 等）</td><td>提供代币转移、销毁等基础功能的系统程序。</td></tr></tbody></table><h2 id="3-利息计算逻辑（salvage-value-方法）">3. 利息计算逻辑（<code>salvage_value</code> 方法）</h2><p>解质押时销毁的代币数量通过 <code>StakeInfo::salvage_value</code> 计算，逻辑为：基于质押时长（当前 Epoch 与质押时 Epoch 的差值），按每 Epoch 2% 的比例计算（原代码实现）。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 利息计算代码（源自stake.rs）</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">salvage_value</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u64</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token class-name">Clock</span><span class="token punctuation">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>epoch<span class="token punctuation">;</span>    <span class="token comment">// 每一个epoch减2%（原代码逻辑）</span>    <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> <span class="token keyword">self</span><span class="token punctuation">.</span>staked_at<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>amount <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">&#125;</span></code></pre><h2 id="4-关键注意事项">4. 关键注意事项</h2><h3 id="4-1-利息计算的潜在问题">4.1 利息计算的潜在问题</h3><ul><li><strong>浮点数精度风险</strong>：原代码使用 <code>f64</code> 计算比例（如 <code>(now - staked_at) * 2 as f64 / 100.0</code>），可能导致精度丢失（例如 <code>10000 * 0.02</code> 理论为 200，但浮点数运算可能产生偏差）。</li><li><strong>Epoch 差值为 0 的问题</strong>：若测试网络中 Epoch 长期未更新（默认配置 <code>slots-per-epoch</code> 较大），<code>now - self.staked_at</code> 为 0，导致 <code>salvage_value</code> 返回 0，用户无实际获利。</li></ul><h3 id="4-2-测试网络配置建议">4.2 测试网络配置建议</h3><p>为解决 Epoch 不更新的问题，启动本地测试网时需手动设置较小的 <code>slots-per-epoch</code>，确保 Epoch 能快速推进：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 每32个slot为1个Epoch（加速Epoch更新，便于测试利息计算）</span>solana-test-validator --slots-per-epoch <span class="token number">32</span> <span class="token parameter variable">-r</span> <span class="token punctuation">\</span>  --bpf-program metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s metadata.so</code></pre><p>可通过以下命令验证 Epoch 状态：</p><pre class="language-bash" data-language="bash"><code class="language-bash">solana epoch-info <span class="token parameter variable">--url</span> localhost <span class="token comment"># 查看当前Epoch和slot数</span></code></pre><h3 id="4-3-权限与安全性">4.3 权限与安全性</h3><ul><li>解质押必须验证 <code>stake_info</code> 中的质押人与发起者一致，防止非所有者操作。</li><li>NFT 转移时需使用 <code>stake_info</code> 的 PDA 签名（<code>signer_seeds</code>），确保只有合约有权限操作托管的 NFT，避免权限泄露。</li></ul><h2 id="总结">总结</h2><p>解质押功能通过权限校验、NFT 转回、流动性代币销毁完成闭环，核心依赖 <code>stake_info</code> 记录的质押关系和 <code>salvage_value</code> 计算的销毁数量。需特别注意浮点数计算精度和测试网 Epoch 配置，以确保用户获利逻辑可正常验证。</p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part16]_Solana质押-编写应用级别的质押合约-质押部分</title>
      <link href="/2025/08/22/Solana-part16-Solana%E8%B4%A8%E6%8A%BC-%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8%E7%BA%A7%E5%88%AB%E7%9A%84%E8%B4%A8%E6%8A%BC%E5%90%88%E7%BA%A6-%E8%B4%A8%E6%8A%BC%E9%83%A8%E5%88%86/"/>
      <url>/2025/08/22/Solana-part16-Solana%E8%B4%A8%E6%8A%BC-%E7%BC%96%E5%86%99%E5%BA%94%E7%94%A8%E7%BA%A7%E5%88%AB%E7%9A%84%E8%B4%A8%E6%8A%BC%E5%90%88%E7%BA%A6-%E8%B4%A8%E6%8A%BC%E9%83%A8%E5%88%86/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/08/solanap16.jpg</cover>
      <date>Fri Aug 22 2025 10:41:29 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana质押-编写应用级别的质押合约-质押部分</h1><blockquote><p>核心代码见：</p><p><a href="https://github.com/SoniaChan33/anchor_social/commit/48b428c2a33213275cea8cc42be199f8bfc7a332">https://github.com/SoniaChan33/anchor_social/commit/48b428c2a33213275cea8cc42be199f8bfc7a332</a> nft mint 编写</p><p><a href="https://github.com/SoniaChan33/anchor_social/commit/a27180fc342c3be81e670794f0e0ddf22817881c">https://github.com/SoniaChan33/anchor_social/commit/a27180fc342c3be81e670794f0e0ddf22817881c</a>  stake nft</p></blockquote><h2 id="1-NFT-铸造（Mint）功能">1. NFT 铸造（Mint）功能</h2><h3 id="1-1-功能说明">1.1 功能说明</h3><p>通过 <code>nft_mint_v1</code> 方法实现 NFT 铸造，遵循 MPL Token Metadata 标准，创建包含元数据的唯一 NFT，主要流程包括：</p><ul><li>创建 NFT 元数据账户</li><li>铸造 1 个代币到关联账户</li><li>创建主版本账户（Master Edition）确保唯一性</li></ul><h3 id="1-2-核心实现（nft-mint-rs）">1.2 核心实现（<code>nft_mint.rs</code>）</h3><h4 id="1-2-1-铸造方法">1.2.1 铸造方法</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">nft_mint_v1</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">NFTMint</span><span class="token operator">></span><span class="token punctuation">,</span> nft_id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义签名种子（PDA）</span>    <span class="token keyword">let</span> signer_seeds<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>        <span class="token class-name">MyNFT</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nft_id<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token punctuation">[</span>ctx<span class="token punctuation">.</span>bumps<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 创建元数据账户</span>    <span class="token function">create_metadata_accounts_v3</span><span class="token punctuation">(</span>        <span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new_with_signer</span><span class="token punctuation">(</span>            ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_metadata_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">CreateMetadataAccountsV3</span> <span class="token punctuation">&#123;</span>                metadata<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>meta_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                mint<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                mint_authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                update_authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                payer<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                system_program<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>system_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                rent<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>rent<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            signer_seeds<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">DataV2</span> <span class="token punctuation">&#123;</span>            name<span class="token punctuation">:</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; #&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token class-name">MyNFT</span><span class="token punctuation">::</span><span class="token constant">TOKEN_NAME</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nft_id<span class="token punctuation">)</span><span class="token punctuation">,</span>            symbol<span class="token punctuation">:</span> <span class="token class-name">MyNFT</span><span class="token punctuation">::</span><span class="token constant">TOKEN_SYMBOL</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            uri<span class="token punctuation">:</span> <span class="token class-name">MyNFT</span><span class="token punctuation">::</span><span class="token constant">TOKEN_URL</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            seller_fee_basis_points<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            creators<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>            collection<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>            uses<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token class-name">None</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// 铸造 1 个 NFT 到关联账户</span>    <span class="token function">mint_to</span><span class="token punctuation">(</span>        <span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new_with_signer</span><span class="token punctuation">(</span>            ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">MintTo</span> <span class="token punctuation">&#123;</span>                mint<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                to<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_associated_token_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            signer_seeds<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// 创建主版本账户（限制最大发行量为 1）</span>    <span class="token function">create_master_edition_v3</span><span class="token punctuation">(</span>        <span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new_with_signer</span><span class="token punctuation">(</span>            ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_metadata_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">CreateMasterEditionV3</span> <span class="token punctuation">&#123;</span>                edition<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>master_edition_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                payer<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                mint<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                metadata<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>meta_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                mint_authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                update_authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                system_program<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>system_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                token_program<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                rent<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>rent<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            signer_seeds<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 最大发行量，确保 NFT 唯一性</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="1-2-2-账户结构（NFTMint）">1.2.2 账户结构（<code>NFTMint</code>）</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token attribute attr-name">#[instruction(nft_id: String)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">NFTMint</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/// 主版本账户（MPL 标准）</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        <span class="token keyword">mut</span><span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">b"metadata"</span><span class="token punctuation">,</span>            token_metadata_program<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nft_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">b"edition"</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>        <span class="token namespace">seeds<span class="token punctuation">::</span></span>program <span class="token operator">=</span> token_metadata_program<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> master_edition_account<span class="token punctuation">:</span> <span class="token class-name">UncheckedAccount</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">/// 元数据账户（MPL 标准）</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        <span class="token keyword">mut</span><span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">b"metadata"</span><span class="token punctuation">,</span>            token_metadata_program<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nft_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>        <span class="token namespace">seeds<span class="token punctuation">::</span></span>program <span class="token operator">=</span> token_metadata_program<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> meta_account<span class="token punctuation">:</span> <span class="token class-name">UncheckedAccount</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">/// NFT Mint 账户（PDA 派生）</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init_if_needed<span class="token punctuation">,</span>        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">MyNFT</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nft_id<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>        <span class="token namespace">mint<span class="token punctuation">::</span></span>decimals <span class="token operator">=</span> <span class="token class-name">MyNFT</span><span class="token punctuation">::</span><span class="token constant">TOKEN_DECIMALS</span><span class="token punctuation">,</span>        <span class="token namespace">mint<span class="token punctuation">::</span></span>authority <span class="token operator">=</span> nft_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token namespace">mint<span class="token punctuation">::</span></span>freeze_authority <span class="token operator">=</span> nft_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> nft_mint_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Mint</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">/// 用户关联的 NFT 代币账户</span>    <span class="token attribute attr-name">#[account(        init_if_needed,        payer = authority,        associated_token::mint = nft_mint_account,        associated_token::authority = authority,    )]</span>    <span class="token keyword">pub</span> nft_associated_token_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">TokenAccount</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 发起者签名账户</span>    <span class="token comment">// 依赖程序</span>    <span class="token keyword">pub</span> token_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Token</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> token_metadata_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Metadata</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> associated_token_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">AssociatedToken</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> rent<span class="token punctuation">:</span> <span class="token class-name">Sysvar</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Rent</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h4 id="1-2-3-NFT-配置常量（state-nft-rs）">1.2.3 NFT 配置常量（<code>state/nft.rs</code>）</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">MyNFT</span><span class="token punctuation">;</span><span class="token keyword">impl</span> <span class="token class-name">MyNFT</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">SEED_PREFIX</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"MyNFT_v1"</span><span class="token punctuation">;</span> <span class="token comment">// PDA 种子前缀</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">TOKEN_DECIMALS</span><span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// NFT 通常使用 0 位小数</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">TOKEN_NAME</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"My NFT"</span><span class="token punctuation">;</span> <span class="token comment">// 名称前缀</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">TOKEN_SYMBOL</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"MTK"</span><span class="token punctuation">;</span> <span class="token comment">// 符号</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">TOKEN_URL</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"https://img.soniachen.com/IMG_0151.JPG"</span><span class="token punctuation">;</span> <span class="token comment">// 元数据 URI</span><span class="token punctuation">&#125;</span></code></pre><h3 id="1-3-客户端调用示例（app-api-nft-ts）">1.3 客户端调用示例（<code>app/api/nft.ts</code>）</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> anchor <span class="token keyword">from</span> <span class="token string">"@coral-xyz/anchor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> program <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./wallet"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">nftMint</span><span class="token punctuation">(</span>wallet<span class="token operator">:</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">,</span> nftId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">nftMint</span><span class="token punctuation">(</span>nftId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        authority<span class="token operator">:</span> wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-NFT-质押（Stake）功能">2. NFT 质押（Stake）功能</h2><h3 id="2-1-功能说明">2.1 功能说明</h3><p>通过 <code>nft_stake</code> 方法实现 NFT 质押，主要流程包括：</p><ul><li>创建质押信息记录（<code>StakeInfo</code>）</li><li>将 NFT 从用户账户转移到质押池（程序托管账户）</li><li>铸造流动性代币作为质押奖励</li></ul><h3 id="2-2-核心实现（nft-stake-rs）">2.2 核心实现（<code>nft_stake.rs</code>）</h3><h4 id="2-2-1-质押方法">2.2.1 质押方法</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">nft_stake</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">NFTStake</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 记录质押关系</span>    <span class="token keyword">let</span> stake_info <span class="token operator">=</span> <span class="token class-name">StakeInfo</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>        ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>stake_info<span class="token punctuation">.</span><span class="token function">set_inner</span><span class="token punctuation">(</span>stake_info<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将 NFT 从用户账户转移到质押池</span>    <span class="token function">transfer</span><span class="token punctuation">(</span>        <span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>            ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Transfer</span> <span class="token punctuation">&#123;</span>                from<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>nft_associated_token_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                to<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>program_receipt_ata<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// NFT 数量为 1</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// 铸造流动性代币作为奖励</span>    <span class="token keyword">let</span> signer_seeds<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>        <span class="token class-name">MyToken</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span><span class="token punctuation">[</span>ctx<span class="token punctuation">.</span>bumps<span class="token punctuation">.</span>token_mint_account<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">mint_to</span><span class="token punctuation">(</span>        <span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>            ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">MintTo</span> <span class="token punctuation">&#123;</span>                mint<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                to<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>associated_token_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">with_signer</span><span class="token punctuation">(</span>signer_seeds<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token comment">// 奖励代币数量</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-2-2-账户结构（NFTStake）">2.2.2 账户结构（<code>NFTStake</code>）</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">NFTStake</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/// 质押信息记录账户</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init_if_needed<span class="token punctuation">,</span>        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>        space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token class-name">StakeInfo</span><span class="token punctuation">::</span><span class="token constant">INIT_SPACE</span><span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token class-name">StakeInfo</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nft_mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> stake_info<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">StakeInfo</span><span class="token operator">>></span><span class="token punctuation">,</span>    <span class="token comment">/// 质押池接收 NFT 的账户</span>    <span class="token attribute attr-name">#[account(        init_if_needed,        payer = authority,        associated_token::mint = nft_mint_account,        associated_token::authority = stake_info,    )]</span>    <span class="token keyword">pub</span> program_receipt_ata<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">TokenAccount</span><span class="token operator">>></span><span class="token punctuation">,</span>    <span class="token comment">/// 流动性代币 Mint 账户</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        <span class="token keyword">mut</span><span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">MyToken</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> token_mint_account<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Mint</span><span class="token operator">>></span><span class="token punctuation">,</span>    <span class="token comment">/// 用户的流动性代币关联账户</span>    <span class="token attribute attr-name">#[account(        init_if_needed,        payer = authority,        associated_token::mint = token_mint_account,        associated_token::authority = authority,    )]</span>    <span class="token keyword">pub</span> associated_token_account<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">TokenAccount</span><span class="token operator">>></span><span class="token punctuation">,</span>    <span class="token comment">/// 被质押的 NFT Mint 账户</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> nft_mint_account<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Mint</span><span class="token operator">>></span><span class="token punctuation">,</span>    <span class="token comment">/// 用户的 NFT 关联账户</span>    <span class="token attribute attr-name">#[account(mut,        associated_token::mint = nft_mint_account,        associated_token::authority = authority,    )]</span>    <span class="token keyword">pub</span> nft_associated_token_account<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">TokenAccount</span><span class="token operator">>></span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 发起者签名账户</span>    <span class="token comment">// 依赖程序</span>    <span class="token keyword">pub</span> token_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Token</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> associated_token_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">AssociatedToken</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-2-3-质押信息结构（state-stake-rs）">2.2.3 质押信息结构（<code>state/stake.rs</code>）</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[account]</span><span class="token attribute attr-name">#[derive(InitSpace)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">StakeInfo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> staker<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>           <span class="token comment">// 质押人地址</span>    <span class="token keyword">pub</span> nft_mint_account<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span> <span class="token comment">// 质押的 NFT Mint 地址</span>    <span class="token keyword">pub</span> staked_at<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>           <span class="token comment">// 质押时间（纪元）</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">StakeInfo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">SEED_PREFIX</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"stake_v1"</span><span class="token punctuation">;</span> <span class="token comment">// PDA 种子前缀</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>staker<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span> nft_mint_account<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            staker<span class="token punctuation">,</span>            nft_mint_account<span class="token punctuation">,</span>            staked_at<span class="token punctuation">:</span> <span class="token class-name">Clock</span><span class="token punctuation">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>epoch<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-3-客户端调用示例（app-api-stake-ts）">2.3 客户端调用示例（<code>app/api/stake.ts</code>）</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> anchor <span class="token keyword">from</span> <span class="token string">"@coral-xyz/anchor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> program <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./wallet"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getNftMintAccount <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./account"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">stakeNFT</span><span class="token punctuation">(</span>wallet<span class="token operator">:</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">,</span> nft_id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">nftStake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        nftMintAccount<span class="token operator">:</span> <span class="token function">getNftMintAccount</span><span class="token punctuation">(</span>nft_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">signers</span><span class="token punctuation">(</span><span class="token punctuation">[</span>wallet<span class="token punctuation">.</span>payer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="3-关键技术点">3. 关键技术点</h2><ol><li><p><strong>PDA 账户管理</strong>：通过种子（Seed）派生程序派生地址（PDA）管理 NFT Mint 账户、质押信息账户等，确保账户安全性和可预测性。</p></li><li><p><strong>MPL 元数据标准</strong>：遵循 Metaplex Token Metadata 标准创建 NFT 元数据和主版本账户，确保 NFT 兼容性和唯一性。</p></li><li><p><strong>代币转移与铸造权限</strong>：使用 SPL Token 程序进行代币转移，通过 PDA 签名授予铸造权限，避免私钥直接暴露。</p></li><li><p><strong>关联代币账户（ATA）</strong>：使用关联代币账户规范管理用户与代币的关联关系，简化账户创建和管理流程。</p></li><li><p><strong>质押奖励机制</strong>：质押 NFT 时铸造流动性代币作为奖励，实现激励机制闭环。</p></li></ol><h2 id="验证">验证</h2><p>查看账号，发现我的nft已经转移走了，取而代之的是token发放到我的账户中</p><p><img src="https://img.soniachen.com/blog/posts/2025/08/image-20250822162010948.png" alt="image-20250822162010948"></p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part15]_Solana质押-流动性质押</title>
      <link href="/2025/08/20/Solana-part15-Solana%E8%B4%A8%E6%8A%BC-%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B4%A8%E6%8A%BC/"/>
      <url>/2025/08/20/Solana-part15-Solana%E8%B4%A8%E6%8A%BC-%E6%B5%81%E5%8A%A8%E6%80%A7%E8%B4%A8%E6%8A%BC/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/08/solanapart15.jpg</cover>
      <date>Wed Aug 20 2025 19:47:20 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part15]_Solana质押-流动性质押</h1><h2 id="一、流动性质押核心概念与角色">一、流动性质押核心概念与角色</h2><h3 id="1-基本定义">1. 基本定义</h3><p>流动性质押（Liquid Staking）是一种允许用户质押加密资产支持区块链网络安全，同时通过接收流动性代币（Liquid Staking Token, LST）保持资产流动性的机制。</p><p>在Solana生态中，用户质押SOL后会收到对应比例的LST（如mSOL、stSOL等），这些代币可在DeFi应用中自由使用（交易、借贷等），同时仍能获得质押奖励。</p><h3 id="2-工作原理">2. 工作原理</h3><pre class="language-mermaid410." data-language="mermaid410."><code class="language-mermaid410.">graph TD    A[用户质押SOL] --&gt; B[流动性质押协议接收SOL]    B --&gt; C[协议分配SOL给验证者节点]    B --&gt; D[用户获得等额LST]    D --&gt; E[LST在DeFi场景使用]    C --&gt; F[产生质押奖励]    F --&gt; G[LST价值随奖励增值]    D --&gt; H[用户赎回LST为SOL]    </code></pre><h3 id="3-与原生质押的核心区别">3. 与原生质押的核心区别</h3><table><thead><tr><th>特性</th><th>原生质押</th><th>流动性质押</th></tr></thead><tbody><tr><td>资产流动性</td><td>低（解锁需2-3天）</td><td>高（LST可自由流通）</td></tr><tr><td>资金利用率</td><td>低（资金锁定）</td><td>高（LST可复用至其他场景）</td></tr><tr><td>收益模式</td><td>单一质押奖励</td><td>质押奖励+LST应用收益</td></tr><tr><td>操作复杂度</td><td>较低</td><td>中等（需了解LST生态）</td></tr></tbody></table><h3 id="4-核心角色与职责">4. 核心角色与职责</h3><table><thead><tr><th>角色</th><th>核心职责</th></tr></thead><tbody><tr><td><strong>Manager</strong></td><td>质押池创建者，负责配置规则（费率、权限）、管理验证者节点、维护质押池平衡</td></tr><tr><td><strong>User</strong></td><td>质押SOL/质押账户、获取LST、赎回资产，享受质押收益</td></tr></tbody></table><h2 id="二、环境准备（本地测试网）">二、环境准备（本地测试网）</h2><blockquote><p>前置操作：为后续Manager和User的实操搭建本地测试环境</p></blockquote><h3 id="1-工具安装">1. 工具安装</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装Solana CLI和质押池工具</span><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-sSfL</span> https://release.solana.com/stable/install<span class="token variable">)</span></span>"</span><span class="token function">cargo</span> <span class="token function">install</span> spl-stake-pool-cli<span class="token comment"># 克隆质押池代码（部署依赖）</span><span class="token function">git</span> clone https://github.com/solana-labs/spl-stake-pool.git<span class="token builtin class-name">cd</span> spl-stake-pool <span class="token operator">&amp;&amp;</span> <span class="token function">cargo</span> build-bpf</code></pre><h3 id="2-启动本地测试网（加载质押池程序）">2. 启动本地测试网（加载质押池程序）</h3><pre class="language-bash" data-language="bash"><code class="language-bash">solana-test-validator <span class="token punctuation">\</span>  <span class="token parameter variable">--ledger</span> ./test-ledger <span class="token punctuation">\</span>  <span class="token comment"># 数据存储路径</span>  --bpf-program STAKE11111111111111111111111111111111111111 ./target/deploy/spl_stake_pool.so <span class="token punctuation">\</span>  <span class="token comment"># 加载质押池程序</span>  <span class="token parameter variable">--reset</span>  <span class="token comment"># 重置测试网状态（首次启动建议添加）</span></code></pre><h2 id="三、Manager操作：质押池全生命周期管理">三、Manager操作：质押池全生命周期管理</h2><blockquote><p>流程：创建身份 → 初始化质押池 → 配置验证者 → 维护质押池</p></blockquote><h3 id="1-生成Manager身份密钥">1. 生成Manager身份密钥</h3><pre class="language-bash" data-language="bash"><code class="language-bash">solana-keygen new <span class="token parameter variable">--outfile</span> pool-manager.json --no-passphrase</code></pre><h3 id="2-创建质押池（初始化核心参数）">2. 创建质押池（初始化核心参数）</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换$USER_ADDR为后续用户主账户地址（见第四章步骤1）</span>spl-stake-pool create-pool <span class="token punctuation">\</span>  <span class="token parameter variable">--manager</span> pool-manager.json <span class="token punctuation">\</span>          <span class="token comment"># Manager身份（签名权限）</span>  --fee-owner <span class="token variable">$USER_ADDR</span> <span class="token punctuation">\</span>              <span class="token comment"># 管理费接收地址</span>  --withdrawal-fee <span class="token number">0.01</span> <span class="token punctuation">\</span>               <span class="token comment"># 提现手续费（1%）</span>  --management-fee <span class="token number">0.1</span> <span class="token punctuation">\</span>                <span class="token comment"># 质押奖励管理费（10%）</span>  --stake-deposit-authority <span class="token variable">$USER_ADDR</span> <span class="token punctuation">\</span># 允许用户存入质押账户的权限  --withdrawal-authority <span class="token variable">$USER_ADDR</span> <span class="token punctuation">\</span>   <span class="token comment"># 允许用户提现的权限</span>  --no-lamports-check                   <span class="token comment"># 测试网跳过余额检查</span></code></pre><ul><li><strong>输出关键信息</strong>：质押池地址（POOL_ADDR）、流动性代币Mint地址（TOKEN_MINT）</li></ul><h3 id="3-配置流动性代币元数据（钱包显示）">3. 配置流动性代币元数据（钱包显示）</h3><pre class="language-bash" data-language="bash"><code class="language-bash">spl-stake-pool create-token-metadata <span class="token punctuation">\</span>  <span class="token variable">$POOL_ADDR</span> <span class="token punctuation">\</span>           <span class="token comment"># 质押池地址</span>  <span class="token string">"MyStakePoolToken"</span> <span class="token punctuation">\</span>   <span class="token comment"># 代币名称</span>  <span class="token string">"MPT"</span> <span class="token punctuation">\</span>                <span class="token comment"># 代币符号（如mSOL）</span>  <span class="token parameter variable">--manager</span> pool-manager.json</code></pre><h3 id="4-验证者节点管理">4. 验证者节点管理</h3><h4 id="①-创建测试验证者投票账户（测试网专用）">① 创建测试验证者投票账户（测试网专用）</h4><pre class="language-bash" data-language="bash"><code class="language-bash">solana-keygen new <span class="token parameter variable">--outfile</span> validator.json --no-passphrasesolana create-vote-account validator-vote.json validator.json <span class="token number">100</span><span class="token assign-left variable">VALIDATOR_VOTE_ADDR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>solana address <span class="token parameter variable">-k</span> validator-vote.json<span class="token variable">)</span></span>  <span class="token comment"># 获取验证者投票地址</span></code></pre><h4 id="②-添加验证者到质押池">② 添加验证者到质押池</h4><pre class="language-bash" data-language="bash"><code class="language-bash">spl-stake-pool add-validator <span class="token punctuation">\</span>  <span class="token variable">$POOL_ADDR</span> <span class="token punctuation">\</span>  <span class="token variable">$VALIDATOR_VOTE_ADDR</span> <span class="token punctuation">\</span>  <span class="token comment"># 验证者投票账户地址</span>  <span class="token parameter variable">--manager</span> pool-manager.json</code></pre><h4 id="③-调整验证者质押分配">③ 调整验证者质押分配</h4><ul><li><p>增加质押量（100 SOL）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">spl-stake-pool increase-validator-stake <span class="token punctuation">\</span>  <span class="token variable">$POOL_ADDR</span> <span class="token punctuation">\</span>  <span class="token variable">$VALIDATOR_VOTE_ADDR</span> <span class="token punctuation">\</span>  <span class="token number">100</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--manager</span> pool-manager.json</code></pre></li><li><p>减少质押量（50 SOL）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">spl-stake-pool decrease-validator-stake <span class="token punctuation">\</span>  <span class="token variable">$POOL_ADDR</span> <span class="token punctuation">\</span>  <span class="token variable">$VALIDATOR_VOTE_ADDR</span> <span class="token punctuation">\</span>  <span class="token number">50</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--manager</span> pool-manager.json</code></pre></li></ul><h3 id="5-质押池维护（收益再平衡）">5. 质押池维护（收益再平衡）</h3><p>定时触发质押资金在验证者间的优化分配（向高收益节点倾斜）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">spl-stake-pool update <span class="token punctuation">\</span>  <span class="token variable">$POOL_ADDR</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--manager</span> pool-manager.json</code></pre><h2 id="四、User操作：质押与赎回全流程">四、User操作：质押与赎回全流程</h2><blockquote><p>流程：创建用户身份 → 质押SOL/质押账户 → 赎回SOL/质押账户</p></blockquote><h3 id="1-准备User主账户">1. 准备User主账户</h3><pre class="language-bash" data-language="bash"><code class="language-bash">solana-keygen new <span class="token parameter variable">--outfile</span> user.json --no-passphrasesolana config <span class="token builtin class-name">set</span> <span class="token parameter variable">--keypair</span> user.json  <span class="token comment"># 设为默认签名账户</span><span class="token assign-left variable">USER_ADDR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>solana address<span class="token variable">)</span></span>  <span class="token comment"># 获取用户地址</span>solana airdrop <span class="token number">1000</span> <span class="token variable">$USER_ADDR</span>  <span class="token comment"># 测试网空投SOL（用于质押）</span></code></pre><h3 id="2-质押操作">2. 质押操作</h3><h4 id="①-直接质押SOL（自动创建质押账户）">① 直接质押SOL（自动创建质押账户）</h4><p>适合普通用户，无需提前准备质押账户：</p><pre class="language-bash" data-language="bash"><code class="language-bash">spl-stake-pool deposit-sol <span class="token punctuation">\</span>  <span class="token variable">$POOL_ADDR</span> <span class="token punctuation">\</span>  <span class="token comment"># 目标质押池地址</span>  <span class="token number">50</span> <span class="token punctuation">\</span>          <span class="token comment"># 质押50 SOL</span>  <span class="token parameter variable">--source</span> user.json  <span class="token comment"># 用户签名</span></code></pre><h4 id="②-质押已有质押账户（自定义质押策略）">② 质押已有质押账户（自定义质押策略）</h4><p>适合机构用户或需灵活配置质押的场景：</p><ul><li>先创建质押账户：<pre class="language-bash" data-language="bash"><code class="language-bash">solana create-stake-account stake-account.json <span class="token number">100</span>  <span class="token comment"># 质押账户存入100 SOL</span></code></pre></li><li>存入质押池：<pre class="language-bash" data-language="bash"><code class="language-bash">spl-stake-pool deposit-stake <span class="token punctuation">\</span>  <span class="token variable">$POOL_ADDR</span> <span class="token punctuation">\</span>  stake-account.json <span class="token punctuation">\</span>  <span class="token comment"># 已创建的质押账户</span>  <span class="token parameter variable">--source</span> user.json    <span class="token comment"># 用户签名</span></code></pre></li></ul><h3 id="3-赎回操作">3. 赎回操作</h3><h4 id="①-直接赎回SOL（快速提现，依赖池内流动性）">① 直接赎回SOL（快速提现，依赖池内流动性）</h4><p>适合紧急或小额提现：</p><pre class="language-bash" data-language="bash"><code class="language-bash">spl-stake-pool withdraw-sol <span class="token punctuation">\</span>  <span class="token variable">$POOL_ADDR</span> <span class="token punctuation">\</span>  <span class="token number">20</span> <span class="token punctuation">\</span>          <span class="token comment"># 赎回20 SOL</span>  <span class="token parameter variable">--owner</span> user.json  <span class="token comment"># 用户签名</span></code></pre><h4 id="②-赎回至新质押账户（大额赎回，需解锁期）">② 赎回至新质押账户（大额赎回，需解锁期）</h4><ul><li><p>发起提现请求（创建新质押账户）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">spl-stake-pool request-withdrawal <span class="token punctuation">\</span>  <span class="token variable">$POOL_ADDR</span> <span class="token punctuation">\</span>  <span class="token number">30</span> <span class="token punctuation">\</span>  <span class="token comment"># 赎回30 SOL对应的LST</span>  <span class="token parameter variable">--owner</span> user.json <span class="token punctuation">\</span>  --new-stake-account new-stake.json  <span class="token comment"># 新质押账户</span></code></pre></li><li><p>测试网跳过解锁期（模拟时间流逝）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">solana advance-clock +1000  <span class="token comment"># 推进1000个slot（约10分钟）</span></code></pre></li><li><p>完成提现并提取SOL到主账户：</p><pre class="language-bash" data-language="bash"><code class="language-bash">spl-stake-pool complete-withdrawal <span class="token punctuation">\</span>  <span class="token variable">$POOL_ADDR</span> <span class="token punctuation">\</span>  new-stake.json <span class="token punctuation">\</span>  <span class="token parameter variable">--owner</span> user.jsonsolana withdraw-stake new-stake.json <span class="token variable">$USER_ADDR</span> <span class="token number">100</span>%  <span class="token comment"># 从质押账户提取全部SOL</span></code></pre></li></ul><h2 id="五、机制解析与操作对比">五、机制解析与操作对比</h2><h3 id="1-流动性代币（LST）增值逻辑">1. 流动性代币（LST）增值逻辑</h3><ul><li>初始比例为1:1（1 LST = 1 SOL），随质押奖励累积，1 LST对应的SOL数量会增长（如1:1.1）。</li><li>Manager收取的管理费（如10%）从用户奖励中扣除，直接影响LST增值速度。</li></ul><h3 id="2-User操作对比表">2. User操作对比表</h3><table><thead><tr><th>操作类型</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><code>deposit-sol</code></td><td>自动创建质押账户，操作简</td><td>普通用户小额质押</td></tr><tr><td><code>deposit-stake</code></td><td>需提前创建质押账户，灵活</td><td>机构用户/自定义策略</td></tr><tr><td><code>withdraw-sol</code></td><td>快速赎回，依赖池内流动性</td><td>紧急提现/小额赎回</td></tr><tr><td><code>withdraw-stake</code></td><td>需解锁期，金额无上限</td><td>大额赎回/长期质押后提现</td></tr></tbody></table><h3 id="3-Manager核心逻辑">3. Manager核心逻辑</h3><ul><li><strong>验证者优化</strong>：通过<code>add-validator</code>和质押量调整，将资金分配给高收益、低风险验证者。</li><li><strong>自动平衡</strong>：<code>update</code>操作触发资金重分配，确保收益最大化。</li><li><strong>规则控制</strong>：可通过<code>set-withdrawal-fee</code>/<code>set-management-fee</code>动态调整费率。</li></ul><h2 id="六、常见问题与调试">六、常见问题与调试</h2><h3 id="1-Manager操作报错">1. Manager操作报错</h3><ul><li><strong><code>Permission denied</code></strong>：检查<code>--manager</code>参数是否为<code>pool-manager.json</code>（需Manager签名）。</li><li><strong><code>Validator not found</code></strong>：确认验证者投票账户地址正确，且已通过<code>add-validator</code>加入池。</li></ul><h3 id="2-User操作问题">2. User操作问题</h3><ul><li><strong>质押后未收到LST</strong>：通过<code>solana transaction-status &lt;TX_HASH&gt;</code>查询交易状态，确认质押池是否有权限发行代币。</li><li><strong>赎回失败</strong>：<code>withdraw-sol</code>失败可能因池内流动性不足，建议改用<code>withdraw-stake</code>。</li></ul><h3 id="3-质押池update无效果">3. 质押池<code>update</code>无效果</h3><ul><li>确保池内有可分配的质押资金，或验证者投票账户状态正常（可通过<code>solana vote-account &lt;VOTE_ADDR&gt;</code>检查）。</li></ul><p>通过Manager对质押池的专业管理与User的灵活操作，流动性质押实现了“收益性”与“流动性”的平衡。本地测试网可反复演练上述流程，帮助理解其底层逻辑！</p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part14]_Solana质押-native stake</title>
      <link href="/2025/08/20/Solana-part14-Solana%E8%B4%A8%E6%8A%BC-native-stake/"/>
      <url>/2025/08/20/Solana-part14-Solana%E8%B4%A8%E6%8A%BC-native-stake/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/08/Solana%2520part4.jpg</cover>
      <date>Wed Aug 20 2025 11:32:16 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part14]_Solana质押-native stake</h1><h2 id="什么是-Solana-Native-Staking？">什么是 Solana Native Staking？</h2><p>Solana 的原生质押（Native Staking）是指将 SOL 代币质押给验证者，以支持 Solana 网络的安全运行并获得相应奖励的过程。通过质押，用户可以参与网络共识，同时获得年化收益（APY 通常在 4-8% 之间浮动）。</p><h2 id="一、钱包操作方式">一、钱包操作方式</h2><h3 id="1-准备工作">1. 准备工作</h3><ul><li>安装支持 Solana 质押的钱包（推荐：Phantom、Solflare、Ledger Live）</li><li>确保钱包中有足够的 SOL（至少需要覆盖质押金额 + 交易手续费）</li><li>了解 Solana 验证者的基本信息（可以在 <a href="https://solanabeach.io/">Solana Validator Explorer</a> 查看）</li></ul><h3 id="2-使用-Phantom-钱包进行质押">2. 使用 Phantom 钱包进行质押</h3><h4 id="步骤-1：打开-Phantom-钱包并连接到-Solana-主网">步骤 1：打开 Phantom 钱包并连接到 Solana 主网</h4><p>确保钱包网络已切换至 “Solana Mainnet Beta”</p><h4 id="步骤-2：导航至质押页面">步骤 2：导航至质押页面</h4><ul><li>在钱包主页点击 “Stake” 或 “质押” 选项</li><li>点击 “Add Stake” 或 “添加质押” 按钮</li></ul><h4 id="步骤-3：选择验证者">步骤 3：选择验证者</h4><ul><li>可以通过搜索验证者的名称或地址查找</li><li>查看验证者的佣金比例、活跃度和历史表现</li><li>选择合适的验证者后点击 “Select” 或 “选择”</li></ul><h4 id="步骤-4：输入质押金额">步骤 4：输入质押金额</h4><ul><li>输入要质押的 SOL 数量</li><li>确认交易手续费（通常自动计算）</li><li>点击 “Stake” 或 “质押” 按钮</li></ul><h4 id="步骤-5：确认交易">步骤 5：确认交易</h4><ul><li>检查交易详情无误后确认</li><li>等待交易被网络确认（通常需要几秒钟到一分钟）</li></ul><h4 id="步骤-6：查看质押状态">步骤 6：查看质押状态</h4><ul><li>在 “Stake” 页面可以查看所有质押头寸</li><li>包括质押金额、验证者信息、预计收益和解锁时间</li></ul><h3 id="3-解除质押（Unstake）">3. 解除质押（Unstake）</h3><ul><li>在质押头寸旁点击 “Unstake” 或 “解除质押”</li><li>确认交易，等待网络确认</li><li>注意：解除质押后，资金有大约 2-3 天的解锁期，期间无法转移或再次质押</li></ul><h3 id="4-领取奖励">4. 领取奖励</h3><ul><li>大多数钱包会自动累积奖励</li><li>部分钱包需要手动点击 “Claim Rewards” 或 “领取奖励”</li><li>奖励会直接添加到你的可用余额中</li></ul><h2 id="二、CLI-操作方式">二、CLI 操作方式</h2><h3 id="1-准备工作-2">1. 准备工作</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建新钱包</span>solana-keygen new <span class="token parameter variable">--outfile</span> ~/.config/solana/my-wallet.json<span class="token comment"># 导入现有钱包（如有私钥文件）</span><span class="token comment"># solana-keygen recover -o ~/.config/solana/my-wallet.json</span><span class="token comment"># 设置默认钱包</span>solana config <span class="token builtin class-name">set</span> <span class="token parameter variable">--keypair</span> ~/.config/solana/my-wallet.json<span class="token comment"># 查看钱包余额</span>solana balance</code></pre><h3 id="2-进行质押">2. 进行质押</h3><h4 id="步骤-1：创建质押账户">步骤 1：创建质押账户</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个质押账户，需要支付少量租金</span>solana create-stake-account ~/.config/solana/my-stake-account.json <span class="token number">10</span> SOL<span class="token comment"># 注意：10 SOL 是质押的最小金额示例，实际可根据需要调整</span></code></pre><h4 id="步骤-2：查找验证者">步骤 2：查找验证者</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取验证者列表（前100名）</span>solana validators <span class="token parameter variable">--output</span> json-compact <span class="token operator">|</span> jq <span class="token string">'.validators[0:100] | map(&#123;votePubkey: .votePubkey, commission: .commission, activatedStake: .activatedStake&#125;)'</span><span class="token comment"># 选择一个验证者的 vote account 地址（示例）</span><span class="token assign-left variable">VALIDATOR_VOTE_ADDRESS</span><span class="token operator">=</span><span class="token string">"GdnSyH3YtwcxFvQrVVJMm1JhTS4QVX7MFsX56uJLUfiZ"</span></code></pre><h4 id="步骤-3：进行质押">步骤 3：进行质押</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将质押账户委托给验证者</span>solana delegate-stake ~/.config/solana/my-stake-account.json <span class="token variable">$VALIDATOR_VOTE_ADDRESS</span></code></pre><h4 id="步骤-4：查看质押状态">步骤 4：查看质押状态</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看质押账户信息</span>solana stake-account ~/.config/solana/my-stake-account.json<span class="token comment"># 查看所有质押账户</span>solana stakes</code></pre><h3 id="3-增加质押金额">3. 增加质押金额</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 向现有质押账户添加更多 SOL</span>solana delegate-stake <span class="token parameter variable">--increase</span> ~/.config/solana/my-stake-account.json <span class="token variable">$VALIDATOR_VOTE_ADDRESS</span> <span class="token number">5</span> SOL<span class="token comment"># 这里的 5 SOL 是要增加的质押金额</span></code></pre><h3 id="4-解除质押">4. 解除质押</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解除质押（开始解锁过程）</span>solana deactivate-stake ~/.config/solana/my-stake-account.json<span class="token comment"># 检查解锁状态（需要等待解锁期）</span>solana stake-account ~/.config/solana/my-stake-account.json</code></pre><h3 id="5-提取质押资金">5. 提取质押资金</h3><p>在解锁期结束后，可以提取资金：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 提取质押的 SOL 到钱包</span>solana withdraw-stake ~/.config/solana/my-stake-account.json ~/.config/solana/my-wallet.json <span class="token number">100</span>%<span class="token comment"># 100% 表示提取全部金额，也可以指定具体数量如 5 SOL</span></code></pre><h3 id="6-领取奖励">6. 领取奖励</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看可领取的奖励</span>solana get-rewards ~/.config/solana/my-stake-account.json <span class="token parameter variable">--output</span> json<span class="token comment"># 领取奖励到钱包</span>solana withdraw-stake --withdraw-from-rewards ~/.config/solana/my-stake-account.json ~/.config/solana/my-wallet.json <span class="token number">100</span>%</code></pre><h2 id="三、注意事项">三、注意事项</h2><ol><li><p><strong>验证者选择</strong>：选择佣金合理、历史表现良好的验证者，避免选择过于集中的验证者以分散风险。</p></li><li><p><strong>质押周期</strong>：质押没有固定期限，但解除质押有 2-3 天的解锁期。</p></li><li><p><strong>奖励计算</strong>：奖励按 epoch（约 2 天）计算和发放，具体收益取决于网络整体质押率和验证者表现。</p></li><li><p><strong>安全考虑</strong>：</p><ul><li>不要将私钥分享给任何人</li><li>大额质押建议使用硬件钱包（如 Ledger）</li><li>定期检查验证者状态</li></ul></li><li><p><strong>费用问题</strong>：所有操作都需要支付少量交易费，确保钱包中有足够的 SOL 支付费用。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part13]_Anchor实战：为用户Mint Spl TOKEN</title>
      <link href="/2025/08/19/Solana-part13-Anchor%E5%AE%9E%E6%88%98%EF%BC%9A%E4%B8%BA%E7%94%A8%E6%88%B7Mint-Spl-TOKEN/"/>
      <url>/2025/08/19/Solana-part13-Anchor%E5%AE%9E%E6%88%98%EF%BC%9A%E4%B8%BA%E7%94%A8%E6%88%B7Mint-Spl-TOKEN/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/08/Solanapart13.jpg</cover>
      <date>Tue Aug 19 2025 22:04:40 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part13]_Anchor实战：为用户Mint Spl TOKEN</h1><p>该部分代码见：<a href="https://github.com/SoniaChan33/anchor_social/commit/5abd954500f2926d999ac644c18a97c91cde9fb6">https://github.com/SoniaChan33/anchor_social/commit/5abd954500f2926d999ac644c18a97c91cde9fb6</a></p><h2 id="createLike指令添加需要的account">createLike指令添加需要的account</h2><p>/anchor_social/src/instructions/tweet.rs</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">CreateLike</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        <span class="token keyword">mut</span><span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">b"mint_v3"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> mint_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Mint</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[account(        init_if_needed,        payer = authority,        associated_token::mint = mint_account,        associated_token::authority = author_wallet,    )]</span>    <span class="token keyword">pub</span> author_token_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">TokenAccount</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">/// CHECK : THIS IS AUTHOR WALLET</span>    <span class="token keyword">pub</span> author_wallet<span class="token punctuation">:</span> <span class="token class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init<span class="token punctuation">,</span>        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>        space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token class-name">Like</span><span class="token punctuation">::</span><span class="token constant">INIT_SPACE</span><span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token class-name">Like</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            profile<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            tweet<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        bump    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> like<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Like</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> tweet<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Tweet</span><span class="token operator">></span><span class="token punctuation">,</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span><span class="token keyword">mut</span><span class="token punctuation">,</span> seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Profile</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authority<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bump<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> profile<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Profile</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> associated_token_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">AssociatedToken</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> token_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Token</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 新增的Token程序字段</span><span class="token punctuation">&#125;</span></code></pre><h2 id="tweet结构体修改">tweet结构体修改</h2><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[account]</span><span class="token attribute attr-name">#[derive(InitSpace)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Tweet</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[max_len(50)]</span>    <span class="token keyword">pub</span> body<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> like_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> author<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Tweet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">SEED_PREFIX</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"tweet"</span><span class="token punctuation">;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>body<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            body<span class="token punctuation">,</span>            like_count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            author<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>添加author属性记录要mint to的author token account 地址</p><p>同时需要修改create_tweet函数的细节：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_tweet</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">CreateTweet</span><span class="token operator">></span><span class="token punctuation">,</span> body<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> profile <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>profile<span class="token punctuation">;</span>    profile<span class="token punctuation">.</span>tweet_count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tweet <span class="token operator">=</span> <span class="token class-name">Tweet</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>tweet<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里添加tweet的地址</span>    ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>tweet<span class="token punctuation">.</span><span class="token function">set_inner</span><span class="token punctuation">(</span>tweet<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="修改createLike方法">修改createLike方法</h2><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_like</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">CreateLike</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> tweet <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>tweet<span class="token punctuation">;</span>    tweet<span class="token punctuation">.</span>like_count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> like <span class="token operator">=</span> <span class="token class-name">Like</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>profile<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tweet<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>like<span class="token punctuation">.</span><span class="token function">set_inner</span><span class="token punctuation">(</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印mint_account的地址</span>    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">"mint_account: &#123;&#125;"</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">msg!</span><span class="token punctuation">(</span>        <span class="token string">"author_token_account: &#123;&#125;"</span><span class="token punctuation">,</span>        ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>author_token_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mint_to</span><span class="token punctuation">(</span>        <span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new_with_signer</span><span class="token punctuation">(</span>            ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">MintTo</span> <span class="token punctuation">&#123;</span>                mint<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                to<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>author_token_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">b"mint_v3"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>ctx<span class="token punctuation">.</span>bumps<span class="token punctuation">.</span>mint_account<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>关键参数解析：</p><ul><li><p><code>CpiContext::new_with_signer</code>：创建跨程序调用（CPI）上下文，因为铸造代币需要调用 Solana 的 Token 程序（<code>token_program</code>）。</p></li><li><p><code>MintTo</code></p><p>结构体：指定铸造相关的账户：</p><ul><li><code>mint</code>：代币的铸造账户（<code>mint_account</code>），负责生成新代币。</li><li><code>to</code>：接收代币的账户（<code>author_token_account</code>，推文作者的代币账户）。</li><li><code>authority</code>：铸造权限的拥有者（这里是<code>mint_account</code>自身，因为该账户的权限通过种子验证）。</li></ul></li><li><p>签名种子<code>&amp;[&amp;[b&quot;mint_v3&quot;, &amp;[ctx.bumps.mint_account]]]</code>：用于验证<code>mint_account</code>的权限（该账户是通过<code>b&quot;mint_v3&quot;</code>种子和 bump 值创建的，因此需要用相同种子证明有权限铸造代币）。</p></li><li><p>最后一个参数<code>100</code>：指定铸造的代币数量（向作者账户铸造 100 个代币）。</p></li></ul><h3 id="api重新调用这部分代码">api重新调用这部分代码</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 创建推文</span><span class="token keyword">const</span> <span class="token punctuation">[</span>pda<span class="token punctuation">,</span> r3<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createTweet</span><span class="token punctuation">(</span>defaultWallet<span class="token punctuation">,</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> r4 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getTweet</span><span class="token punctuation">(</span>defaultWallet<span class="token punctuation">,</span> pda<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"defaultWallet public key:"</span><span class="token punctuation">,</span> defaultWallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建点赞</span><span class="token keyword">const</span> visitorPublicKey <span class="token operator">=</span> visitorWallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Visitor public key:"</span><span class="token punctuation">,</span> visitorPublicKey<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> r5 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createLike</span><span class="token punctuation">(</span>visitorWallet<span class="token punctuation">,</span> pda<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Like created:"</span><span class="token punctuation">,</span> r5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> r6 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getTweet</span><span class="token punctuation">(</span>defaultWallet<span class="token punctuation">,</span> pda<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r6<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="结果校验">结果校验</h2><pre class="language-bash" data-language="bash"><code class="language-bash">  anchor_social git:<span class="token punctuation">(</span>main<span class="token punctuation">)</span> anchor run api<span class="token function">yarn</span> run v1.22.18warning <span class="token punctuation">..</span>/package.json: No license field$ /Users/tinachan/anchor_social/node_modules/.bin/ts-node app/index.tsdefaultWallet public key: PublicKey <span class="token punctuation">[</span>PublicKey<span class="token punctuation">(</span>FcKkQZRxD5P6JwGv58vGRAcX3CkjbX8oqFiygz6ohceU<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>  _bn: <span class="token operator">&lt;</span>BN: d91024e709f54d65b29c9328658d06a488414c4cabc36522130c33032242876<span class="token operator"><span class="token file-descriptor important">9</span>></span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>  body: <span class="token string">'Hello, world!'</span>,  likeCount: <span class="token operator">&lt;</span>BN: <span class="token operator"><span class="token file-descriptor important">0</span>></span>,  author: PublicKey <span class="token punctuation">[</span>PublicKey<span class="token punctuation">(</span>BiQgNLwkejkdYyvbSSCjKhTsdK6tmn6YZiXhApX88L1q<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    _bn: <span class="token operator">&lt;</span>BN: 9f3074c28783b31efe51bdc42e5a0a6a8c2314d017da6a8ed713ccecd1aee16<span class="token operator"><span class="token file-descriptor important">4</span>></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Visitor public key: 7rQKPb1bPLS4xU93a43GYmBK7MfY3ChSTSVfA8fcxbRFLike created: 59rjviQxEK68USP6VfPjqpciwKNcf98jTUpv7CBWEdFqNbAvh9FBTwH3RCcwviK8Wu92G3WACgwv6rafsWgitWDT<span class="token punctuation">&#123;</span>  body: <span class="token string">'Hello, world!'</span>,  likeCount: <span class="token operator">&lt;</span>BN: <span class="token operator"><span class="token file-descriptor important">1</span>></span>,  author: PublicKey <span class="token punctuation">[</span>PublicKey<span class="token punctuation">(</span>BiQgNLwkejkdYyvbSSCjKhTsdK6tmn6YZiXhApX88L1q<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>    _bn: <span class="token operator">&lt;</span>BN: 9f3074c28783b31efe51bdc42e5a0a6a8c2314d017da6a8ed713ccecd1aee16<span class="token operator"><span class="token file-descriptor important">4</span>></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>✨  Done <span class="token keyword">in</span> <span class="token number">2</span>.45s.</code></pre><p>成功后查看author token account的账户</p><p><img src="https://img.soniachen.com/blog/posts/2025/08/image-20250819222538906.png" alt="image-20250819222538906"></p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part12]_Anchor实战：spl token&amp;mint账户的创建</title>
      <link href="/2025/08/18/Solana-part12-Anchor%E5%AE%9E%E6%88%98%EF%BC%9A/"/>
      <url>/2025/08/18/Solana-part12-Anchor%E5%AE%9E%E6%88%98%EF%BC%9A/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/08/solanapart12.jpg</cover>
      <date>Mon Aug 18 2025 19:25:15 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part12]_Anchor实战：spl token&amp;mint账户的创建</h1><h2 id="一、功能概述">一、功能概述</h2><p><code>createTokenMintAccount</code> 是项目中用于创建代币铸造（Mint）账户及关联元数据账户的核心功能，基于 Solana 区块链和 Anchor 框架实现。其核心目标是：</p><ol><li>通过 Anchor 指令初始化一个由 PDA（程序派生地址）控制的 SPL Token Mint 账户；</li><li>通过 CPI（跨程序调用）调用 Metaplex 元数据程序的 <code>create_metadata_accounts_v3</code> 方法，为 Mint 账户创建元数据（名称、符号、URI 等）。</li></ol><h2 id="二、token-rs-实现细节解析">二、<a href="http://token.rs">token.rs</a> 实现细节解析</h2><h3 id="1-核心函数：create-token-mint-account">1. 核心函数：<code>create_token_mint_account</code></h3><p>该函数是指令的入口，负责初始化 mint 账户并触发元数据账户的 CPI 调用，代码逻辑如下：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_token_mint_account</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">CreateTokenMintAccount</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义 PDA 签名种子（用于 CPI 调用时的签名验证）</span>    <span class="token keyword">let</span> signer_seeds<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">b"mint_v3"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>ctx<span class="token punctuation">.</span>bumps<span class="token punctuation">.</span>mint_account<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// CPI 调用 Metaplex 的 create_metadata_accounts_v3 方法</span>    <span class="token function">create_metadata_accounts_v3</span><span class="token punctuation">(</span>        <span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new_with_signer</span><span class="token punctuation">(</span>            ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>token_metadata_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 元数据程序账户</span>            <span class="token class-name">CreateMetadataAccountsV3</span> <span class="token punctuation">&#123;</span>                metadata<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>meta_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 元数据账户</span>                mint<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// mint 账户</span>                mint_authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// mint 授权者（自身 PDA）</span>                update_authority<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>mint_account<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 元数据更新授权者（自身 PDA）</span>                payer<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 支付者（外部签名者）</span>                system_program<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>system_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 系统程序</span>                rent<span class="token punctuation">:</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>rent<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 租金系统变量</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            signer_seeds<span class="token punctuation">,</span> <span class="token comment">// 传入 PDA 签名种子，确保 CPI 调用权限</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// 元数据内容（DataV2 结构）</span>        <span class="token class-name">DataV2</span> <span class="token punctuation">&#123;</span>            name<span class="token punctuation">:</span> <span class="token string">"tokenchs"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 代币名称</span>            symbol<span class="token punctuation">:</span> <span class="token string">"TKS"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 代币符号</span>            uri<span class="token punctuation">:</span> <span class="token string">"https://example.com/tokenchs"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 元数据 URI（通常指向JSON文件）</span>            seller_fee_basis_points<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 卖家手续费（0表示无）</span>            creators<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span> <span class="token comment">// 创作者信息（可选）</span>            collection<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span> <span class="token comment">// 集合信息（可选）</span>            uses<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span> <span class="token comment">// 用途限制（可选）</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 不创建主售市场</span>        <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 允许第三方转让</span>        <span class="token class-name">None</span><span class="token punctuation">,</span> <span class="token comment">// 无集合授权</span>    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="关键逻辑说明：">关键逻辑说明：</h4><ul><li><strong>PDA 签名种子</strong>：<code>signer_seeds</code> 使用 <code>b&quot;mint_v3&quot;</code> 和 <code>mint_account</code> 的 bump 值生成，用于证明当前程序对 <code>mint_account</code> 的控制权，确保 CPI 调用有权限操作元数据。</li><li><strong>CPI 调用参数</strong>：通过 <code>CreateMetadataAccountsV3</code> 结构体指定元数据账户、mint 账户、授权者等关键账户，其中 <code>mint_authority</code> 和 <code>update_authority</code> 均设为 <code>mint_account</code> 自身（PDA），确保只有 mint 账户的控制程序（当前程序）可修改权限。</li><li><strong>元数据内容</strong>：<code>DataV2</code> 结构体固定了代币 的名称、符号和 URI，实际场景中可改为动态参数传入。</li></ul><h3 id="2-账户结构：CreateTokenMintAccount">2. 账户结构：<code>CreateTokenMintAccount</code></h3><p>该结构体定义了指令所需的所有账户及其约束条件，确保链上账户的安全性和正确性：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">CreateTokenMintAccount</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/// 元数据账户（存储代币 元数据）</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        <span class="token keyword">mut</span><span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">b"metadata"</span><span class="token punctuation">,</span> <span class="token comment">// 固定前缀</span>            token_metadata_program<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 元数据程序地址</span>            mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// mint 账户地址</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span> <span class="token comment">// 自动计算 bump 值</span>        <span class="token namespace">seeds<span class="token punctuation">::</span></span>program <span class="token operator">=</span> token_metadata_program<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 种子校验程序</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> meta_account<span class="token punctuation">:</span> <span class="token class-name">UncheckedAccount</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">/// Mint 账户（代币铸造账户）</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init_if_needed<span class="token punctuation">,</span> <span class="token comment">// 若不存在则初始化</span>        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span> <span class="token comment">// 由 authority 支付租金</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">b"mint_v3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 固定种子（用于生成 PDA）</span>        bump<span class="token punctuation">,</span> <span class="token comment">// 自动计算 bump 值</span>        <span class="token namespace">mint<span class="token punctuation">::</span></span>decimals <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment">// 代币小数位为 100</span>        <span class="token namespace">mint<span class="token punctuation">::</span></span>authority <span class="token operator">=</span> mint_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 授权者为自身 PDA</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> mint_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Mint</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">/// 交易支付者（外部签名者）</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">/// SPL Token 程序（用于处理代币逻辑）</span>    <span class="token keyword">pub</span> token_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Token</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">/// 系统程序（用于创建账户）</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">/// Metaplex 元数据程序（用于创建元数据）</span>    <span class="token keyword">pub</span> token_metadata_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Metadata</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">/// 租金系统变量（用于计算账户存储费用）</span>    <span class="token keyword">pub</span> rent<span class="token punctuation">:</span> <span class="token class-name">Sysvar</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Rent</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h4 id="账户约束说明：">账户约束说明：</h4><ul><li><strong>meta_account</strong>：通过 <code>b&quot;metadata&quot; + 元数据程序地址 + mint 地址</code> 生成种子，确保元数据账户与 mint 账户一一对应，符合 Metaplex 元数据账户的标准生成规则。</li><li><strong>mint_account</strong>：使用 <code>b&quot;mint_v3&quot;</code> 作为种子生成 PDA，<code>init_if_needed</code> 确保重复调用时不会重复创建；<code>mint::authority</code> 设为自身，意味着只有通过该 PDA 签名（即当前程序）才能执行铸造 等操作，增强安全性。</li></ul><h2 id="三、前端测试调用逻辑（app-api-token-ts）">三、前端测试调用逻辑（app/api/token.ts）</h2><p>前端通过 <code>createTokenMintAccount</code> 函数触发链上指令，核心逻辑是生成 mint 账户的 PDA 并发送交易：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createTokenMintAccount</span><span class="token punctuation">(</span>wallet<span class="token operator">:</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 生成 mint 账户的 PDA（与链上种子 b"mint_v3" 对应）</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>splTokenPda<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">=</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddressSync</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"mint_v3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        program<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 发送交易调用链上指令</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>splTokenPda<span class="token punctuation">,</span>        <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">createTokenMintAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 需补充账户参数（当前为空，实际调用需传入以下账户）</span>            <span class="token comment">// authority: wallet.publicKey,</span>            <span class="token comment">// mintAccount: splTokenPda,</span>            <span class="token comment">// tokenMetadataProgram: METADATA_PROGRAM_ID,</span>            <span class="token comment">// ...其他必要账户</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="注意事项：">注意事项：</h4><ul><li>前端需显式传入 <code>accounts</code> 参数，包括 <code>authority</code>、<code>mint_account</code>、<code>token_metadata_program</code> 等，否则会因账户缺失导致交易失败。</li><li>PDA 生成需与链上 <code>mint_account</code> 的种子（<code>b&quot;mint_v3&quot;</code>）保持一致，确保地址匹配。</li></ul><h2 id="四、测试注意事项与踩坑点">四、测试注意事项与踩坑点</h2><h3 id="1-环境配置（必做）">1. 环境配置（必做）</h3><p>使用 <code>create_metadata_accounts_v3</code> CPI 需确保本地测试环境加载 Metaplex 元数据程序：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载元数据程序二进制文件</span>solana program dump <span class="token parameter variable">-u</span> m metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s metadata.so<span class="token comment"># 启动本地测试网并加载程序</span>solana-test-validator <span class="token parameter variable">-r</span> --bpf-program metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s metadata.so</code></pre><ul><li>若未加载，会出现 <code>Program not found</code> 错误，导致 CPI 调用失败。</li></ul><h3 id="2-PDA-签名与权限问题">2. PDA 签名与权限问题</h3><ul><li><strong>问题</strong>：CPI 调用时出现 <code>Signature verification failed</code>，通常因 <code>signer_seeds</code> 与 <code>mint_account</code> 种子不匹配。</li><li><strong>解决</strong>：确保链上 <code>mint_account</code> 的种子（<code>b&quot;mint_v3&quot;</code>）与 <code>signer_seeds</code> 完全一致，且 bump 值正确（通过 <code>ctx.bumps.mint_account</code> 获取）。</li></ul><h3 id="3-账户参数缺失">3. 账户参数缺失</h3><ul><li><strong>问题</strong>：前端调用时未传入 <code>token_metadata_program</code>、<code>system_program</code> 等账户，导致交易因账户验证失败而回滚。</li><li><strong>解决</strong>：补充完整账户参数，示例：<pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">createTokenMintAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    authority<span class="token operator">:</span> wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>    mintAccount<span class="token operator">:</span> splTokenPda<span class="token punctuation">,</span>    metaAccount<span class="token operator">:</span> metaPda<span class="token punctuation">,</span> <span class="token comment">// 需提前计算元数据账户 PDA</span>    tokenProgram<span class="token operator">:</span> <span class="token constant">TOKEN_PROGRAM_ID</span><span class="token punctuation">,</span>    tokenMetadataProgram<span class="token operator">:</span> <span class="token constant">METADATA_PROGRAM_ID</span><span class="token punctuation">,</span>    systemProgram<span class="token operator">:</span> SystemProgram<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>    rent<span class="token operator">:</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span><span class="token constant">SYSVAR_RENT_PUBKEY</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="4-元数据账户空间不足">4. 元数据账户空间不足</h3><ul><li><strong>问题</strong>：元数据字段（如 <code>name</code>、<code>uri</code>）过长导致账户空间不足，交易失败。</li><li><strong>解决</strong>：限制 <code>DataV2</code> 字段长度（如 <code>name</code> 不超过 32 字节），或动态计算所需空间。</li></ul><h2 id="五、测试验证">五、测试验证</h2><ol><li>导出metadata程序</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">solana program dump <span class="token parameter variable">-u</span> m metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s metadata.so</code></pre><ol start="2"><li>启动测试验证器</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">solana-test-validator <span class="token parameter variable">-r</span> --bpf-program metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s metadata.so</code></pre><ol start="3"><li>部署程序</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">anchor build <span class="token operator">&amp;&amp;</span> anchor deploy</code></pre><ol start="4"><li>执行测试</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"> anchor run api  -------------- ➜  anchor_social git:<span class="token punctuation">(</span>main<span class="token punctuation">)</span> ✗ anchor run api               <span class="token function">yarn</span> run v1.22.18warning <span class="token punctuation">..</span>/package.json: No license field$ /Users/tinachan/anchor_social/node_modules/.bin/ts-node app/index.tsDuFS4L7YDYsEnXeyc13g5xTxKYdcpNRvXkbrsp7BmbAW tm2FqnqSAZ5KhT5499ozLUh38RZAZM1BPuSst7A97N4f1WSsE9hZFbvnzuEu569dwrnHiGarJRE5BiuRsQHn4jj</code></pre><ol start="5"><li><a href="https://explorer.solana.com/">https://explorer.solana.com/</a> 查看账户详情</li></ol><p><img src="https://img.soniachen.com/blog/posts/2025/08/image-20250819181523220.png" alt="image-20250819181523220"></p><p><img src="https://img.soniachen.com/blog/posts/2025/08/image-20250819181540179.png" alt="image-20250819181540179"></p><p>可以看到这里就创建了一个有metadata体的token</p><h2 id="SPL-TOKEN-定义">SPL-TOKEN 定义</h2><p><img src="https://img.soniachen.com/blog/posts/2025/08/image-20250819191937435.png" alt="image-20250819191937435"></p><h3 id="Solana-SPL-Token-与其他区块链-Token-的核心区别">Solana SPL Token 与其他区块链 Token 的核心区别</h3><h4 id="1-技术架构：账户模型-vs-智能合约"><strong>1. 技术架构：账户模型 vs 智能合约</strong></h4><table><thead><tr><th><strong>维度</strong></th><th>Solana SPL Token</th><th>ETH ERC20 / BSC BEP20</th></tr></thead><tbody><tr><td><strong>实现方式</strong></td><td>复用 <strong>SPL Token Program</strong> 统一逻辑，无需部署合约</td><td>每个 Token 是独立 <strong>智能合约</strong>（如 ERC20 合约）</td></tr><tr><td><strong>部署成本</strong></td><td>仅需创建 Mint/Token 账户（链上数据存储）</td><td>需部署完整合约（消耗 Gas，代码存储占空间）</td></tr><tr><td><strong>灵活性</strong></td><td>依赖 SPL 标准扩展（如 Token 2022），但逻辑集中</td><td>可自定义合约逻辑（如分红、销毁规则），更灵活</td></tr></tbody></table><h4 id="2-性能与执行效率"><strong>2. 性能与执行效率</strong></h4><ul><li><strong>Solana 优势</strong>：<br>基于 <strong>并行处理（Tower BFT + 流水线）</strong>，SPL Token 操作可并行执行，支持 <strong>10 万 + TPS</strong>（理论值）。<br>例：转账、铸币等操作通过 CPI 调用 Token Program，无需逐个验证合约逻辑。</li><li><strong>ETH/BSC 限制</strong>：<br>交易串行处理（基于 Gas 竞价），ERC20 交易 TPS 仅 <strong>30-300</strong>，且复杂逻辑（如批量转账）会进一步降低效率。</li></ul><h4 id="3-账户模型细节"><strong>3. 账户模型细节</strong></h4><ul><li><strong>SPL Token 的 “账户分离”</strong>：<br>用户的 Token 余额存储在 <strong>独立的 Token Account</strong>（需提前创建，关联 Mint），而非用户钱包本身。<br>例：用户 A 的 USDC 余额 → 一个 Token Account（地址：<code>...</code>，mint: USDC Mint，owner: A）。</li><li><strong>ERC20 的 “合约内映射”</strong>：<br>余额直接记录在 ERC20 合约的 <code>mapping(address =&gt; uint256) balances</code> 中，用户钱包地址本身不存储 Token 数据。</li></ul><h4 id="4-生态与标准扩展"><strong>4. 生态与标准扩展</strong></h4><ul><li><strong>SPL 的统一扩展</strong>：<ul><li>元数据：通过 <strong>Token Metadata Program</strong> 统一管理（名称、URI、符号），与 NFT 标准（如 Metaplex）无缝兼容。</li><li>进阶标准：Token 2022（更灵活的权限控制）、NFT（基于 SPL Token 的变种）。</li></ul></li><li><strong>ERC20 的分散扩展</strong>：<ul><li>元数据需额外协议（如 OpenSea 的 Metadata 标准），各扩展标准（ERC721、ERC1155）需独立开发，兼容性依赖开发者实现。</li></ul></li></ul><h4 id="5-跨程序调用（CPI）-vs-合约调用"><strong>5. 跨程序调用（CPI） vs 合约调用</strong></h4><ul><li><strong>Solana CPI</strong>：<br>类似 “函数调用”，支持 <strong>嵌套跨程序调用</strong>（如 Token Metadata Program 调用 Token Program 获取 Mint 信息），逻辑更高效。</li><li><strong>ETH 合约调用</strong>：<br>通过 <code>call</code> 指令调用其他合约，嵌套深度受限（避免栈溢出），复杂交互成本高。</li></ul><h2 id="总结">总结</h2><p><code>createTokenMintAccount</code> 功能通过 Anchor 框架整合了 SPL Token 和 Metaplex 元数据程序，核心逻辑集中在 <code>token.rs</code> 中：</p><ol><li>定义 PDA 控制的 mint 账户，确保权限安全；</li><li>通过 CPI 调用生成关联的元数据账户，固定代币元数据内容；</li><li>前端需正确生成 PDA 并传入完整账户参数才能触发交易。</li></ol><p>测试时需重点关注环境配置、PDA 种子一致性和账户参数完整性，避免因链上程序依赖或权限问题导致失败。</p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part11]_Anchor实战：用户发帖&amp;点赞</title>
      <link href="/2025/08/17/Solana-part11-Anchor%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E6%88%B7%E5%8F%91%E5%B8%96-%E7%82%B9%E8%B5%9E/"/>
      <url>/2025/08/17/Solana-part11-Anchor%E5%AE%9E%E6%88%98%EF%BC%9A%E7%94%A8%E6%88%B7%E5%8F%91%E5%B8%96-%E7%82%B9%E8%B5%9E/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=1de97e5f-0271-2ecf-e471-fbb6fad761ec</cover>
      <date>Sun Aug 17 2025 10:16:10 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part11]_Anchor实战：用户发帖&amp;点赞</h1><h2 id="发帖功能（createTweet）">发帖功能（createTweet）</h2><h3 id="1-核心数据结构">1. 核心数据结构</h3><p>发帖功能的核心数据结构为<code>Tweet</code>，定义在<code>programs/anchor_social/src/state/tweet.rs</code>中，用于存储帖子内容及点赞数：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// programs/anchor_social/src/state/tweet.rs</span><span class="token keyword">use</span> <span class="token namespace">anchor_lang<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[account]</span><span class="token attribute attr-name">#[derive(InitSpace)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Tweet</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[max_len(50)]</span>  <span class="token comment">// 限制帖子内容最大长度为50字符</span>    <span class="token keyword">pub</span> body<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>  <span class="token comment">// 帖子内容</span>    <span class="token keyword">pub</span> like_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>  <span class="token comment">// 点赞数，初始为0</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Tweet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">SEED_PREFIX</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"tweet"</span><span class="token punctuation">;</span>  <span class="token comment">// PDA种子前缀</span>    <span class="token comment">// 初始化新帖子</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>body<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            body<span class="token punctuation">,</span>            like_count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-前端API实现（创建帖子）">2. 前端API实现（创建帖子）</h3><p>前端通过<code>app/api/tweet.ts</code>中的<code>createTweet</code>函数发起创建帖子的交易，核心逻辑包括生成帖子PDA、调用链上程序：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// app/api/tweet.ts</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> anchor <span class="token keyword">from</span> <span class="token string">"@coral-xyz/anchor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> program <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./wallet"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createTweet</span><span class="token punctuation">(</span>    wallet<span class="token operator">:</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">,</span>    body<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">[</span>anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>PublicKey<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 生成用户Profile的PDA（用于关联帖子所属用户）</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>profilePda<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">=</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddressSync</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"profile"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 种子："profile" + 用户公钥</span>        program<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 获取用户Profile数据（需先创建Profile）</span>    <span class="token keyword">const</span> profile <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>account<span class="token punctuation">.</span>profile<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>profilePda<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 生成帖子的PDA（唯一标识帖子）</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>tweetPda<span class="token punctuation">]</span> <span class="token operator">=</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddressSync</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>            Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"tweet"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 种子1：固定前缀"tweet"</span>            profilePda<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 种子2：用户Profile的PDA（关联用户）</span>            Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">(</span>profile<span class="token punctuation">.</span>tweet_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 种子3：用户的第N+1条帖子（确保唯一性）</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        program<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. 调用链上程序创建帖子，返回帖子PDA和交易签名</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>        tweetPda<span class="token punctuation">,</span>        <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">createTweet</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                authority<span class="token operator">:</span> wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>  <span class="token comment">// 交易发起者（帖子作者）</span>                tweet<span class="token operator">:</span> tweetPda<span class="token punctuation">,</span>  <span class="token comment">// 帖子账户（新建）</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 发送交易</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-后端程序逻辑（创建帖子）">3. 后端程序逻辑（创建帖子）</h3><p>链上程序逻辑定义在<code>programs/anchor_social/src/instructions/tweet.rs</code>中，负责初始化帖子账户、更新用户发帖数：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// programs/anchor_social/src/instructions/tweet.rs</span><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>state<span class="token punctuation">::</span>profile<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>state<span class="token punctuation">::</span>tweet<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">anchor_lang<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// 处理创建帖子的核心逻辑</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_tweet</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">CreateTweet</span><span class="token operator">></span><span class="token punctuation">,</span> body<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 更新用户Profile的发帖数（+1）</span>    <span class="token keyword">let</span> profile <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>profile<span class="token punctuation">;</span>    profile<span class="token punctuation">.</span>tweet_count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 初始化帖子数据</span>    <span class="token keyword">let</span> tweet <span class="token operator">=</span> <span class="token class-name">Tweet</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将帖子数据写入账户（set_inner用于更新Anchor账户的内部数据）</span>    ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>tweet<span class="token punctuation">.</span><span class="token function">set_inner</span><span class="token punctuation">(</span>tweet<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义创建帖子所需的账户结构</span><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">CreateTweet</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 帖子账户（新建）</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init<span class="token punctuation">,</span>  <span class="token comment">// 初始化新账户</span>        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>  <span class="token comment">// 由authority支付账户创建费用</span>        space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token class-name">Tweet</span><span class="token punctuation">::</span><span class="token constant">INIT_SPACE</span><span class="token punctuation">,</span>  <span class="token comment">// 分配存储空间（8字节为Anchor账户前缀）</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment">// PDA种子（需与前端生成逻辑一致）</span>            <span class="token class-name">Tweet</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// "tweet"</span>            profile<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 用户Profile的PDA</span>            <span class="token punctuation">(</span>profile<span class="token punctuation">.</span>tweet_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 第N+1条帖子</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        bump  <span class="token comment">// 自动计算PDA的bump值</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> tweet<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Tweet</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// 用户Profile账户（需已存在，用于记录发帖数）</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span><span class="token keyword">mut</span><span class="token punctuation">,</span> seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Profile</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authority<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bump<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> profile<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Profile</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// 交易发起者（帖子作者，签名者）</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// Solana系统程序（用于创建新账户）</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-关键技术点解析">4. 关键技术点解析</h3><ul><li><strong>PDA（Program Derived Address）设计</strong>：帖子的PDA由<code>&quot;tweet&quot; + 用户Profile的PDA + 帖子序号</code>组成，确保每个用户的每条帖子有唯一标识，且可通过种子逆向推导。</li><li><strong>状态更新依赖</strong>：创建帖子时必须先存在用户Profile（用于记录<code> tweet_count</code>），否则会因无法获取Profile数据而失败。</li><li><strong>存储空间分配</strong>：<code>space = 8 + Tweet::INIT_SPACE</code>中，<code>8字节</code>是Anchor账户的固定前缀（用于存储账户 discriminator），<code>Tweet::INIT_SPACE</code>由<code>#[derive(InitSpace)]</code>自动计算（包含<code>body</code>和<code>like_count</code>的空间）。</li></ul><h2 id="点赞功能（CreateLike）">点赞功能（CreateLike）</h2><h3 id="1-核心数据结构-2">1. 核心数据结构</h3><p>点赞功能涉及两个核心数据结构：<code>Like</code>（存储点赞关系）和<code>Tweet</code>（记录点赞数）。<code>Like</code>定义在<code>programs/anchor_social/src/state/like.rs</code>中：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// programs/anchor_social/src/state/like.rs</span><span class="token keyword">use</span> <span class="token namespace">anchor_lang<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[account]</span><span class="token attribute attr-name">#[derive(InitSpace)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Like</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> profile_pubkey<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>  <span class="token comment">// 点赞用户的公钥</span>    <span class="token keyword">pub</span> tweet_pubkey<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>  <span class="token comment">// 被点赞帖子的公钥</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Like</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">SEED_PREFIX</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"like"</span><span class="token punctuation">;</span>  <span class="token comment">// PDA种子前缀</span>    <span class="token comment">// 初始化新点赞</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>profile_pubkey<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span> tweet_pubkey<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>            profile_pubkey<span class="token punctuation">,</span>            tweet_pubkey<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-前端API实现（创建点赞）">2. 前端API实现（创建点赞）</h3><p>前端通过<code>app/api/tweet.ts</code>中的<code>createLike</code>函数发起点赞交易：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// app/api/tweet.ts</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createLike</span><span class="token punctuation">(</span>    wallet<span class="token operator">:</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">,</span>    tweetPdas<span class="token operator">:</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>PublicKey  <span class="token comment">// 被点赞帖子的PDA</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用链上程序创建点赞，返回交易签名</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">createLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            tweet<span class="token operator">:</span> tweetPdas<span class="token punctuation">,</span>  <span class="token comment">// 被点赞的帖子账户</span>            authority<span class="token operator">:</span> wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>  <span class="token comment">// 点赞用户</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">signers</span><span class="token punctuation">(</span><span class="token punctuation">[</span>wallet<span class="token punctuation">.</span>payer<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 签名者（点赞用户）</span>        <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-后端程序逻辑（创建点赞）">3. 后端程序逻辑（创建点赞）</h3><p>链上程序逻辑定义在<code>programs/anchor_social/src/instructions/tweet.rs</code>中，负责创建点赞记录、更新帖子点赞数：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// programs/anchor_social/src/instructions/tweet.rs</span><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>state<span class="token punctuation">::</span>like<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>state<span class="token punctuation">::</span>tweet<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">anchor_lang<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// 处理创建点赞的核心逻辑</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_like</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">CreateLike</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 更新帖子的点赞数（+1）</span>    <span class="token keyword">let</span> tweet <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>tweet<span class="token punctuation">;</span>    tweet<span class="token punctuation">.</span>like_count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 初始化点赞记录（关联点赞用户和帖子）</span>    <span class="token keyword">let</span> like <span class="token operator">=</span> <span class="token class-name">Like</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>authority<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tweet<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将点赞数据写入账户</span>    ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>like<span class="token punctuation">.</span><span class="token function">set_inner</span><span class="token punctuation">(</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义创建点赞所需的账户结构</span><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">CreateLike</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 点赞记录账户（新建）</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init<span class="token punctuation">,</span>  <span class="token comment">// 初始化新账户</span>        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>  <span class="token comment">// 由点赞用户支付费用</span>        space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token class-name">Like</span><span class="token punctuation">::</span><span class="token constant">INIT_SPACE</span><span class="token punctuation">,</span>  <span class="token comment">// 分配存储空间</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment">// PDA种子（确保唯一：同一用户对同一帖子只能点赞一次）</span>            <span class="token class-name">Like</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// "like"</span>            profile<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 点赞用户的Profile PDA</span>            tweet<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 被点赞帖子的PDA</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        bump    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> like<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Like</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// 被点赞的帖子账户（需已存在，更新点赞数）</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> tweet<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Tweet</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// 点赞用户的Profile账户（验证用户身份）</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span><span class="token keyword">mut</span><span class="token punctuation">,</span> seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Profile</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authority<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bump<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> profile<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Profile</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// 点赞用户（签名者）</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// 系统程序（用于创建点赞账户）</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h3 id="4-关键技术点解析-2">4. 关键技术点解析</h3><ul><li><strong>点赞唯一性保障</strong>：点赞记录的PDA由<code>&quot;like&quot; + 点赞用户Profile PDA + 帖子PDA</code>组成，确保同一用户对同一帖子只能创建一条点赞记录（重复创建会因PDA已存在而失败）。</li><li><strong>状态联动更新</strong>：点赞时同时更新两个状态：<code>tweet.like_count</code>（帖子的点赞数+1）和<code>Like</code>账户（存储点赞关系）。</li><li><strong>依赖验证</strong>：点赞操作依赖三个前提：帖子账户已存在、点赞用户的Profile账户已存在，否则会因账户不存在而失败。</li></ul><h2 id="使用示例">使用示例</h2><p>以下是<code>app/index.ts</code>中发帖和点赞的调用示例，展示完整流程：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// app/index.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useDefaultWallet<span class="token punctuation">,</span> useVisitorWallet <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./api/wallet"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createTweet<span class="token punctuation">,</span> getTweet<span class="token punctuation">,</span> createLike <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./api/tweet"</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> defaultWallet <span class="token operator">=</span> <span class="token function">useDefaultWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 发帖用户钱包</span>    <span class="token keyword">const</span> visitorWallet <span class="token operator">=</span> <span class="token function">useVisitorWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 点赞用户钱包</span>    <span class="token comment">// 1. 创建帖子</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>tweetPda<span class="token punctuation">,</span> createTweetTx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createTweet</span><span class="token punctuation">(</span>defaultWallet<span class="token punctuation">,</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"帖子创建成功，PDA："</span><span class="token punctuation">,</span> tweetPda<span class="token punctuation">.</span><span class="token function">toBase58</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"交易签名："</span><span class="token punctuation">,</span> createTweetTx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 获取帖子详情（验证创建结果）</span>    <span class="token keyword">const</span> tweet <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getTweet</span><span class="token punctuation">(</span>defaultWallet<span class="token punctuation">,</span> tweetPda<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"帖子初始信息："</span><span class="token punctuation">,</span> tweet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// like_count应为0</span>    <span class="token comment">// 3. 对帖子点赞</span>    <span class="token keyword">const</span> createLikeTx <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createLike</span><span class="token punctuation">(</span>visitorWallet<span class="token punctuation">,</span> tweetPda<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点赞成功，交易签名："</span><span class="token punctuation">,</span> createLikeTx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. 再次获取帖子详情（验证点赞数更新）</span>    <span class="token keyword">const</span> updatedTweet <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getTweet</span><span class="token punctuation">(</span>defaultWallet<span class="token punctuation">,</span> tweetPda<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点赞后帖子信息："</span><span class="token punctuation">,</span> updatedTweet<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// like_count应为1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="总结">总结</h2><p>发帖和点赞功能通过Anchor框架实现了Solana区块链上的状态管理：</p><ul><li>发帖功能通过PDA关联用户与帖子，确保唯一性并记录发帖数；</li><li>点赞功能通过PDA保障唯一点赞，并联动更新帖子的点赞数；</li><li>核心依赖Profile账户作为用户身份标识，所有操作均需验证账户存在性。</li></ul><p>理解上述逻辑有助于掌握Solana上的PDA设计、账户交互及状态更新模式。</p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part10]_Anchor实战：创建用户profile</title>
      <link href="/2025/08/14/Solana-part10-anchor%E5%AE%9E%E6%88%981/"/>
      <url>/2025/08/14/Solana-part10-anchor%E5%AE%9E%E6%88%981/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=47e4849b-ec64-5581-00e4-577c9ce8ee40</cover>
      <date>Thu Aug 14 2025 08:54:05 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part10]_Anchor实战：创建用户profile</h1><h2 id="一、项目架构概览">一、项目架构概览</h2><h3 id="1-1-整体架构">1.1 整体架构</h3><pre class="language-none"><code class="language-none">anchor_social&#x2F;├── programs&#x2F;               # Solana 智能合约源代码│   └── anchor_social&#x2F;      # 核心合约模块│       ├── src&#x2F;              # Rust 源代码│       │   ├── lib.rs        # 程序入口和指令路由│       │   ├── instructions&#x2F; # 指令处理逻辑│       │   └── state&#x2F;        # 链上状态定义│       └── Cargo.toml        # Rust 项目配置├── app&#x2F;                    # 前端交互代码│   ├── api&#x2F;                  # API 接口模块│   │   ├── wallet.ts         # 钱包管理│   │   └── profile.ts        # 用户资料接口│   └── index.ts            # 主程序入口├── tests&#x2F;                  # 测试模块├── migrations&#x2F;             # 合约部署脚本├── Anchor.toml             # Anchor 项目配置├── package.json            # 前端依赖配置└── tsconfig.json           # TypeScript 配置</code></pre><h3 id="1-2-技术栈">1.2 技术栈</h3><ul><li><strong>区块链平台</strong>: Solana</li><li><strong>开发框架</strong>: Anchor v0.31.1</li><li><strong>智能合约语言</strong>: Rust</li><li><strong>前端交互</strong>: TypeScript</li><li><strong>依赖管理</strong>:<ul><li>前端: yarn</li><li>合约: Cargo</li></ul></li></ul><h2 id="二、核心模块详解">二、核心模块详解</h2><h3 id="2-1-智能合约模块-programs-anchor-social">2.1 智能合约模块 (programs/anchor_social)</h3><h4 id="2-1-1-程序入口-lib-rs">2.1.1 程序入口 (<a href="http://lib.rs">lib.rs</a>)</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">declare_id!</span><span class="token punctuation">(</span><span class="token string">"35vQtxXXv5rb99eiVrVVrwYMRYc7vscZvXas8zjEnnK5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">instructions</span><span class="token punctuation">;</span><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">state</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">instructions<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[program]</span><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">anchor_social</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_profile</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">CreateProfile</span><span class="token operator">></span><span class="token punctuation">,</span> display_name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token namespace">instructions<span class="token punctuation">::</span>profile<span class="token punctuation">::</span></span><span class="token function">create_profile</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> display_name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><code>declare_id!</code>: 定义程序地址</li><li><code>#[program]</code>: Anchor 宏标记程序入口</li><li>指令路由: 将 create_profile 指令路由到 instructions 模块</li></ul><h4 id="2-1-2-指令处理-instructions-profile-rs">2.1.2 指令处理 (instructions/profile.rs)</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">create_profile</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">CreateProfile</span><span class="token operator">></span><span class="token punctuation">,</span> display_name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>display_name <span class="token operator">=</span> display_name<span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">CreateProfile</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>init<span class="token punctuation">,</span> payer <span class="token operator">=</span> user<span class="token punctuation">,</span> space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token class-name">Profile</span><span class="token punctuation">::</span><span class="token constant">INIT_SPACE</span><span class="token punctuation">,</span> seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Profile</span><span class="token punctuation">::</span><span class="token constant">SEED_PREFIX</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bump<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> profile<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Profile</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> user<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><ul><li><strong>业务逻辑</strong>: 简单设置显示名称</li><li><strong>账户约束</strong>:<ul><li><code>init</code>: 创建新账户</li><li><code>payer = user</code>: 指定支付账户</li><li><code>seeds</code>: PDA 计算种子</li><li><code>mut</code>: 表示可变账户</li></ul></li></ul><h4 id="2-1-3-状态定义-state-profile-rs">2.1.3 状态定义 (state/profile.rs)</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[account]</span><span class="token attribute attr-name">#[derive(InitSpace)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Profile</span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[max_len(20)]</span>    <span class="token keyword">pub</span> display_name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Profile</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token constant">SEED_PREFIX</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"profile"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><code>#[account]</code>: 标记为链上账户结构</li><li><code>#[derive(InitSpace)]</code>: 自动生成空间计算代码</li><li><code>#[max_len(20)]</code>: 字符串长度限制</li></ul><h3 id="2-2-前端交互模块-app">2.2 前端交互模块 (app/)</h3><h4 id="2-2-1-钱包管理-api-wallet-ts">2.2.1 钱包管理 (api/wallet.ts)</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 默认钱包</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useDefaultWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 访客钱包</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useVisitorWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> keypair <span class="token operator">=</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>Keypair<span class="token punctuation">.</span><span class="token function">fromSecretKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">anchor</span><span class="token punctuation">.</span><span class="token function">Wallet</span><span class="token punctuation">(</span>keypair<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><strong>钱包类型</strong>:<ul><li><code>local()</code>: 使用本地环境变量钱包</li><li><code>Keypair</code>: 通过私钥创建密钥对</li><li><code>Wallet</code>: 包装签名功能</li></ul></li><li><strong>重要约束</strong>:<ul><li>需要 payer 属性进行交易签名</li><li>必须处理异步签名操作</li></ul></li></ul><h4 id="2-2-2-用户资料接口-api-profile-ts">2.2.2 用户资料接口 (api/profile.ts)</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createProfile</span><span class="token punctuation">(</span>wallet<span class="token operator">:</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">,</span> displayName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">createProfile</span><span class="token punctuation">(</span>displayName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        user<span class="token operator">:</span> wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">signers</span><span class="token punctuation">(</span><span class="token punctuation">[</span>wallet<span class="token punctuation">.</span>payer<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 必须显式传递签名者</span>    <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getProfile</span><span class="token punctuation">(</span>wallet<span class="token operator">:</span> anchor<span class="token punctuation">.</span>Wallet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>profilePda<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">=</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddressSync</span><span class="token punctuation">(</span>        <span class="token punctuation">[</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"profile"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        program<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>account<span class="token punctuation">.</span>profile<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>profilePda<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><strong>交易构建</strong>:<ul><li><code>accounts</code>: 绑定账户参数</li><li><code>signers</code>: 指定额外签名者</li><li><code>rpc()</code>: 发送交易</li></ul></li><li><strong>PDA 计算</strong>:<ul><li>使用种子生成确定性账户地址</li><li>保证账户地址一致性</li></ul></li></ul><h4 id="2-2-3-主程序入口-index-ts">2.2.3 主程序入口 (index.ts)</h4><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> defaultWallet <span class="token operator">=</span> <span class="token function">useDefaultWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> visitorWallet <span class="token operator">=</span> <span class="token function">useVisitorWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建用户资料</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> <span class="token function">createProfile</span><span class="token punctuation">(</span>defaultWallet<span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">createProfile</span><span class="token punctuation">(</span>visitorWallet<span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"创建资料失败:"</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取用户资料</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"默认钱包资料:"</span><span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">getProfile</span><span class="token punctuation">(</span>defaultWallet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"访客钱包资料:"</span><span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">getProfile</span><span class="token punctuation">(</span>visitorWallet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"获取资料失败:"</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><strong>异步处理</strong>: 使用 try-catch 捕获异常</li><li><strong>流程控制</strong>: 分离创建和查询操作</li><li><strong>日志记录</strong>: 详细输出执行结果</li></ul><h2 id="三、关键实现细节">三、关键实现细节</h2><h3 id="3-1-钱包签名机制">3.1 钱包签名机制</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">NodeWallet</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>payer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>payer <span class="token operator">=</span> payer<span class="token punctuation">;</span>  <span class="token comment">// Keypair 实例</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">async</span> <span class="token function">signTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVersionedTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tx<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>payer<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 版本化交易</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            tx<span class="token punctuation">.</span><span class="token function">partialSign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>payer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 传统交易</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> tx<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><strong>签名流程</strong>:<ol><li>检测交易版本</li><li>根据版本选择签名方式</li><li>返回签名后的交易</li></ol></li></ul><h3 id="3-2-PDA-账户生成">3.2 PDA 账户生成</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">[</span>profilePda<span class="token punctuation">,</span> bump<span class="token punctuation">]</span> <span class="token operator">=</span> PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddressSync</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"profile"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    program<span class="token punctuation">.</span>programId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><strong>生成规则</strong>:<ol><li>种子由常量和用户地址组成</li><li>使用程序ID作为程序标识</li><li>确保地址唯一性和可预测性</li></ol></li></ul><h3 id="3-3-交易错误处理">3.3 交易错误处理</h3><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">createProfile</span><span class="token punctuation">(</span>wallet<span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"错误详情:"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        message<span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span>        logs<span class="token operator">:</span> error<span class="token punctuation">.</span>logs<span class="token punctuation">,</span>  <span class="token comment">// 包含链上日志</span>        errorCode<span class="token operator">:</span> error<span class="token punctuation">.</span>errorCode    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><strong>错误分析要点</strong>:<ul><li>查看完整日志堆栈</li><li>检查链上返回码</li><li>验证账户状态</li></ul></li></ul><h2 id="四、常见问题及解决方案">四、常见问题及解决方案</h2><h3 id="4-1-类型错误-TS2345">4.1 类型错误 (TS2345)</h3><p><strong>错误信息</strong>:</p><pre class="language-none"><code class="language-none">Argument of type &#39;Keypair&#39; is not assignable to parameter of type &#39;Wallet&#39;</code></pre><p><strong>解决方案</strong>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 错误方式</span><span class="token keyword">return</span> Keypair<span class="token punctuation">.</span><span class="token function">fromSecretKey</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">// 正确方式</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">anchor</span><span class="token punctuation">.</span><span class="token function">Wallet</span><span class="token punctuation">(</span>Keypair<span class="token punctuation">.</span><span class="token function">fromSecretKey</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="4-2-账户不存在错误">4.2 账户不存在错误</h3><p><strong>错误信息</strong>:</p><pre class="language-none"><code class="language-none">Account does not exist or has no data</code></pre><p><strong>解决方案</strong>:</p><ol><li>验证钱包地址:</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">solana address <span class="token parameter variable">-k</span> ~/.config/solana/t3.json</code></pre><ol start="2"><li>空投 SOL:</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">solana airdrop <span class="token number">1</span> <span class="token operator">&lt;</span>WALLET_ADDRESS<span class="token operator">></span></code></pre><ol start="3"><li>确认 PDA 计算正确性:</li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"预期PDA:"</span><span class="token punctuation">,</span> profilePda<span class="token punctuation">.</span><span class="token function">toBase58</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="4-3-交易签名错误">4.3 交易签名错误</h3><p><strong>错误信息</strong>:</p><pre class="language-none"><code class="language-none">Transfer: &#96;from&#96; must not carry data</code></pre><p><strong>解决方案</strong>:</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 确保正确传递签名者</span><span class="token punctuation">.</span><span class="token function">signers</span><span class="token punctuation">(</span><span class="token punctuation">[</span>wallet<span class="token punctuation">.</span>payer<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h2 id="五、开发最佳实践">五、开发最佳实践</h2><ol><li><p><strong>模块化开发</strong>:</p><ul><li>将指令和状态分离到不同文件</li><li>使用 pub(crate) 控制可见性</li></ul></li><li><p><strong>错误处理</strong>:</p><ul><li>使用 anyhow 或 thiserror 简化错误处理</li><li>添加详细的日志记录</li></ul></li><li><p><strong>测试策略</strong>:</p><ul><li>单元测试: 使用 anchor 的测试框架</li><li>集成测试: 使用本地网络测试完整流程</li><li>边界测试: 验证输入长度限制</li></ul></li><li><p><strong>安全性建议</strong>:</p><ul><li>避免硬编码密钥</li><li>使用 Anchor 的账户约束</li><li>验证所有输入参数</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part9]_Anchor入门&amp;账户的概念和用法</title>
      <link href="/2025/08/13/Solana-part9-Anchor%E5%85%A5%E9%97%A8-%E8%B4%A6%E6%88%B7%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%94%A8%E6%B3%95-1/"/>
      <url>/2025/08/13/Solana-part9-Anchor%E5%85%A5%E9%97%A8-%E8%B4%A6%E6%88%B7%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E7%94%A8%E6%B3%95-1/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=4e438e8a-377f-e706-8384-3b69233bb7eb</cover>
      <date>Wed Aug 13 2025 11:12:49 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part9]_Anchor入门&amp;账户的概念和用法</h1><h4 id="一、Anchor框架概述">一、Anchor框架概述</h4><p>Anchor是Solana区块链生态中用于简化智能合约开发的核心框架，其核心优势在于将复杂的账户验证逻辑与业务逻辑分离，通过声明式语法降低开发门槛。Anchor提供了以下核心功能：</p><ol><li><strong>账户验证</strong>：通过<code>#[account]</code>宏定义账户结构，自动验证账户状态</li><li><strong>指令分离</strong>：将交易逻辑拆分为独立的指令处理函数</li><li><strong>PDA管理</strong>：内置对Program Derived Addresses（PDA）的支持</li><li><strong>错误处理</strong>：自定义错误类型及友好的错误提示</li></ol><p><strong>安装与配置</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装Anchor CLI</span><span class="token function">cargo</span> <span class="token function">install</span> <span class="token parameter variable">--git</span> https://github.com/coral-xyz/anchor anchor-cli <span class="token parameter variable">--locked</span><span class="token comment"># 初始化项目</span>anchor init my_project<span class="token builtin class-name">cd</span> my_project</code></pre><h4 id="二、PDA（Program-Derived-Address）核心概念">二、PDA（Program Derived Address）核心概念</h4><p>PDA是Solana中一种特殊的账户地址，其生成基于特定的种子（seeds）和程序ID（Program ID）。与普通账户的区别在于：</p><ul><li><strong>无私钥控制</strong>：PDA地址无法通过私钥签名，只能由关联程序操作</li><li><strong>确定性生成</strong>：相同种子和程序ID生成的PDA地址唯一</li><li><strong>安全存储</strong>：用于存储程序专属数据，防止外部篡改</li></ul><p><strong>PDA生成公式</strong></p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">anchor_lang<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">derive_pda</span><span class="token punctuation">(</span>seeds<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> program_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Pubkey</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token punctuation">(</span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">find_program_address</span><span class="token punctuation">(</span>seeds<span class="token punctuation">,</span> program_id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="三、Anchor中使用PDA的典型场景">三、Anchor中使用PDA的典型场景</h4><ol><li><strong>哈希表结构</strong>：通过种子组合实现键值对存储</li><li><strong>权限控制</strong>：作为程序专属签名者</li><li><strong>状态隔离</strong>：不同业务逻辑使用独立PDA账户</li></ol><p><strong>示例：创建PDA账户</strong></p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">anchor_lang<span class="token punctuation">::</span>solana_program<span class="token punctuation">::</span></span>system_program<span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">CreatePdaAccount</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> user<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init<span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">b"user_stats"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>        payer <span class="token operator">=</span> user<span class="token punctuation">,</span>        space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">UserStats</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        program <span class="token operator">=</span> <span class="token namespace">my_program<span class="token punctuation">::</span></span><span class="token constant">ID</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> user_stats<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">UserStats</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Default, AnchorSerialize, AnchorDeserialize)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">UserStats</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> level<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h4 id="四、PDA账户操作详解">四、PDA账户操作详解</h4><ol><li><strong>初始化账户</strong><br>通过<code>init</code>约束自动创建PDA账户并分配存储空间：</li></ol><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">InitPda</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>        init<span class="token punctuation">,</span>        seeds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">b"pda"</span><span class="token punctuation">,</span> authority<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        bump<span class="token punctuation">,</span>        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>        space <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">,</span>        program <span class="token operator">=</span> <span class="token namespace">my_program<span class="token punctuation">::</span></span><span class="token constant">ID</span>    <span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">pub</span> pda_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">PdaData</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li><strong>重新分配空间</strong><br>使用<code>realloc</code>约束动态调整账户存储：</li></ol><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">ReallocPda</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[account(        mut,        realloc,        realloc::payer = authority,        realloc::zero = false,    )]</span>    <span class="token keyword">pub</span> pda_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">PdaData</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li><strong>关闭账户</strong><br>通过<code>close</code>约束释放账户资源：</li></ol><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">ClosePda</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[account(        mut,        close = authority,    )]</span>    <span class="token keyword">pub</span> pda_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">PdaData</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h4 id="五、PDA安全最佳实践">五、PDA安全最佳实践</h4><ol><li><strong>种子设计原则</strong></li></ol><ul><li>避免使用可变参数作为主种子</li><li>关键业务使用复合种子（如<code>[b&quot;order&quot;, order_id.as_ref(), user.key().as_ref()]</code>）</li><li>敏感操作添加时间戳或随机数种子</li></ul><ol start="2"><li><strong>Bump值管理</strong></li></ol><ul><li>使用<code>canonical bump</code>（默认255）简化开发</li><li>复杂场景可自定义bump值验证</li><li>通过<code>Pubkey::find_program_address</code>预计算地址</li></ul><ol start="3"><li><strong>权限控制</strong></li></ol><ul><li>限制PDA操作权限到特定指令</li><li>使用<code>#[access_control]</code>宏实现细粒度访问控制</li></ul><h4 id="六、典型应用案例">六、典型应用案例</h4><ol><li><strong>跨链资产托管</strong></li></ol><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 生成托管PDA地址</span><span class="token keyword">let</span> <span class="token punctuation">(</span>escrow_pda<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">find_program_address</span><span class="token punctuation">(</span>    <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">b"escrow"</span><span class="token punctuation">,</span> token_mint<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buyer<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> seller<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    program_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 托管资金转移</span><span class="token function">transfer</span><span class="token punctuation">(</span>    <span class="token class-name">CpiContext</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>        token_program<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Transfer</span> <span class="token punctuation">&#123;</span>            from<span class="token punctuation">:</span> user_wallet<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            to<span class="token punctuation">:</span> escrow_pda<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            authority<span class="token punctuation">:</span> user_wallet<span class="token punctuation">.</span><span class="token function">to_account_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    amount<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li><strong>可验证随机数生成</strong></li></ol><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 生成随机数PDA</span><span class="token keyword">let</span> <span class="token punctuation">(</span>random_pda<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">find_program_address</span><span class="token punctuation">(</span>    <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">b"random"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> blockhash<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    program_id<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 存储随机数结果</span>random_pda_account<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">calculate_hash</span><span class="token punctuation">(</span>random_seed<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="七、开发工具链支持">七、开发工具链支持</h4><ol><li><strong>Anchor IDL生成</strong></li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">anchor idl generate</code></pre><ol start="2"><li><strong>客户端SDK集成</strong></li></ol><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Program<span class="token punctuation">,</span> web3 <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@project-serum/anchor'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> MyProgram <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../target/types/my_program'</span><span class="token punctuation">;</span><span class="token keyword">const</span> program <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Program<span class="token operator">&lt;</span>MyProgram<span class="token operator">></span></span><span class="token punctuation">(</span>    idl<span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">web3</span><span class="token punctuation">.</span><span class="token function">PublicKey</span><span class="token punctuation">(</span><span class="token string">'PROGRAM_ID'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    provider<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 计算PDA地址</span><span class="token keyword">const</span> <span class="token punctuation">[</span>pdaAddress<span class="token punctuation">,</span> bump<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> web3<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddress</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'user_stats'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>publicKey<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    program<span class="token punctuation">.</span>programId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="八、常见问题与解决方案">八、常见问题与解决方案</h4><ol><li><strong>PDA地址不匹配</strong></li></ol><ul><li>检查种子顺序及编码格式</li><li>确认程序ID是否正确</li><li>使用<code>solana address -k ~/.config/solana/id.json</code>验证地址生成</li></ul><ol start="2"><li><strong>账户空间不足</strong></li></ol><ul><li>预计算所需存储空间（<code>8字节系统开销 + 数据结构大小</code>）</li><li>使用<code>realloc</code>动态调整空间</li><li>避免频繁创建销毁账户</li></ul><ol start="3"><li><strong>签名权限问题</strong></li></ol><ul><li>确保PDA操作指令包含正确的授权账户</li><li>检查<code>#[account]</code>宏中的<code>signer</code>约束</li><li>使用<code>invoke_signed</code>进行PDA签名模拟</li></ul><h4 id="九、延伸学习资源">九、延伸学习资源</h4><ol><li><strong>官方文档</strong></li></ol><ul><li><a href="https://book.anchor-lang.com/">Anchor Book</a></li><li><a href="https://docs.solana.com/developing/programming-model/accounts#program-derived-addresses-pdas">Solana PDA指南</a></li></ul><ol start="2"><li><strong>实战项目</strong></li></ol><ul><li><a href="https://github.com/coral-xyz/anchor/tree/master/examples">Anchor示例仓库</a></li><li><a href="https://solanacookbook.com/references/pdas.html">Solana Cookbook PDA章节</a></li></ul><ol start="3"><li><strong>社区支持</strong></li></ol><ul><li><a href="https://solana.stackexchange.com/">Solana Stack Exchange</a></li><li><a href="https://discord.gg/anchor-lang">Anchor Discord频道</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part8]_Solana 生态中的协议与标准库</title>
      <link href="/2025/08/12/Solana-part8-Solana-%E7%94%9F%E6%80%81%E4%B8%AD%E7%9A%84%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/"/>
      <url>/2025/08/12/Solana-part8-Solana-%E7%94%9F%E6%80%81%E4%B8%AD%E7%9A%84%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=57355a10-6cc7-5711-4857-fab476131398</cover>
      <date>Tue Aug 12 2025 11:07:27 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part8]_Solana 生态中的协议与标准库</h1><h2 id="一、协议基础：定义与生态差异">一、协议基础：定义与生态差异</h2><h3 id="1-1-区块链协议的本质">1.1 区块链协议的本质</h3><p>区块链协议是<strong>定义网络交互规则、数据结构和业务逻辑的规范</strong>，是智能合约和应用的“底层规则集”。例如：</p><ul><li>代币协议规定资产的<strong>发行（Mint）、转移（Transfer）、销毁（Burn）</strong> 逻辑；</li><li>Swap协议定义两种资产的<strong>兑换规则</strong>（如价格算法、流动性池交互）。<br>类比互联网：如同HTTP协议规定网页传输规则，区块链协议定义“价值与逻辑”的传输标准。</li></ul><h3 id="1-2-不同公链协议的核心差异">1.2 不同公链协议的核心差异</h3><p>以 <strong>以太坊（ERC标准）</strong> 和 <strong>Solana（SPL标准）</strong> 对比：</p><table><thead><tr><th>维度</th><th>以太坊（ERC）</th><th>Solana（SPL）</th></tr></thead><tbody><tr><td><strong>底层架构</strong></td><td>账户模型（EOA+合约账户），单线程执行</td><td>账户模型（可执行+数据账户，关联账户），并行执行（Sealevel）</td></tr><tr><td><strong>开发语言</strong></td><td>Solidity</td><td>Rust</td></tr><tr><td><strong>性能导向</strong></td><td>通用性优先（牺牲部分效率）</td><td>高性能优先（高TPS、低延迟）</td></tr><tr><td><strong>协议设计</strong></td><td>灵活（如ERC-721A优化NFT批量Mint）</td><td>高效（如SPL-Token支持并行转移）</td></tr></tbody></table><h2 id="二、Solana核心协议解析（SPL体系）">二、Solana核心协议解析（SPL体系）</h2><p>Solana的协议多通过 <strong>Solana Program Library（SPL，标准程序库）</strong> 实现，以下是核心协议拆解：</p><h3 id="2-1-代币协议：SPL-Token-扩展">2.1 代币协议：SPL-Token &amp; 扩展</h3><h4 id="（1）SPL-Token（基础版）">（1）SPL-Token（基础版）</h4><ul><li><strong>功能</strong>：发行<strong>可替代代币（Fungible Token）</strong>，支持 Mint（增发）、Transfer（转移）、Burn（销毁）、Approval（授权）等操作。</li><li><strong>账户模型</strong>：<ul><li><strong>Mint账户</strong>：记录代币总供应量、小数位、发行方等核心信息；</li><li><strong>代币账户</strong>：用户持有代币的载体（默认不创建，需通过<strong>关联账户机制</strong>生成）。</li></ul></li><li><strong>类比</strong>：类似以太坊ERC-20，但借助Solana并行处理，<strong>批量转移效率更高</strong>。</li></ul><h4 id="（2）SPL-Associated-Token-Account（ATA，关联账户）">（2）SPL-Associated Token Account（ATA，关联账户）</h4><ul><li><strong>作用</strong>：为 <strong>用户主账户 + 代币Mint地址</strong> 自动生成<strong>唯一关联代币账户</strong>，统一管理该代币的余额。</li><li><strong>优势</strong>：避免用户手动创建多个代币账户（如以太坊需为每个ERC-20代币单独授权），简化资产管理。</li></ul><h4 id="（3）SPL-Token-2022（增强版）">（3）SPL-Token 2022（增强版）</h4><ul><li><strong>新增特性</strong>：<strong>可选的冻结（Freeze）和锁定（Locking）机制</strong>：<ul><li><strong>冻结</strong>：管理员（如项目方）可冻结特定ATA的代币转移，用于<strong>合规管控</strong>（如防止黑钱交易）或项目治理；</li><li><strong>锁定</strong>：设定代币解锁条件（如 <strong>时间锁</strong>：团队代币分阶段解锁；<strong>逻辑锁</strong>：满足某条件才允许转移），适配私募、vesting计划等场景。</li></ul></li></ul><h3 id="2-2-交互协议：从Memo到Governance">2.2 交互协议：从Memo到Governance</h3><h4 id="（1）Memo（交易备注）">（1）Memo（交易备注）</h4><ul><li><strong>功能</strong>：在Solana交易中附加<strong>文本信息</strong>（如“订单ID#123”、“NFT购买”），虽不影响交易逻辑，但可作为<strong>链上审计或交互记录</strong>。</li><li><strong>应用</strong>：DEX交易记录订单信息、NFT市场记录购买备注。</li></ul><h4 id="（2）Name-Service（域名服务，如SNS）">（2）Name Service（域名服务，如SNS）</h4><ul><li><strong>功能</strong>：将复杂的Solana地址（如 <code>8X...yz</code>）映射为<strong>易记域名</strong>（如 <code>user.sol</code>），方便转账和社交展示。</li><li><strong>类比</strong>：类似以太坊ENS（.eth），但Solana的SNS更轻量，结合链上存储实现。</li></ul><h4 id="（3）Swap协议（如Serum的SPL-Swap）">（3）Swap协议（如Serum的SPL Swap）</h4><ul><li><strong>机制</strong>：实现两种代币的兑换，支持 <strong>订单簿模式</strong>（如Serum）或 <strong>AMM模式</strong>（自动做市商，如Raydium）。</li><li><strong>核心</strong>：通过SPL-Token的Transfer接口，结合<strong>价格算法</strong>（如恒定乘积公式），实现去中心化交易。</li></ul><h4 id="（4）Staking（质押协议）">（4）Staking（质押协议）</h4><ul><li><strong>流程</strong>：用户将代币质押给<strong>验证者或质押池</strong>，获取质押收益（如SOL代币质押获得通胀奖励）。</li><li><strong>协议逻辑</strong>：涉及 <strong>委托（Delegate）、解绑（Unstake，含解锁期）、收益分发</strong>，保障Solana网络的PoS共识安全。</li></ul><h4 id="（5）Governance（治理协议，如Realms）">（5）Governance（治理协议，如Realms）</h4><ul><li><strong>功能</strong>：社区投票决定<strong>协议升级、资金分配</strong>等，通常结合“治理代币”（如$SRM用于Serum治理）。</li><li><strong>流程</strong>：提案创建 → 代币加权投票 → 通过<strong>CPI调用执行程序</strong>（如转移社区金库资金）。</li></ul><h4 id="（6）Flash-Loans（闪电贷）">（6）Flash Loans（闪电贷）</h4><ul><li><strong>原理</strong>：在<strong>同一原子交易</strong>中，用户可无抵押借出资产，前提是“借出→使用→偿还”全流程完成（否则交易回滚）。</li><li><strong>应用</strong>：套利（跨交易所价格差）、临时资金利用，依赖Solana高TPS和低延迟实现高效操作。</li></ul><h2 id="三、Solana标准库（SPL）的核心价值：模块化与CPI">三、Solana标准库（SPL）的核心价值：模块化与CPI</h2><h3 id="3-1-模块化开发：站在巨人肩膀上">3.1 模块化开发：站在巨人肩膀上</h3><ul><li><strong>SPL定位</strong>：Solana官方维护的<strong>标准程序库</strong>，提供经过审计、高性能的基础模块（如token、swap、治理）。</li><li><strong>开发者收益</strong>：<ul><li>无需从头开发代币系统，直接调用 <strong>SPL-Token</strong> 接口；</li><li>开发DEX时，复用 <strong>SPL-Swap</strong> 的兑换逻辑，节省时间和安全成本。</li></ul></li><li><strong>案例</strong>：NFT平台可复用SPL-Token（手续费代币）和<strong>Metaplex NFT标准</strong>（基于SPL开发，管理NFT元数据）。</li></ul><h3 id="3-2-跨程序调用（CPI）：程序间的“协作魔法”">3.2 跨程序调用（CPI）：程序间的“协作魔法”</h3><ul><li><strong>定义</strong>：Solana允许<strong>一个智能合约（程序）调用另一个程序的指令</strong>，所有操作在<strong>同一原子交易</strong>中执行（要么全成，要么全败）。</li><li><strong>应用场景</strong>：<ul><li><strong>DEX交易</strong>：Swap程序调用SPL-Token的Transfer指令，完成代币兑换；</li><li><strong>借贷协议</strong>：借贷程序调用SPL-Token转移抵押品，同时调用<strong>价格预言机程序</strong>获取资产价格；</li><li><strong>治理执行</strong>：Governance程序通过CPI调用SPL-Token转移社区金库资金。</li></ul></li><li><strong>优势</strong>：实现复杂业务逻辑（如“质押+借贷+Swap”组合操作），同时通过<strong>原子性</strong>避免中间状态风险。</li></ul><h2 id="四、总结：协议与标准库的生态意义">四、总结：协议与标准库的生态意义</h2><ol><li><strong>协议是规则基石</strong>：定义资产、交互、治理的标准，让不同应用<strong>互操作</strong>（如不同DEX都用SPL-Swap，用户资产通用）。</li><li><strong>SPL是开发加速器</strong>：模块化设计和CPI机制，<strong>降低开发门槛</strong>，促进生态繁荣（如大量项目基于SPL快速迭代）。</li><li><strong>对比与展望</strong>：与以太坊ERC体系相比，Solana的SPL更注重<strong>性能和并行</strong>；随着SPL-Token 2022等升级，在<strong>合规、复杂资产管理</strong>上会更灵活。</li></ol><h3 id="附录：关键术语速查表">附录：关键术语速查表</h3><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td><strong>SPL</strong></td><td>Solana Program Library（Solana标准程序库）</td></tr><tr><td><strong>ATA</strong></td><td>Associated Token Account（关联代币账户）</td></tr><tr><td><strong>CPI</strong></td><td>Cross Program Invocation（跨程序调用）</td></tr><tr><td><strong>Mint Account</strong></td><td>代币发行账户（记录总供应量、小数位等）</td></tr><tr><td><strong>Vesting</strong></td><td>代币锁定计划（如团队代币分阶段解锁）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part7]_社交项目2-客户端文档</title>
      <link href="/2025/08/11/Solana-part7-%E7%A4%BE%E4%BA%A4%E9%A1%B9%E7%9B%AE2%E2%80%94%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E6%A1%A3/"/>
      <url>/2025/08/11/Solana-part7-%E7%A4%BE%E4%BA%A4%E9%A1%B9%E7%9B%AE2%E2%80%94%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E6%A1%A3/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=db0e7fe7-0cd2-0bd4-a640-1e62d59d072d</cover>
      <date>Mon Aug 11 2025 20:57:26 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part7]_社交项目2—客户端文档</h1><blockquote><p><strong>社交项目地址链接</strong></p><p>🔗 合约地址：<a href="https://github.com/SoniaChan33/sol-friend">https://github.com/SoniaChan33/sol-friend</a></p><p>🔗 客户端地址： <a href="https://github.com/SoniaChan33/solana-friend-cli">https://github.com/SoniaChan33/solana-friend-cli</a></p></blockquote><h2 id="一、概述">一、概述</h2><p>本文档介绍基于Solana区块链的社交应用客户端代码的核心功能、数据结构及使用方法。该客户端通过RPC与Solana网络交互，实现用户资料管理、关注/取消关注、内容发布与查询等社交功能，依赖链上程序处理核心业务逻辑。</p><h2 id="二、依赖说明">二、依赖说明</h2><p>客户端代码依赖以下Rust crate：</p><ul><li><code>solana-client</code>：提供Solana RPC客户端功能，用于与节点交互</li><li><code>solana-sdk</code>：Solana核心SDK，包含账户、交易、签名等基础类型</li><li><code>borsh</code>：用于链上数据的序列化/反序列化（Solana生态常用）</li><li><code>std::str::FromStr</code>：用于Pubkey字符串解析</li></ul><h2 id="三、核心数据结构">三、核心数据结构</h2><h3 id="1-账户数据结构">1. 账户数据结构</h3><p>用于在链上存储用户相关数据，需实现<code>BorshDeserialize</code>和<code>BorshSerialize</code>以支持链上传输。</p><h4 id="UserProfile"><code>UserProfile</code></h4><ul><li>功能：存储用户的关注者列表信息</li><li>字段：<ul><li><code>data_len: u16</code>：关注者数量（与<code>followers</code>长度一致）</li><li><code>followers: Vec&lt;Pubkey&gt;</code>：关注当前用户的用户公钥列表</li></ul></li><li>方法：<ul><li><code>new()</code>：创建空的用户资料实例</li><li><code>follow(&amp;mut self, user: Pubkey)</code>：添加新关注者（去重处理）</li></ul></li></ul><h4 id="UserPost"><code>UserPost</code></h4><ul><li>功能：记录用户的发帖数量</li><li>字段：<ul><li><code>post_count: u16</code>：用户发布的内容总数</li></ul></li></ul><h4 id="Post"><code>Post</code></h4><ul><li>功能：存储单条帖子内容</li><li>字段：<ul><li><code>content: String</code>：帖子文本内容</li><li><code>timestamp: u64</code>：发帖时间戳（通常为区块时间）</li></ul></li></ul><h3 id="2-客户端核心结构">2. 客户端核心结构</h3><h4 id="SocialClient"><code>SocialClient</code></h4><ul><li>功能：封装与Solana链上社交程序交互的所有方法</li><li>字段：<ul><li><code>rpc_client: RpcClient</code>：Solana RPC客户端实例</li><li><code>program_id: Pubkey</code>：链上社交程序的公钥</li></ul></li><li>构造方法：<pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>rpc_url<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> program_id<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span></code></pre><ul><li>参数：<code>rpc_url</code>（Solana节点RPC地址）、<code>program_id</code>（链上程序公钥）</li><li>返回：<code>SocialClient</code>实例</li></ul></li></ul><h3 id="3-指令枚举-SocialInstruction">3. 指令枚举 <code>SocialInstruction</code></h3><p>定义客户端向链上程序发送的指令类型，需实现<code>BorshDeserialize</code>和<code>BorshSerialize</code>：</p><ul><li><code>InitializeUser &#123; seed_type: String &#125;</code>：初始化用户账户（资料/帖子账户）</li><li><code>FollowUser &#123; user_to_follow: Pubkey &#125;</code>：关注指定用户</li><li><code>UnfollowUser &#123; user_to_unfollow: Pubkey &#125;</code>：取消关注指定用户</li><li><code>QueryFollowers</code>：查询当前用户的关注者列表</li><li><code>PostContent &#123; content: String &#125;</code>：发布新内容</li><li><code>QueryPosts</code>：查询指定帖子内容</li></ul><h2 id="四、核心功能说明">四、核心功能说明</h2><h3 id="1-PDA生成（get-pda函数）">1. PDA生成（<code>get_pda</code>函数）</h3><ul><li>功能：基于程序ID和种子（seed）生成Program Derived Address（PDA），用于唯一标识链上账户</li><li>参数：<code>program_id</code>（程序公钥）、<code>seed</code>（种子数组，用于区分不同账户）</li><li>种子作用：通过不同种子生成唯一PDA，避免账户地址冲突（例如：<code>USER_PROFILE_SEED</code>用于用户资料账户，<code>USER_POST_SEED</code>用于帖子相关账户）</li><li>代码：<pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">get_pda</span><span class="token punctuation">(</span>program_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span> seed<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Pubkey</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>pda<span class="token punctuation">,</span> _bump<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">find_program_address</span><span class="token punctuation">(</span>seed<span class="token punctuation">,</span> <span class="token operator">&amp;</span>program_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    pda<span class="token punctuation">&#125;</span></code></pre></li></ul><h3 id="2-账户初始化（initialize-user）">2. 账户初始化（<code>initialize_user</code>）</h3><ul><li>功能：创建用户的PDA账户（支持资料账户或帖子账户，通过<code>seed_type</code>区分）</li><li>参数：<ul><li><code>user_keypair: &amp;Keypair</code>：用户签名密钥对（交易 payer）</li><li><code>seed_type: &amp;str</code>：种子类型（<code>USER_PROFILE_SEED</code>或<code>USER_POST_SEED</code>）</li></ul></li><li>流程：<ol><li>基于用户公钥和<code>seed_type</code>生成PDA</li><li>构建<code>InitializeUser</code>指令，包含用户账户、PDA账户和系统程序（用于创建账户）</li><li>发送交易并确认</li></ol></li><li>返回：<code>Result&lt;(), Box&lt;dyn Error&gt;&gt;</code>（成功/错误信息）</li></ul><h3 id="3-关注-取消关注">3. 关注/取消关注</h3><h4 id="follow-user"><code>follow_user</code></h4><ul><li>功能：让当前用户关注指定用户</li><li>参数：<ul><li><code>user_keypair: &amp;Keypair</code>：当前用户密钥对</li><li><code>follow_user: Pubkey</code>：被关注用户的公钥</li></ul></li><li>流程：生成用户资料PDA，发送<code>FollowUser</code>指令更新关注者列表</li></ul><h4 id="unfollow-user"><code>unfollow_user</code></h4><ul><li>功能：让当前用户取消关注指定用户</li><li>参数：<ul><li><code>user_keypair: &amp;Keypair</code>：当前用户密钥对</li><li><code>unfollow_user: Pubkey</code>：被取消关注用户的公钥</li></ul></li><li>流程：生成用户资料PDA，发送<code>UnfollowUser</code>指令从关注者列表移除</li></ul><h3 id="4-关注者查询（query-followers）">4. 关注者查询（<code>query_followers</code>）</h3><ul><li>功能：查询当前用户的关注者列表</li><li>参数：<code>user_keypair: &amp;Keypair</code>（当前用户密钥对）</li><li>流程：生成用户资料PDA，发送<code>QueryFollowers</code>指令，由链上程序返回关注者数据</li></ul><h3 id="5-内容发布与查询">5. 内容发布与查询</h3><h4 id="post-content"><code>post_content</code></h4><ul><li>功能：发布新帖子</li><li>参数：<ul><li><code>user_keypair: &amp;Keypair</code>：发布者密钥对</li><li><code>content: String</code>：帖子内容</li><li><code>id: u64</code>：帖子唯一ID（用于生成帖子PDA）</li></ul></li><li>流程：<ol><li>生成用户帖子主PDA（记录发帖数量）和当前帖子PDA（存储内容）</li><li>发送<code>PostContent</code>指令，包含内容和时间戳</li><li>链上程序更新<code>UserPost</code>的<code>post_count</code>并存储<code>Post</code>数据</li></ol></li></ul><h4 id="query-posts"><code>query_posts</code></h4><ul><li>功能：查询指定ID的帖子内容</li><li>参数：<ul><li><code>user_keypair: &amp;Keypair</code>：用户密钥对</li><li><code>id: u64</code>：帖子ID</li></ul></li><li>流程：生成用户帖子主PDA和目标帖子PDA，发送<code>QueryPosts</code>指令查询内容</li></ul><h3 id="6-交易发送（send-instruction）">6. 交易发送（<code>send_instruction</code>）</h3><ul><li>功能：通用交易发送工具，封装交易签名、发送和确认逻辑</li><li>参数：<ul><li><code>payer: &amp;Keypair</code>：交易付费者密钥对</li><li><code>instruction: Vec&lt;Instruction&gt;</code>：待执行的指令列表</li></ul></li><li>流程：<ol><li>获取最新区块哈希（用于交易有效性）</li><li>生成并签名交易</li><li>发送交易并等待确认，返回签名信息</li></ol></li></ul><h2 id="五、使用示例">五、使用示例</h2><p>以下示例展示客户端核心功能的调用流程（参考<code>main</code>函数）：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 1. 初始化客户端</span><span class="token keyword">let</span> program_id <span class="token operator">=</span> <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token string">"9ti8R5H2Ru5553wi419aj2h5cZJbbJEk6zr8insVphJe"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span> <span class="token comment">// 链上程序公钥</span><span class="token keyword">let</span> user_keypair <span class="token operator">=</span> <span class="token function">read_keypair_file</span><span class="token punctuation">(</span><span class="token string">"/Users/tinachan/.config/solana/id.json"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span> <span class="token comment">// 加载用户密钥对</span><span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">SocialClient</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8899"</span><span class="token punctuation">,</span> program_id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连接本地测试网</span><span class="token comment">// 2. 初始化用户资料账户</span>client<span class="token punctuation">.</span><span class="token function">initialize_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user_keypair<span class="token punctuation">,</span> <span class="token constant">USER_PROFILE_SEED</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span><span class="token comment">// 3. 关注指定用户</span><span class="token keyword">let</span> follow_user <span class="token operator">=</span> <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token string">"2tQibfGH1UX4PEA1dNWJ8zvnpSbKRBr5a5eVhaRxF6EX"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">follow_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user_keypair<span class="token punctuation">,</span> follow_user<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span><span class="token comment">// 4. 查询关注者列表</span>client<span class="token punctuation">.</span><span class="token function">query_followers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user_keypair<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span><span class="token comment">// 5. 取消关注</span>client<span class="token punctuation">.</span><span class="token function">unfollow_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user_keypair<span class="token punctuation">,</span> follow_user<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span><span class="token comment">// 6. 初始化帖子账户</span>client<span class="token punctuation">.</span><span class="token function">initialize_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user_keypair<span class="token punctuation">,</span> <span class="token constant">USER_POST_SEED</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span><span class="token comment">// 7. 发布帖子</span>client<span class="token punctuation">.</span><span class="token function">post_content</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user_keypair<span class="token punctuation">,</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span><span class="token comment">// 8. 查询帖子</span>client<span class="token punctuation">.</span><span class="token function">query_posts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user_keypair<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></code></pre><h2 id="六、注意事项">六、注意事项</h2><ol><li><strong>序列化必要性</strong>：所有链上数据（如<code>UserProfile</code>、<code>SocialInstruction</code>）需通过borsh序列化，因为Solana链上程序仅能处理二进制数据，且borsh是Solana生态的标准序列化方式。</li><li><strong>PDA唯一性</strong>：种子（seed）需确保唯一，避免不同类型账户地址冲突（例如用户资料和帖子账户需使用不同种子）。</li><li><strong>错误处理</strong>：所有方法返回<code>Result</code>类型，需处理可能的错误（如RPC连接失败、交易确认超时、账户未初始化等）。</li><li><strong>测试环境</strong>：示例中使用本地测试网（<code>http://127.0.0.1:8899</code>），正式环境需切换为Solana主网或devnet RPC地址。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part6]_社交项目1-合约部分文档</title>
      <link href="/2025/08/08/Solana-part6-%E7%A4%BE%E4%BA%A4%E9%A1%B9%E7%9B%AE/"/>
      <url>/2025/08/08/Solana-part6-%E7%A4%BE%E4%BA%A4%E9%A1%B9%E7%9B%AE/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=26d1b442-e5da-5b61-ec33-0cef2573b869</cover>
      <date>Fri Aug 08 2025 17:24:42 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part6]_社交项目1-合约部分</h1><blockquote><p><strong>社交项目地址链接</strong></p><p>🔗 合约地址：<a href="https://github.com/SoniaChan33/sol-friend">https://github.com/SoniaChan33/sol-friend</a></p><p>🔗 客户端地址： <a href="https://github.com/SoniaChan33/solana-friend-cli">https://github.com/SoniaChan33/solana-friend-cli</a></p></blockquote><h2 id="一、项目概述">一、项目概述</h2><p>本项目是基于Solana区块链的去中心化社交应用合约，使用Rust语言开发。合约支持用户账户初始化、关注/取消关注其他用户、发布内容、查询粉丝列表及查询帖子等核心社交功能。通过Solana的Program Derived Address (PDA)机制管理用户数据，使用Borsh进行数据序列化/反序列化，确保链上数据的高效存储与读取。</p><h2 id="二、核心模块与数据结构">二、核心模块与数据结构</h2><h3 id="1-指令定义（instruction-rs）">1. 指令定义（<code>instruction.rs</code>）</h3><p>定义了合约支持的所有操作指令，通过<code>SocialInstruction</code>枚举实现，包含以下指令：</p><table><thead><tr><th>指令名</th><th>功能描述</th><th>参数说明</th></tr></thead><tbody><tr><td><code>InitializeUser</code></td><td>初始化用户账户（ profile 或 post 类型）</td><td><code>seed_type</code>: 账户类型（“profile” 或 “post”）</td></tr><tr><td><code>FollowUser</code></td><td>关注指定用户</td><td><code>user_to_follow</code>: 被关注用户的Pubkey</td></tr><tr><td><code>UnfollowUser</code></td><td>取消关注指定用户</td><td><code>user_to_unfollow</code>: 被取消关注用户的Pubkey</td></tr><tr><td><code>QueryFollowers</code></td><td>查询当前用户的粉丝列表</td><td>无参数</td></tr><tr><td><code>PostContent</code></td><td>发布内容</td><td><code>content</code>: 帖子内容字符串</td></tr><tr><td><code>QueryPosts</code></td><td>查询用户的帖子信息</td><td>无参数</td></tr></tbody></table><h3 id="2-状态数据结构（state-rs）">2. 状态数据结构（<code>state.rs</code>）</h3><p>定义了链上存储的数据结构及操作方法，核心结构如下：</p><h4 id="（1）UserProfile">（1）<code>UserProfile</code></h4><p>存储用户的粉丝列表信息：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">UserProfile</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> data_len<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span>       <span class="token comment">// 粉丝数量（与followers.len()一致，用于快速计算存储空间）</span>    <span class="token keyword">pub</span> followers<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Pubkey</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 粉丝的Pubkey列表</span><span class="token punctuation">&#125;</span></code></pre><p><strong>核心方法</strong>：</p><ul><li><code>new()</code>：初始化空的用户资料</li><li><code>follow(&amp;mut self, user: Pubkey)</code>：添加粉丝（去重）</li><li><code>unfollow(&amp;mut self, user_to_follow: Pubkey)</code>：移除粉丝（更新数量）</li></ul><h4 id="（2）UserPost">（2）<code>UserPost</code></h4><p>记录用户发布的帖子数量：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">UserPost</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> post_count<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">,</span> <span class="token comment">// 帖子总数</span><span class="token punctuation">&#125;</span></code></pre><p><strong>核心方法</strong>：</p><ul><li><code>new()</code>：初始化帖子计数器（初始为0）</li><li><code>add_post(&amp;mut self)</code>：发布新帖子时递增计数器</li><li><code>get_count(&amp;self)</code>：获取当前帖子总数</li></ul><h4 id="（3）Post">（3）<code>Post</code></h4><p>存储单条帖子的具体内容：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Post</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>  <span class="token comment">// 帖子内容</span>    <span class="token keyword">pub</span> timestamp<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>   <span class="token comment">// 发布时间戳（基于Solana网络时钟）</span><span class="token punctuation">&#125;</span></code></pre><p><strong>核心方法</strong>：</p><ul><li><code>new(content: String, timestamp: u64)</code>：创建新帖子实例</li></ul><h2 id="三、指令处理逻辑（processor-rs）">三、指令处理逻辑（<code>processor.rs</code>）</h2><p><code>Processor</code>结构体实现了所有指令的具体处理逻辑，核心流程如下：</p><h3 id="1-initialize-user：初始化用户账户">1. <code>initialize_user</code>：初始化用户账户</h3><ul><li><strong>功能</strong>：创建用户的PDA账户（分为<code>profile</code>和<code>post</code>两种类型），用于存储用户资料或帖子计数器。</li><li><strong>流程</strong>：<ol><li>解析账户信息（用户账户、PDA账户、系统程序）；</li><li>基于用户Pubkey和<code>seed_type</code>（“profile&quot;或&quot;post”）生成PDA地址，验证传入的PDA账户是否匹配；</li><li>计算账户所需存储空间（<code>profile</code>账户根据最大粉丝数计算，<code>post</code>账户固定大小）；</li><li>调用系统程序创建PDA账户（预存足够租金以豁免租金）；</li><li>初始化对应的数据结构（<code>UserProfile</code>或<code>UserPost</code>）并序列化到PDA账户中。</li></ol></li></ul><h3 id="2-follow-user：关注用户">2. <code>follow_user</code>：关注用户</h3><ul><li><strong>功能</strong>：将被关注用户的Pubkey添加到当前用户的<code>UserProfile</code>粉丝列表中。</li><li><strong>流程</strong>：<ol><li>解析PDA账户（存储当前用户的<code>UserProfile</code>）；</li><li>读取<code>data_len</code>计算当前粉丝列表的存储空间，反序列化<code>UserProfile</code>；</li><li>调用<code>follow</code>方法添加粉丝（自动去重）；</li><li>将更新后的<code>UserProfile</code>重新序列化并写入PDA账户。</li></ol></li></ul><h3 id="3-unfollow-user：取消关注用户">3. <code>unfollow_user</code>：取消关注用户</h3><ul><li><strong>功能</strong>：从当前用户的<code>UserProfile</code>粉丝列表中移除指定用户的Pubkey。</li><li><strong>流程</strong>：<ol><li>解析PDA账户（存储当前用户的<code>UserProfile</code>）；</li><li>反序列化<code>UserProfile</code>；</li><li>调用<code>unfollow</code>方法移除粉丝（更新<code>data_len</code>）；</li><li>将更新后的<code>UserProfile</code>重新序列化并写入PDA账户。</li></ol></li></ul><h3 id="4-query-followers：查询粉丝列表">4. <code>query_followers</code>：查询粉丝列表</h3><ul><li><strong>功能</strong>：读取当前用户的<code>UserProfile</code>并输出粉丝列表。</li><li><strong>流程</strong>：<ol><li>解析PDA账户（存储当前用户的<code>UserProfile</code>）；</li><li>反序列化<code>UserProfile</code>并通过<code>msg!</code>打印粉丝列表。</li></ol></li></ul><h3 id="5-post-content：发布内容">5. <code>post_content</code>：发布内容</h3><ul><li><strong>功能</strong>：创建新的帖子PDA账户，存储帖子内容和时间戳，并更新用户的帖子计数器。</li><li><strong>流程</strong>：<ol><li>解析账户信息（用户账户、帖子计数器PDA、新帖子PDA、系统程序）；</li><li>读取当前用户的<code>UserPost</code>，递增<code>post_count</code>并重新序列化；</li><li>基于用户Pubkey、&quot;post&quot;种子和最新<code>post_count</code>生成新帖子的PDA地址；</li><li>计算帖子所需存储空间（基于<code>Post</code>结构体大小），创建新帖子PDA账户；</li><li>将帖子内容和当前时间戳（通过Solana时钟获取）序列化到新帖子PDA中。</li></ol></li></ul><h3 id="6-query-post：查询帖子信息">6. <code>query_post</code>：查询帖子信息</h3><ul><li><strong>功能</strong>：读取用户的帖子计数器和指定帖子的内容。</li><li><strong>流程</strong>：<ol><li>解析账户信息（帖子计数器PDA、目标帖子PDA）；</li><li>分别反序列化<code>UserPost</code>和<code>Post</code>，通过<code>msg!</code>打印帖子数量和内容。</li></ol></li></ul><h2 id=""></h2><h2 id="四、遇到的坑">四、遇到的坑</h2><h3 id="1-关于Rust借用规则（follow-user中的作用域）">1. 关于Rust借用规则（<code>follow_user</code>中的作用域）</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token operator">&amp;</span>pda_account<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不可变引用</span>    <span class="token comment">// ... 读取data计算size</span><span class="token punctuation">&#125;</span> <span class="token comment">// data的生命周期结束，不可变引用释放</span></code></pre><p><strong>原因</strong>：Rust的借用规则禁止同一作用域内同时存在<strong>不可变引用</strong>和<strong>可变引用</strong>。此处用作用域限制<code>data</code>（不可变引用）的生命周期，确保后续调用<code>try_borrow_mut_data()</code>（获取可变引用）时不会触发借用冲突。</p><h3 id="2-数组切片的使用（follow-user中的-data-U16-SIZE-）">2. 数组切片的使用（<code>follow_user</code>中的<code>&amp;data[..U16_SIZE]</code>）</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> len<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>data<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token constant">U16_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// U16_SIZE=2</span></code></pre><p><strong>原因</strong>：<code>UserProfile</code>的<code>data_len</code>是<code>u16</code>类型（占2字节），存储在账户数据的前2字节。通过数组切片提取前2字节，再转换为<code>u16</code>，用于计算粉丝列表的总存储空间（<code>data_len</code>即粉丝数量）。</p><h3 id="3-序列化的必要性（修改数据后重新序列化）">3. 序列化的必要性（修改数据后重新序列化）</h3><pre class="language-rust" data-language="rust"><code class="language-rust">user_profile<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">*</span>pda_account<span class="token punctuation">.</span><span class="token function">try_borrow_mut_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span></code></pre><p><strong>原因</strong>：链上账户存储的是字节数据，<code>user_profile</code>是内存中的结构体实例。当结构体被修改（如添加粉丝）后，必须通过<code>serialize</code>将内存中的最新状态转换为字节流，写入账户数据区域，否则修改不会被持久化到链上。</p><h3 id="4-PDA地址计算（post-content中的种子）">4. PDA地址计算（<code>post_content</code>中的种子）</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">find_program_address</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>user_account<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"post"</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>count <span class="token keyword">as</span> <span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> program_id<span class="token punctuation">)</span></code></pre><p><strong>原因</strong>：PDA（程序派生地址）需通过“种子+程序ID”生成，确保唯一性。此处使用：</p><ul><li>用户Pubkey（区分不同用户）；</li><li>&quot;post&quot;字符串（标识帖子类型）；</li><li>帖子计数器<code>count</code>（区分同一用户的不同帖子）；<br>三者组合作为种子，确保每个帖子的PDA地址唯一。</li></ul><h3 id="5-unwrap-与-的区别">5. <code>unwrap()</code>与<code>?</code>的区别</h3><ul><li><code>unwrap()</code>：当<code>Result</code>为<code>Ok</code>时返回值，为<code>Err</code>时直接触发程序恐慌（panic），适合确定不会出错的场景（如已知序列化<code>Post</code>必然成功）。</li><li><code>?</code>：当<code>Result</code>为<code>Err</code>时将错误返回给调用者，由上层处理，适合需要传播错误的场景（如账户解析失败）。</li></ul><h3 id="6-create-account指令参数">6. <code>create_account</code>指令参数</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token namespace">system_instruction<span class="token punctuation">::</span></span><span class="token function">create_account</span><span class="token punctuation">(</span>    user_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span>    <span class="token comment">// 资金来源（创建者）</span>    <span class="token operator">&amp;</span>pda<span class="token punctuation">,</span>                <span class="token comment">// 新账户地址（PDA）</span>    lamports<span class="token punctuation">,</span>            <span class="token comment">// 初始Lamports（需覆盖租金）</span>    space <span class="token keyword">as</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>        <span class="token comment">// 账户存储空间</span>    program_id           <span class="token comment">// 账户所有者（当前合约）</span><span class="token punctuation">)</span></code></pre><p><strong>原因</strong>：创建Solana账户必须指定：资金来源（支付租金）、账户地址、存储空间（决定租金金额）、所有者（只有所有者程序可修改账户数据）。</p><h3 id="7-invoke-signed中的signer-seeds">7. <code>invoke_signed</code>中的<code>signer_seeds</code></h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>user_account<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"post"</span><span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>count <span class="token keyword">as</span> <span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>bump_seed<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p><strong>原因</strong>：PDA本身不是私钥控制的账户，无法直接签名。<code>signer_seeds</code>用于证明“当前合约有权限操作该PDA”——通过种子重新计算PDA地址，验证与目标地址一致，从而获得临时签名权限，确保账户创建的安全性。</p><h3 id="8-mod语句调用注意">8. mod语句调用注意</h3><p>在 Rust 中，mod 语句用于告诉编译器包含某个模块的源文件。只有在模块被声明为 pub mod xxx; 后，其他文件（如 <a href="http://processor.rs">processor.rs</a>）才能通过 use crate::xxx::… 访问其内容。</p><p>原因如下：</p><p><a href="http://state.rs">state.rs</a> 只是物理存在于 src 目录下，只有在 <a href="http://lib.rs">lib.rs</a> 里用 pub mod state; 声明后，state 模块才会被编译进 crate 并对外可见。<br>如果不在 <a href="http://lib.rs">lib.rs</a> 里声明，crate::state 这个路径在其他文件里就找不到。<br><a href="http://processor.rs">processor.rs</a> 只是使用 state，但模块的“引入”必须在 crate 的根（即 <a href="http://lib.rs">lib.rs</a>）声明。</p><h2 id="五、程序入口（lib-rs）">五、程序入口（<code>lib.rs</code>）</h2><p>定义了Solana程序的入口点<code>process_instruction</code>，将指令处理逻辑委托给<code>Processor::process_instruction</code>，符合Solana程序的标准入口规范。</p><h2 id="六、总结">六、总结</h2><p>本合约通过PDA管理用户数据，结合Borsh序列化和Solana系统指令，实现了去中心化社交应用的核心功能。关键设计点包括：用PDA确保数据所有权、通过计数器和种子生成唯一帖子地址、严格遵循Rust内存安全规则处理账户数据。</p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part5]_SPLToken合约简单实现</title>
      <link href="/2025/08/07/Solana-part5-SPLToken%E5%90%88%E7%BA%A6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2025/08/07/Solana-part5-SPLToken%E5%90%88%E7%BA%A6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/08/image-20250821144342655.png</cover>
      <date>Thu Aug 07 2025 10:44:31 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part5]_SPLToken合约简单实现</h1><p><img src="https://img.soniachen.com/blog/posts/2025/08/image-20250821144342655.png" alt="image-20250821144342655"></p><h2 id="实现Token项目">实现Token项目</h2><ol><li><p>创建一个<code>token</code>项目</p></li><li><p><code>token</code> 项目依赖：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span>borsh <span class="token operator">=</span> <span class="token string">"1.5.7"</span>solana-program <span class="token operator">=</span> <span class="token string">"2.3.0"</span>spl-associated-token-account <span class="token operator">=</span> <span class="token punctuation">&#123;</span> version <span class="token operator">=</span> <span class="token string">"7.0.0"</span>, features <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"no-entrypoint"</span>,<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>spl-token <span class="token operator">=</span> <span class="token punctuation">&#123;</span> version <span class="token operator">=</span> <span class="token string">"8.0.0"</span>, features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"no-entrypoint"</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">[</span>lib<span class="token punctuation">]</span>crate-type <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"cdylib"</span>, <span class="token string">"lib"</span><span class="token punctuation">]</span></code></pre></li><li><p>编写合约,具体代码见: <a href="https://github.com/SoniaChan33/token">https://github.com/SoniaChan33/token</a></p></li><li><p>起本地环境：<code>➜  ~ solana-test-validator</code></p></li><li><p>打开log</p><pre class="language-bash" data-language="bash"><code class="language-bash">➜  ~ solana logs</code></pre></li><li><p>编译合约：</p><pre class="language-bash" data-language="bash"><code class="language-bash">➜  token git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">cargo</span> build-sbf</code></pre></li><li><p>部署合约, 获取programID</p><pre class="language-bash" data-language="bash"><code class="language-bash">➜  token git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ solana program deploy target/deploy/token.soProgram Id: 5DPHC1PjRftRHJLKD4WSSXt83h1AChJy2pHXUqGdKD9XSignature: 29PquhXv5Jw9c8p6k3jGK9UoLATg5rUpk3Mx8BBiJK8vxNEcLru4t7xYn6EdxXVeivUP7urczzoQY3KSvgGbEdhR</code></pre></li></ol><h3 id="核心文件">核心文件</h3><p><strong>具体实现文档见仓库readme文档：<a href="https://github.com/SoniaChan33/token?tab=readme-ov-file#spl-token%E5%90%88%E7%BA%A6%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E6%96%87%E6%A1%A3">https://github.com/SoniaChan33/token?tab=readme-ov-file#spl-token合约项目实现文档</a></strong></p><p><a href="http://processor.rs">processor.rs</a>：核心业务逻辑，处理指令</p><p><a href="http://state.rs">state.rs</a>：定义账户的状态和扩展字段</p><p><a href="http://instruction.rs">instruction.rs</a>：定义各种代币操作的指令</p><p><a href="http://oerror.rs">oerror.rs</a>：定义了程序可能抛出的错误</p><p><a href="http://olib.rs">olib.rs</a>：程序入口点，汇总各个模块。</p><h2 id=""></h2><h2 id="实现调用方Cli">实现调用方Cli</h2><ol><li><p>创建项目</p></li><li><p>编写：具体代码见：<a href="https://github.com/SoniaChan33/solana-cli">https://github.com/SoniaChan33/solana-cli</a></p></li><li><p>测试结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash">running <span class="token number">1</span> <span class="token builtin class-name">test</span><span class="token builtin class-name">test</span> test_fn <span class="token punctuation">..</span>. oksuccesses:---- test_fn stdout ----Mint Account: 54b3u3wmAzM7LdPpERfa3iZGjkbafaD5FQ3aXV8iRaQkTransaction result: zaWCinW8Kmjh6sQ3jRPcrntZ5yFWhuQM6GwWuGBJxCPPRJUiEcVRC1hKtaw1TSGZ5QB3nnEqBPieG3HzCvuEv5AToken created successfully with mint account: 54b3u3wmAzM7LdPpERfa3iZGjkbafaD5FQ3aXV8iRaQksuccesses:    test_fn</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part4]_Token解析&amp;创建</title>
      <link href="/2025/08/06/Solana-part4-Token%E8%A7%A3%E6%9E%90-%E5%88%9B%E5%BB%BA/"/>
      <url>/2025/08/06/Solana-part4-Token%E8%A7%A3%E6%9E%90-%E5%88%9B%E5%BB%BA/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=c72d5d0f-4ec2-71f3-1973-2b0e78e96ed9</cover>
      <date>Wed Aug 06 2025 17:38:53 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part4]_Token解析&amp;创建</h1><h2 id="solana上的代币">solana上的代币</h2><p>代币是代表对各种资产所有权的数字资产。代币化使得财产权的数字化成为可能，是管理可替代和不可替代资产的基本组成部分</p><ul><li>可替代代币代表同类型和同价值的可互换和可分割资产（例如 USDC）</li><li>不可替代代币（NFT）代表不可分隔资产的所有权（例如艺术品）</li></ul><h2 id="SPL-Solana-Program-Library">SPL(Solana Program Library)</h2><p>SPL 是 Solana 生态的核心程序库，其中 Token Program 是创建和管理代币的基础协议，主要涉及以下核心概念：</p><ul><li><strong>Token Program</strong>：Solana 上的标准代币协议，定义了代币的创建、转账、铸币、销毁等核心逻辑</li><li><strong>Mint Account</strong>：代币的&quot;铸造源&quot;，存储代币的元数据（如总供应量、小数位数、是否可铸币/冻结等），每个代币类型对应唯一的 Mint 账户</li><li><strong>Token Account</strong>：用户持有特定代币的账户，关联到一个 Mint 账户和一个所有者钱包，用于实际存储代币余额</li><li><strong>Associated Token Account (ATA)</strong>：与钱包地址绑定的标准代币账户，遵循固定地址推导规则（由钱包地址和 Mint 地址计算得出），方便用户管理不同代币</li></ul><h2 id="Token创建完整流程（基于spl-token-cli）">Token创建完整流程（基于spl-token-cli）</h2><h3 id="前置准备">前置准备</h3><ol><li><p>安装工具</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装Solana命令行工具</span><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-sSfL</span> https://release.solana.com/v1.18.4/install<span class="token variable">)</span></span>"</span><span class="token comment"># 安装SPL Token命令行工具（锁定版本确保兼容性）</span><span class="token function">cargo</span> <span class="token function">install</span> spl-token-cli <span class="token parameter variable">--version</span> <span class="token number">2.0</span>.0 <span class="token parameter variable">--locked</span></code></pre></li><li><p>初始化本地环境</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动本地Solana测试节点（默认端口8899）</span>solana-test-validator<span class="token comment"># 新建终端，配置集群为本地节点</span>solana config <span class="token builtin class-name">set</span> <span class="token parameter variable">--url</span> http://localhost:8899</code></pre></li><li><p>创建测试钱包并获取空投（用于支付Gas费）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建新钱包（生成密钥对文件）</span>solana-keygen new <span class="token parameter variable">--outfile</span> ~/my-wallet.json<span class="token comment"># 配置默认钱包</span>solana config <span class="token builtin class-name">set</span> <span class="token parameter variable">--keypair</span> ~/my-wallet.json<span class="token comment"># 获取测试网空投（本地节点无需真实代币）</span>solana airdrop <span class="token number">10</span><span class="token comment"># 验证余额</span>solana balance</code></pre></li></ol><h3 id="核心步骤：创建并管理代币">核心步骤：创建并管理代币</h3><h4 id="1-创建Mint账户（代币类型）">1. 创建Mint账户（代币类型）</h4><p>Mint账户是代币的&quot;根&quot;，决定代币的基本属性：</p> <pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># 创建默认可替代代币（可铸币、可冻结，小数位6）</span>➜  ~ spl-token create-tokenCreating token 3F14kaMXjdC1mFx5LRdD19amiMneKhgJsmMzGQUJjTt9 under program TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DAAddress:  3F14kaMXjdC1mFx5LRdD19amiMneKhgJsmMzGQUJjTt9Decimals:  <span class="token number">9</span>Signature: 5RHsDWPbGkFs8Cuq5G8wRGwfKhgAYqAejLc5nGwLSoDSHxWNV3CmX6wpYy5yPjYWvPuZVqUwYXEMt9M3ByJTKzqM--------------------------------------- <span class="token comment"># 自定义参数示例：</span> <span class="token comment"># 创建NFT（不可分割，小数位0，不可增发）</span> spl-token create-token <span class="token parameter variable">--decimals</span> <span class="token number">0</span> --no-mint-authority --no-freeze-authority <span class="token comment"># 命令输出解析：</span> <span class="token comment"># Creating token &lt;MINT_ADDRESS></span> <span class="token comment"># Signature: &lt;TRANSACTION_SIGNATURE></span> <span class="token comment"># 其中&lt;MINT_ADDRESS>是新代币的唯一标识，需记录</span>  --------------------------------- <span class="token comment">## 查看mint account info</span> ➜  ~ spl-token account-info <span class="token parameter variable">--address</span> 3F14kaMXjdC1mFx5LRdD19amiMneKhgJsmMzGQUJjTt9SPL Token Mint  Address: 3F14kaMXjdC1mFx5LRdD19amiMneKhgJsmMzGQUJjTt9  Program: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA  Supply: <span class="token number">0</span>  Decimals: <span class="token number">9</span>  Mint authority: FcKkQZRxD5P6JwGv58vGRAcX3CkjbX8oqFiygz6ohceU  Freeze authority: <span class="token punctuation">(</span>not <span class="token builtin class-name">set</span><span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li><code>--decimals</code>：代币小数位数（默认6，如USDC），NFT需设为0</li><li><code>--mint-authority</code>：指定铸币权限账户（默认当前钱包），<code>--no-mint-authority</code>表示永久不可铸币</li><li><code>--freeze-authority</code>：指定冻结权限账户（默认当前钱包），<code>--no-freeze-authority</code>表示永久不可冻结</li></ul><h4 id="2-创建Token-Account（代币持有账户）">2. 创建Token Account（代币持有账户）</h4><p>用户需要关联Mint账户的Token Account才能接收代币，推荐使用ATA（自动关联钱包）：</p> <pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># 创建与当前钱包关联的ATA（自动推导地址）</span> spl-token create-account <span class="token operator">&lt;</span>MINT_ADDRESS<span class="token operator">></span> -------------------- ➜  ~ spl-token create-account 3F14kaMXjdC1mFx5LRdD19amiMneKhgJsmMzGQUJjTt9Creating account 7i8smGYKco3hicJThL8WYrMaGKpceeKkZRekqR4aWKFJSignature: 5AiPVz8Kjc9RYEtMGQAgx8Mdgy8cNiAwnprAHK14JYyciNJr1ufmPu3AQAwXbr5w1hRV1tTbiDDfEQz66yKkvxVy---------------------- <span class="token comment"># 手动指定所有者创建Token Account（非ATA）</span> spl-token create-account <span class="token operator">&lt;</span>MINT_ADDRESS<span class="token operator">></span> <span class="token operator">&lt;</span>OWNER_WALLET_ADDRESS<span class="token operator">></span>  ---------------------➜  ~ spl-token create-account 3F14kaMXjdC1mFx5LRdD19amiMneKhgJsmMzGQUJjTt9 /Users/tinachan/.config/solana/t2.jsonCreating account 2tQibfGH1UX4PEA1dNWJ8zvnpSbKRBr5a5eVhaRxF6EXSignature: 4dvu4YNxgfbEAyGiBxYxDqGHdsEgamZ8MMEE8uNBdoGJWZg3UM4eGk3v4BsEMQADut7VeYx32Ng7p4r4zWL6CMaK --------------------- <span class="token comment"># 命令输出解析：</span> <span class="token comment"># Creating account &lt;TOKEN_ACCOUNT_ADDRESS></span> <span class="token comment"># Signature: &lt;TRANSACTION_SIGNATURE></span> <span class="token comment"># &lt;TOKEN_ACCOUNT_ADDRESS>为新创建的代币持有账户地址</span></code></pre><p>代码中第一个创建的就是ATA，默认关联的token account； 第二个用私钥创建的是非ATA的token account ，两者区别：</p><ol><li>地址生成方式不同</li></ol><ul><li><strong>ATA（自动关联代币账户）</strong>：<br>地址是<strong>通过固定算法推导</strong>出来的，公式为：<br><code>ATA地址 = 基于钱包地址 + Mint地址 + 代币程序ID 推导的唯一地址</code><br>这种推导规则是 Solana 的官方标准，确保一个钱包（所有者）对一个 Mint 只能有<strong>唯一对应的 ATA</strong>。<br>例如：你的钱包地址为<code>A</code>，Mint 地址为<code>M</code>，那么对应的 ATA 地址是唯一确定的，任何人用<code>A</code>和<code>M</code>推导都会得到同一个地址。</li><li><strong>非 ATA Token Account（手动指定所有者）</strong>：<br>地址是<strong>随机生成</strong>的，不遵循上述推导规则。每次执行<code>create-account &lt;MINT&gt; &lt;OWNER&gt;</code>命令，都会生成一个全新的随机地址，即使所有者和 Mint 相同，也会得到不同的地址。</li></ul><ol start="2"><li>与所有者的关联性不同</li></ol><ul><li><strong>ATA</strong>：<br>强制与「创建时的钱包地址」绑定，即 ATA 的<code>所有者（owner）</code>就是该钱包地址，且<strong>无法修改</strong>。<br>一个钱包对一个 Mint 只能有<strong>1 个 ATA</strong>（因为地址唯一），这是钱包管理代币的「默认账户」。</li><li><strong>非 ATA Token Account</strong>：<br>所有者可以是<strong>任意地址</strong>（可以是你的钱包、其他用户的钱包，甚至是智能合约地址），且允许一个所有者对一个 Mint 创建<strong>多个非 ATA 账户</strong>（因为地址随机）。<br>例如：你可以用自己的钱包作为所有者，为同一个 Mint 创建 10 个不同的非 ATA 账户，分别持有不同数量的代币。</li></ul><ol start="3"><li>钱包与 DApp 兼容性不同</li></ol><ul><li><strong>ATA</strong>：<br>遵循 Solana 官方标准，<strong>所有主流钱包（如 Phantom、Solflare）和 DApp 都会自动识别并显示 ATA 中的代币</strong>，无需手动添加地址。<br>例如：你在 Phantom 钱包中看到的某代币余额，实际就是你钱包对应的 ATA 中的余额。</li><li><strong>非 ATA Token Account</strong>：<br>不被钱包自动识别，需要用户<strong>手动添加账户地址</strong>才能在钱包中显示余额。<br>大多数 DApp 也不会默认与非 ATA 交互，需要手动指定账户地址才能进行转账、交易等操作。</li></ul><ol start="4"><li>使用场景不同</li></ol><ul><li><strong>ATA</strong>：<br>适合<strong>普通用户日常使用</strong>，用于接收、存储和管理代币，因为兼容性好、管理简单（一个 Mint 对应一个账户，不易混乱）。<br>例如：别人向你转账某代币时，只需提供你的钱包地址，对方会自动向你的 ATA 转账（因为 ATA 地址可推导）。</li><li><strong>非 ATA Token Account</strong>：<br>适合<strong>特殊场景</strong>，例如：<ul><li>智能合约需要控制代币（将所有者设为合约地址）；</li><li>需将同一 Mint 的代币拆分到多个账户管理（如分账、隔离资金）；</li><li>临时账户（用完即弃）等。</li></ul></li></ul><p>总结来说，ATA 是「标准化、自动关联、易管理」的代币账户，适合大多数日常场景；非 ATA 是「灵活、自定义、需手动管理」的账户，适合特殊需求。实际开发或使用中，优先推荐使用 ATA，除非有明确的特殊场景需要非 ATA。</p><h4 id="3-铸币（增加代币供应量）">3. 铸币（增加代币供应量）</h4><p>只有Mint账户的<code>mint-authority</code>有权限铸币：</p> <pre class="language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># 向指定Token Account铸币100单位（注意小数位，实际金额=数量*10^decimals）</span> spl-token mint <span class="token operator">&lt;</span>MINT_ADDRESS<span class="token operator">></span> <span class="token number">100</span> <span class="token operator">&lt;</span>TOKEN_ACCOUNT_ADDRESS<span class="token operator">></span> <span class="token comment"># 示例：向当前钱包的ATA铸币1000（假设decimals=6，实际为1000 * 10^6 最小单位）</span> spl-token mint <span class="token operator">&lt;</span>MINT_ADDRESS<span class="token operator">></span> <span class="token number">1000</span>  -------- ➜  ~ spl-token mint 3F14kaMXjdC1mFx5LRdD19amiMneKhgJsmMzGQUJjTt9 <span class="token number">100</span>Minting <span class="token number">100</span> tokens  Token: 3F14kaMXjdC1mFx5LRdD19amiMneKhgJsmMzGQUJjTt9  Recipient: 7i8smGYKco3hicJThL8WYrMaGKpceeKkZRekqR4aWKFJSignature: USQP7cDcCip1ePdgKDxEXobBm8ohtaVwDRmGFt2BmDyi3tRQMrxtbvMkXbrUcdkoSNuQ2X9k6u1NNbztHeYY97Y -------- <span class="token comment"># 验证铸币结果</span> spl-token balance <span class="token operator">&lt;</span>MINT_ADDRESS<span class="token operator">></span>  -------- ➜  ~ spl-token balance 3F14kaMXjdC1mFx5LRdD19amiMneKhgJsmMzGQUJjTt9<span class="token number">100</span> --------</code></pre><h4 id="4-代币转账">4. 代币转账</h4> <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从当前钱包的ATA向目标钱包的ATA转账50单位</span>spl-token transfer <span class="token operator">&lt;</span>MINT_ADDRESS<span class="token operator">></span> <span class="token number">50</span> <span class="token operator">&lt;</span>RECIPIENT_WALLET_ADDRESS<span class="token operator">></span> --fund-recipient<span class="token comment"># 参数说明：</span><span class="token comment"># --fund-recipient：自动为接收者创建ATA（若不存在）并支付创建费用</span></code></pre><h4 id="5-销毁代币（减少供应量）">5. 销毁代币（减少供应量）</h4><p>代币持有者可销毁自己持有的代币：</p> <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 销毁当前钱包ATA中的20单位代币</span>spl-token burn <span class="token operator">&lt;</span>TOKEN_ACCOUNT_ADDRESS<span class="token operator">></span> <span class="token number">20</span></code></pre><h4 id="6-查看代币信息">6. 查看代币信息</h4> <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看Mint账户详情（总供应量、权限等）</span>spl-token mint-info <span class="token operator">&lt;</span>MINT_ADDRESS<span class="token operator">></span><span class="token comment"># 查看Token Account详情（余额、所有者等）</span>spl-token account-info <span class="token operator">&lt;</span>TOKEN_ACCOUNT_ADDRESS<span class="token operator">></span></code></pre><h3 id="关键注意事项">关键注意事项</h3><ol><li><strong>权限管理</strong>：Mint账户的铸币/冻结权限默认归创建者，可通过<code>spl-token authorize</code>转移或撤销</li><li><strong>NFT特殊处理</strong>：必须设置<code>--decimals 0</code>，且通常只铸币1个单位（<code>spl-token mint &lt;MINT&gt; 1</code>）</li><li><strong>主网操作</strong>：切换集群为<code>https://api.mainnet-beta.solana.com</code>时，需使用真实SOL支付Gas费</li><li><strong>地址记录</strong>：Mint地址是代币的唯一标识，需妥善保存（可通过<code>solana address -k &lt;MINT_KEYPAIR_FILE&gt;</code>查询）</li></ol><p>通过以上步骤，即可完成从代币创建到转账销毁的全流程操作。实际开发中，可通过Solana Rust SDK或Web3.js调用Token Program的指令实现相同功能。</p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part3]_solana账户&amp;简单的交互</title>
      <link href="/2025/08/06/Solana-part3-solana%E8%B4%A6%E6%88%B7-%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%A4%E4%BA%92/"/>
      <url>/2025/08/06/Solana-part3-solana%E8%B4%A6%E6%88%B7-%E7%AE%80%E5%8D%95%E7%9A%84%E4%BA%A4%E4%BA%92/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=94f63494-6a22-bb2e-ad07-aa1251cfdb35</cover>
      <date>Wed Aug 06 2025 11:01:30 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part3]_solana账户&amp;简单的交互</h1><h2 id="solana-账户">solana 账户</h2><ul><li>数据账户，用来存储数据<ul><li>系统所有账户</li><li>程序派生账户（PDA）</li></ul></li><li>程序账户，用来存储可执行程序（智能合约），其数据字段为程序的字节码，<code>executable</code> 标志为 <code>true</code></li><li>原生账户，指 Solana 上的原生程序，例如：system（系统程序，处理账户创建、转账等基础操作），stake（质押程序），以及 vote（投票程序）</li></ul><h2 id="账户结构体">账户结构体</h2><h3 id="Account">Account</h3><p><code>Account</code> 结构体主要用于客户端（如 RPC 调用）获取账户的完整数据，包含账户的所有核心属性。</p><p>代码示例：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">solana_sdk<span class="token punctuation">::</span>account<span class="token punctuation">::</span></span><span class="token class-name">Account</span><span class="token punctuation">;</span><span class="token comment">// 账户结构体定义（简化版）</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 账户中的lamports数量（Sol的最小单位）</span>    <span class="token keyword">pub</span> lamports<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    <span class="token comment">// 账户存储的二进制数据</span>    <span class="token keyword">pub</span> data<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// 账户所有者的公钥（通常是程序的公钥）</span>    <span class="token keyword">pub</span> owner<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>    <span class="token comment">// 标识该账户是否为可执行程序（程序账户为true，数据账户为false）</span>    <span class="token keyword">pub</span> executable<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>    <span class="token comment">// 下一次需要支付租金的 epoch</span>    <span class="token keyword">pub</span> rent_epoch<span class="token punctuation">:</span> <span class="token class-name">Epoch</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Account-Info">Account Info</h3><p><code>AccountInfo</code> 是智能合约程序中用于访问账户的结构体，包含更多与程序执行相关的元数据（如签名状态、可写性），通常通过参数传递给程序入口函数。</p><p>代码示例：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">solana_program<span class="token punctuation">::</span>account_info<span class="token punctuation">::</span></span><span class="token class-name">AccountInfo</span><span class="token punctuation">;</span><span class="token comment">// 账户信息结构体（简化版）</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 账户的公钥</span>    <span class="token keyword">pub</span> key<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>    <span class="token comment">// 标识该账户是否为交易签名者</span>    <span class="token keyword">pub</span> is_signer<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>    <span class="token comment">// 标识该账户在本次交易中是否可写</span>    <span class="token keyword">pub</span> is_writable<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>    <span class="token comment">// 账户中lamports的可变引用</span>    <span class="token keyword">pub</span> lamports<span class="token punctuation">:</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">mut</span> <span class="token keyword">u64</span><span class="token operator">>></span><span class="token punctuation">,</span>    <span class="token comment">// 账户数据的可变引用</span>    <span class="token keyword">pub</span> data<span class="token punctuation">:</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token punctuation">,</span>    <span class="token comment">// 账户所有者的公钥</span>    <span class="token keyword">pub</span> owner<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>    <span class="token comment">// 标识该账户是否为可执行程序</span>    <span class="token keyword">pub</span> executable<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>    <span class="token comment">// 租金相关的epoch信息</span>    <span class="token keyword">pub</span> rent_epoch<span class="token punctuation">:</span> <span class="token class-name">Epoch</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h3 id="对比">对比</h3><table><thead><tr><th>特性</th><th>Account（客户端）</th><th>AccountInfo（程序内）</th></tr></thead><tbody><tr><td>使用场景</td><td>客户端查询账户数据（如 RPC 返回）</td><td>智能合约中操作账户（函数参数）</td></tr><tr><td>核心数据</td><td>包含账户完整静态数据</td><td>包含数据的可变引用及操作权限标记</td></tr><tr><td>签名 / 可写标记</td><td>无（客户端无需关心交易执行时的权限）</td><td>有（<code>is_signer</code>/<code>is_writable</code>，用于程序验证）</td></tr><tr><td>数据访问方式</td><td>不可变（客户端只读）</td><td>可变引用（程序可修改数据）</td></tr></tbody></table><h2 id="要点">要点</h2><ul><li>账户是用来存放数据的基本单元，所有链上数据均存储在账户中</li><li>每个账户都有一个独一无二的地址（公钥），由 32 字节组成</li><li>每个账户大小不能超过 10MB，且大小是静态的（创建后无法动态扩容，需提前规划）</li><li>账户数据存储需要付租金：如果账户余额低于租金阈值，会被系统回收；若存入足够 lamports（约 2 年租金），可成为<code>rent-exempt</code>（免租金）状态</li><li>默认的账户所有者是<strong>系统程序</strong>（<code>11111111111111111111111111111111</code>），只有所有者程序有权修改账户数据</li></ul><h2 id="程序派生账户（PDA）">程序派生账户（PDA）</h2><p>相关文档：<a href="https://solana.com/zh/docs/core/pda">https://solana.com/zh/docs/core/pda</a></p><p>程序派生账户（PDA）是由智能合约程序通过特定算法生成的特殊账户，无对应私钥，仅由生成它的程序控制。</p><h3 id="注意事项">注意事项</h3><ol><li><strong>不能直接签名交易</strong><br>PDA 没有私钥，无法像普通账户那样签名交易，只能由其关联的程序控制操作（确保安全性）。</li><li><strong>地址碰撞的可能性</strong><br>理论上，相同程序 ID 和种子可能生成相同 PDA 地址（概率极低）。需通过唯一种子（如用户公钥 + 时间戳）避免碰撞。</li><li><strong>种子长度限制</strong><br>种子组合的总长度不能超过 32 字节，超过时需哈希处理（如用<code>sha256</code>压缩）。</li><li><strong>生成成本</strong><br>PDA 通过<code>find_program_address</code>函数生成（内部调用<code>sha256</code>哈希），频繁生成会增加链上计算成本。</li><li><strong>单一程序访问</strong><br>仅生成 PDA 的程序可修改其数据，跨程序共享需特殊设计（如权限委托）。</li><li><strong>存储限制</strong><br>作为数据账户时，大小受 10MB 限制，超大数据需拆分到多个 PDA。</li></ol><h3 id="应用场景">应用场景</h3><ol><li><strong>用户状态管理</strong>：存储用户在 DApp 中的资产、等级等数据</li><li><strong>去中心化金融 (DeFi) 协议</strong>：存储流动性池、借贷记录等</li><li><strong>NFT 元数据存储</strong>：关联 NFT 的属性、创作者信息等</li><li><strong>DAO 投票系统</strong>：记录提案、投票结果等</li><li><strong>时间锁合约</strong>：存储待执行的定时交易</li><li><strong>多签钱包</strong>：存储签名阈值、授权列表等</li><li><strong>去中心化身份验证</strong>：存储用户身份凭证</li></ol><h3 id="生成-PDA-的代码示例">生成 PDA 的代码示例</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">solana_program<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">program_pack<span class="token punctuation">::</span></span><span class="token class-name">Pack</span><span class="token punctuation">,</span> <span class="token namespace">pubkey<span class="token punctuation">::</span></span><span class="token class-name">Pubkey</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 生成PDA</span><span class="token keyword">fn</span> <span class="token function-definition function">create_pda</span><span class="token punctuation">(</span>program_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span> seeds<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token punctuation">(</span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 生成PDA地址和bump（用于确保地址不在Ed25519曲线内）</span>    <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">find_program_address</span><span class="token punctuation">(</span>seeds<span class="token punctuation">,</span> program_id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 示例：用用户公钥和"profile"作为种子生成PDA</span><span class="token keyword">let</span> user_pubkey <span class="token operator">=</span> <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> seeds <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">b"profile"</span><span class="token punctuation">,</span> user_pubkey<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">(</span>pda_address<span class="token punctuation">,</span> bump<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">create_pda</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>program_id<span class="token punctuation">,</span> seeds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"PDA地址: &#123;&#125;"</span><span class="token punctuation">,</span> pda_address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Bump值: &#123;&#125;"</span><span class="token punctuation">,</span> bump<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Rust库">Rust库</h2><ul><li><code>solana_client</code>：客户端库，用于与 Solana RPC 节点交互（查询余额、发送交易等）</li><li><code>solana_sdk</code>：核心 SDK，定义账户、交易、签名等基础结构</li><li><code>solana_program</code>：智能合约开发库，包含程序开发所需的账户操作、指令处理等工具</li></ul><h2 id="实战">实战</h2><ol><li><p>启动本地环境 <code>solana-test-validator</code></p><pre class="language-bash" data-language="bash"><code class="language-bash">➜  ~ solana-test-validatorLedger location: test-ledgerLog: test-ledger/validator.log⠁ Initializing<span class="token punctuation">..</span>.                                                               Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">1</span><span class="token punctuation">..</span>.Identity: GmyJV396jL2hnhcooyMs9U8UeWrBSadDYGbLrd8PvAL6Genesis Hash: ATymZxWB3G7W8Qyjp7AVBLVN2ZLk1ssiWsTNsehNFczAVersion: <span class="token number">2.2</span>.21Shred Version: <span class="token number">31032</span>Gossip Address: <span class="token number">127.0</span>.0.1:1024TPU Address: <span class="token number">127.0</span>.0.1:1027JSON RPC URL: http://127.0.0.1:8899WebSocket PubSub URL: ws://127.0.0.1:8900⠒ 03:14:40 <span class="token operator">|</span> Processed Slot: <span class="token number">21992</span> <span class="token operator">|</span> Confirmed Slot: <span class="token number">21992</span> <span class="token operator">|</span> Finalized Slot: <span class="token number">219</span></code></pre></li><li><p>配置本地环境</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前配置</span>solana config get<span class="token comment"># 切换到本地测试网</span>solana config <span class="token builtin class-name">set</span> <span class="token parameter variable">--url</span> http://127.0.0.1:8899<span class="token comment"># 确认配置生效</span>solana config get<span class="token comment"># 输出应显示RPC URL为本地地址</span></code></pre></li><li><p>创建本地账户</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成新账户（保存到文件）</span>solana-keygen new <span class="token parameter variable">--outfile</span> my-wallet.json<span class="token comment"># 查看账户公钥</span>solana address <span class="token parameter variable">--keypair</span> my-wallet.json</code></pre></li><li><p>给账户空投 SOL</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 向账户空投1 SOL（1 SOL = 1e9 lamports）</span>solana airdrop <span class="token number">1</span> <span class="token operator">&lt;</span>你的账户公钥<span class="token operator">></span> <span class="token parameter variable">--url</span> http://127.0.0.1:8899<span class="token comment"># 检查余额</span>solana balance <span class="token operator">&lt;</span>你的账户公钥<span class="token operator">></span></code></pre></li><li><p>使用sdk</p><ul><li><p>获取账户信息</p><pre class="language-rust" data-language="rust"><code class="language-rust"> <span class="token keyword">use</span> <span class="token namespace">solana_client<span class="token punctuation">::</span>rpc_client<span class="token punctuation">::</span></span><span class="token class-name">RpcClient</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">solana_sdk<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">pubkey<span class="token punctuation">::</span></span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span> signature<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token class-name">FromStr</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建solana连接</span>    <span class="token keyword">let</span> rpc_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8899"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">RpcClient</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>rpc_url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指定你要查询的余额账户公钥</span>    <span class="token comment">// 接收空投账户</span>    <span class="token keyword">let</span> account_pubkey <span class="token operator">=</span> <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token string">"FcKkQZRxD5P6JwGv58vGRAcX3CkjbX8oqFiygz6ohceU"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取账户余额</span>    <span class="token keyword">match</span> client<span class="token punctuation">.</span><span class="token function">get_balance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_pubkey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"账户余额为: &#123;&#125;"</span><span class="token punctuation">,</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"获取账户余额时出错: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>空投sol</p>   <pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">solana_client<span class="token punctuation">::</span>rpc_client<span class="token punctuation">::</span></span><span class="token class-name">RpcClient</span><span class="token punctuation">;</span>   <span class="token keyword">use</span> <span class="token namespace">solana_sdk<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">pubkey<span class="token punctuation">::</span></span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span> signature<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token class-name">FromStr</span><span class="token punctuation">;</span>   <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 创建solana连接</span>       <span class="token keyword">let</span> rpc_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8899"</span><span class="token punctuation">;</span>       <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">RpcClient</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>rpc_url<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 指定你要查询的余额账户公钥</span>       <span class="token comment">// 接收空投账户</span>       <span class="token keyword">let</span> account_pubkey <span class="token operator">=</span> <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token string">"FcKkQZRxD5P6JwGv58vGRAcX3CkjbX8oqFiygz6ohceU"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 定义空投数量</span>       <span class="token keyword">let</span> amount <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1_000_000_000</span><span class="token punctuation">;</span>          <span class="token keyword">match</span> client<span class="token punctuation">.</span><span class="token function">request_airdrop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_pubkey<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Ok</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>               <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"空投成功，签名为: &#123;&#125;"</span><span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>               <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"空投时出错: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>          <span class="token comment">// 获取账户余额</span>       <span class="token keyword">match</span> client<span class="token punctuation">.</span><span class="token function">get_balance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>account_pubkey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Ok</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>               <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"账户余额为: &#123;&#125;"</span><span class="token punctuation">,</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>               <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"获取账户余额时出错: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>   空投成功，签名为<span class="token punctuation">:</span> 36wYSruZNjLDiBvxG2XGNJDEDi2fmSZs9ViwYMAhEPJdpoTJMtdg5gvgRCC4VpXuDogC8YuDywCLE1ffcCDCVVnQ   账户余额为<span class="token punctuation">:</span> <span class="token number">500000000000000000</span></code></pre></li><li><p>转移sol</p>   <pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">solana_client<span class="token punctuation">::</span>rpc_client<span class="token punctuation">::</span></span><span class="token class-name">RpcClient</span><span class="token punctuation">;</span>   <span class="token keyword">use</span> <span class="token namespace">solana_sdk<span class="token punctuation">::</span>signature<span class="token punctuation">::</span></span><span class="token class-name">Signer</span><span class="token punctuation">;</span>   <span class="token keyword">use</span> <span class="token namespace">solana_sdk<span class="token punctuation">::</span>signature<span class="token punctuation">::</span></span>read_keypair_file<span class="token punctuation">;</span>   <span class="token keyword">use</span> <span class="token namespace">solana_sdk<span class="token punctuation">::</span>system_instruction<span class="token punctuation">::</span></span>transfer<span class="token punctuation">;</span>   <span class="token keyword">use</span> <span class="token namespace">solana_sdk<span class="token punctuation">::</span></span>transaction<span class="token punctuation">;</span>   <span class="token keyword">use</span> <span class="token namespace">solana_sdk<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">pubkey<span class="token punctuation">::</span></span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span> signature<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">str</span><span class="token punctuation">::</span><span class="token class-name">FromStr</span><span class="token punctuation">;</span>   <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 创建solana连接s</span>       <span class="token keyword">let</span> rpc_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8899"</span><span class="token punctuation">;</span>       <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token class-name">RpcClient</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>rpc_url<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 设置接收方</span>       <span class="token keyword">let</span> receive <span class="token operator">=</span> <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token string">"6qkpaXM6Q9z9rsJQ4qpHV8soGmw2uVTFdJ8KvHR32GDe"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 设置发送方，需要通过签名获取</span>       <span class="token keyword">let</span> sender <span class="token operator">=</span> <span class="token function">read_keypair_file</span><span class="token punctuation">(</span><span class="token string">"/Users/tinachan/.config/solana/id.json"</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"failed to read keypair file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 定义空投数量 最小单位是lamports</span>       <span class="token keyword">let</span> amount <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1_000_000_000</span><span class="token punctuation">;</span>          <span class="token comment">// 创建转账的指令</span>       <span class="token keyword">let</span> transfer <span class="token operator">=</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sender<span class="token punctuation">.</span><span class="token function">pubkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>receive<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 创建交易</span>       <span class="token keyword">let</span> recent_blockhash <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get_latest_blockhash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">let</span> transaction <span class="token operator">=</span> <span class="token namespace">transaction<span class="token punctuation">::</span></span><span class="token class-name">Transaction</span><span class="token punctuation">::</span><span class="token function">new_signed_with_payer</span><span class="token punctuation">(</span>           <span class="token operator">&amp;</span><span class="token punctuation">[</span>transfer<span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sender<span class="token punctuation">.</span><span class="token function">pubkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>sender<span class="token punctuation">]</span><span class="token punctuation">,</span>           recent_blockhash<span class="token punctuation">,</span>       <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">let</span> result <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">send_and_confirm_transaction</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">match</span> result <span class="token punctuation">&#123;</span>           <span class="token class-name">Ok</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>               <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"交易成功，签名为: &#123;&#125;"</span><span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>               <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"交易时出错: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>   交易成功，签名为<span class="token punctuation">:</span> 5yPGuuN7hbVqv1wTvsSryYG6rfaW6FNWTyih2PpwpSPxywjZ6LLMBGxdTjo59ZDdt8DfPShiq4KU4KXXvPBbevLc</code></pre></li></ul><p>总结：（代补充）</p><p>​</p></li><li><p>通过JsonRpc获取账户信息 <a href="https://solana.com/zh/docs/rpc/http/getaccountinfo">https://solana.com/zh/docs/rpc/http/getaccountinfo</a></p><ul><li><p>查看官网文档，挑选getaccountinfo来玩玩</p><pre class="language-json" data-language="json"><code class="language-json">curl https<span class="token operator">:</span><span class="token comment">//api.devnet.solana.com -s -X \</span>  POST -H <span class="token string">"Content-Type: application/json"</span> -d '   <span class="token punctuation">&#123;</span>    <span class="token property">"jsonrpc"</span><span class="token operator">:</span> <span class="token string">"2.0"</span><span class="token punctuation">,</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"method"</span><span class="token operator">:</span> <span class="token string">"getAccountInfo"</span><span class="token punctuation">,</span>    <span class="token property">"params"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#123;</span>        <span class="token property">"commitment"</span><span class="token operator">:</span> <span class="token string">"finalized"</span><span class="token punctuation">,</span>        <span class="token property">"encoding"</span><span class="token operator">:</span> <span class="token string">"base58"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>'</code></pre></li><li><p>替换自己的账户pubkey以及本地运行链接</p><pre class="language-bash" data-language="bash"><code class="language-bash">➜  sol git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">curl</span> http://127.0.0.1:8899 <span class="token parameter variable">-s</span> <span class="token parameter variable">-X</span> <span class="token punctuation">\</span>  POST <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token parameter variable">-d</span> <span class="token string">'  &#123;    "jsonrpc": "2.0",    "id": 1,    "method": "getAccountInfo",    "params": [      "6qkpaXM6Q9z9rsJQ4qpHV8soGmw2uVTFdJ8KvHR32GDe",      &#123;        "commitment": "finalized",        "encoding": "base58"      &#125;    ]  &#125;'</span><span class="token punctuation">&#123;</span><span class="token string">"jsonrpc"</span><span class="token builtin class-name">:</span><span class="token string">"2.0"</span>,<span class="token string">"result"</span>:<span class="token punctuation">&#123;</span><span class="token string">"context"</span>:<span class="token punctuation">&#123;</span><span class="token string">"apiVersion"</span><span class="token builtin class-name">:</span><span class="token string">"2.2.21"</span>,<span class="token string">"slot"</span>:33045<span class="token punctuation">&#125;</span>,<span class="token string">"value"</span>:<span class="token punctuation">&#123;</span><span class="token string">"data"</span>:<span class="token punctuation">[</span><span class="token string">""</span>,<span class="token string">"base58"</span><span class="token punctuation">]</span>,<span class="token string">"executable"</span>:false,<span class="token string">"lamports"</span>:1000000000,<span class="token string">"owner"</span><span class="token builtin class-name">:</span><span class="token string">"11111111111111111111111111111111"</span>,<span class="token string">"rentEpoch"</span>:18446744073709551615,<span class="token string">"space"</span>:0<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>,<span class="token string">"id"</span>:1<span class="token punctuation">&#125;</span></code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part2]_Solana开发入门</title>
      <link href="/2025/08/05/Solana-part2-Solana%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/"/>
      <url>/2025/08/05/Solana-part2-Solana%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=7d444edd-fc1b-c9ce-5a1f-d4c49946d452</cover>
      <date>Tue Aug 05 2025 14:47:13 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part2]_Solana开发入门</h1><h2 id="虚拟机">虚拟机</h2><p>Solana的执行环境与其他区块链存在显著差异，其虚拟机架构是实现高吞吐量的核心基础之一：</p><ul><li><strong>EVM（Ethereum Virtual Machine）</strong>：以太坊等区块链采用的虚拟机，基于栈式架构，Solana不直接支持EVM，但可通过跨链桥或兼容层（如Neon EVM）实现EVM合约迁移。</li><li><strong>WASM（WebAssembly）</strong>：通用二进制指令格式，Solana早期曾考虑采用，但最终选择了更轻量的方案。</li><li><strong>Sealevel VM</strong>：Solana原生虚拟机，支持<strong>并行执行</strong>（区别于EVM的串行执行），是Solana高TPS（每秒交易数）的关键，可同时处理数千个独立合约调用。</li><li><strong>BPF扩展指令集</strong>：Sealevel VM基于BPF（Berkeley Packet Filter）扩展，具有高效、安全、低资源占用的特点，适合区块链场景的沙箱执行环境。</li></ul><h2 id="项目搭建">项目搭建</h2><h3 id="1-Native-Rust开发（原生开发方式）">1. Native Rust开发（原生开发方式）</h3><p>直接使用Rust编写Solana合约，适合深入理解底层机制。</p><h4 id="环境准备">环境准备</h4><ul><li>安装Rust：<code>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</code></li><li>安装Solana CLI：<code>sh -c &quot;$(curl -sSfL https://release.solana.com/v1.18.4/install)&quot;</code>（版本号可按需更新）</li><li>配置网络：<code>solana config set --url https://api.devnet.solana.com</code>（使用devnet测试网）</li><li>获取测试网SOL（用于支付gas）：<code>solana airdrop 1</code>（每次最多1 SOL，不足可重复申请）</li></ul><h4 id="步骤详解">步骤详解</h4><ol><li><p><strong>创建项目</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> new <span class="token parameter variable">--lib</span> native-rust <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> native-rust<span class="token function">cargo</span> <span class="token function">add</span> solana-program  <span class="token comment"># 添加Solana合约核心依赖</span></code></pre></li><li><p><strong>修改编译配置</strong><br>编辑<code>Cargo.toml</code>，指定输出为动态链接库（Solana合约要求）：</p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token comment"># 顶部添加（解决edition2024兼容问题）</span><span class="token key property">cargo-features</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"edition2024"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"native-rust"</span><span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.1.0"</span><span class="token key property">edition</span> <span class="token punctuation">=</span> <span class="token string">"2024"</span>  <span class="token comment"># 需与cargo-features对应</span><span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span><span class="token key property">crate-type</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"cdylib"</span><span class="token punctuation">,</span> <span class="token string">"lib"</span><span class="token punctuation">]</span>  <span class="token comment"># 输出为动态链接库</span><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">solana-program</span> <span class="token punctuation">=</span> <span class="token string">"1.18.0"</span>  <span class="token comment"># 建议指定明确版本</span></code></pre></li><li><p><strong>编写基础合约</strong><br>编辑<code>src/lib.rs</code>，实现合约入口函数（Solana合约必须包含<code>entrypoint!</code>宏定义的入口）：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">solana_program<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>    entrypoint<span class="token punctuation">,</span>    <span class="token namespace">account_info<span class="token punctuation">::</span></span><span class="token class-name">AccountInfo</span><span class="token punctuation">,</span>    <span class="token namespace">entrypoint<span class="token punctuation">::</span></span><span class="token class-name">ProgramResult</span><span class="token punctuation">,</span>    msg<span class="token punctuation">,</span>  <span class="token comment">// 用于日志输出（链上可见）</span>    <span class="token namespace">pubkey<span class="token punctuation">::</span></span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义入口函数</span><span class="token macro property">entrypoint!</span><span class="token punctuation">(</span>process_instruction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/// 合约核心逻辑</span><span class="token comment">/// 参数说明：</span><span class="token comment">/// - program_id: 合约本身的公钥</span><span class="token comment">/// - accounts: 本次交互涉及的账户列表</span><span class="token comment">/// - instruction_data: 传入的指令数据（二进制）</span><span class="token keyword">fn</span> <span class="token function-definition function">process_instruction</span><span class="token punctuation">(</span>    program_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span>    accounts<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">AccountInfo</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    instruction_data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">ProgramResult</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 链上日志（可通过solana logs查看）</span>    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">"Hello Solana!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">"Program ID: &#123;&#125;"</span><span class="token punctuation">,</span> program_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">"Accounts involved: &#123;:?&#125;"</span><span class="token punctuation">,</span> accounts<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">"Instruction data length: &#123;&#125;"</span><span class="token punctuation">,</span> instruction_data<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 返回成功结果</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>构建合约</strong><br>使用Solana的BPF编译器编译（生成<code>.so</code>文件）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> build-sbf  <span class="token comment"># 编译为Solana兼容的BPF格式</span></code></pre><p>编译成功后，输出文件路径：<code>target/sbpf-solana-solana/release/native_rust.so</code></p></li><li><p><strong>部署与验证</strong></p><ul><li><p>部署到测试网：</p><pre class="language-bash" data-language="bash"><code class="language-bash">solana program deploy target/sbpf-solana-solana/release/native_rust.so</code></pre><p>部署成功后会返回<code>Program Id: &lt;YOUR_PROGRAM_ID&gt;</code>（记录此ID用于后续交互）。</p></li><li><p>验证部署：</p><pre class="language-bash" data-language="bash"><code class="language-bash">solana program show <span class="token operator">&lt;</span>YOUR_PROGRAM_ID<span class="token operator">></span>  <span class="token comment"># 查看合约状态</span></code></pre></li></ul></li><li><p><strong>合约管理</strong></p><ul><li>升级合约（需提前配置升级权限）：<pre class="language-bash" data-language="bash"><code class="language-bash">solana program upgrade <span class="token operator">&lt;</span>new_so_file<span class="token operator">></span> <span class="token operator">&lt;</span>YOUR_PROGRAM_ID<span class="token operator">></span> --upgrade-authority <span class="token operator">&lt;</span>AUTHORITY_KEYPAIR<span class="token operator">></span></code></pre></li><li>关闭合约（回收存储空间，需合约所有者权限）：<pre class="language-bash" data-language="bash"><code class="language-bash">solana program close <span class="token operator">&lt;</span>YOUR_PROGRAM_ID<span class="token operator">></span></code></pre></li></ul></li></ol><h4 id="常见问题">常见问题</h4><ul><li>编译报错<code>feature edition2024 is required</code>：确保<code>Cargo.toml</code>顶部添加了<code>cargo-features = [&quot;edition2024&quot;]</code>。</li><li>部署失败<code>Insufficient funds</code>：通过<code>solana airdrop 1</code>获取更多测试网SOL。</li><li>日志无法查看：使用<code>solana logs --url https://api.devnet.solana.com</code>监听链上日志。</li></ul><h3 id="2-Playground（在线开发工具）">2. Playground（在线开发工具）</h3><p>适合快速原型开发，无需本地环境配置，推荐新手入门使用。</p><h4 id="操作步骤">操作步骤</h4><ol><li>访问在线IDE：<a href="https://beta.solpg.io/">Solana Playground</a></li><li>点击<code>New Project</code> → 选择<code>Solana Program</code>，自动生成基础框架。</li><li>编辑<code>src/lib.rs</code>（同Native方式的合约逻辑）。</li><li>连接钱包：点击左侧<code>Build &amp; Deploy</code> → <code>Connect Wallet</code>（推荐使用Phantom钱包，切换到devnet）。</li><li>构建部署：点击<code>Build</code>编译，成功后点击<code>Deploy</code>，等待部署完成（需支付少量gas）。</li><li>查看部署详情：部署成功后，左下角会显示<code>Program ID</code>，点击链接可在Solana Explorer中查看合约信息。</li></ol><h4 id="交互示例（客户端）">交互示例（客户端）</h4><p>通过自动生成的<code>client.ts</code>（TypeScript）与合约交互：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Connection<span class="token punctuation">,</span> PublicKey<span class="token punctuation">,</span> Transaction<span class="token punctuation">,</span> SystemProgram <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@solana/web3.js"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> sendTransaction <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./utils/sendTransaction"</span><span class="token punctuation">;</span><span class="token comment">// 合约地址（替换为你的Program ID）</span><span class="token keyword">const</span> <span class="token constant">PROGRAM_ID</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicKey</span><span class="token punctuation">(</span><span class="token string">"YOUR_PROGRAM_ID"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span><span class="token string">"https://api.devnet.solana.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> payer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> window<span class="token punctuation">.</span>solana<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>publicKey<span class="token punctuation">;</span>  <span class="token comment">// 构建交易</span>  <span class="token keyword">const</span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    programId<span class="token operator">:</span> <span class="token constant">PROGRAM_ID</span><span class="token punctuation">,</span>    keys<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> pubkey<span class="token operator">:</span> payer<span class="token punctuation">,</span> isSigner<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> isWritable<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 传入 payer 账户</span>    data<span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 空指令数据</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 发送交易</span>  <span class="token keyword">const</span> signature <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Transaction signature:"</span><span class="token punctuation">,</span> signature<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"View on Explorer: https://explorer.solana.com/tx/"</span> <span class="token operator">+</span> signature <span class="token operator">+</span> <span class="token string">"?cluster=devnet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>点击<code>Run</code>执行客户端代码，在控制台查看交易结果。</p><h3 id="3-Anchor（开发框架）">3. Anchor（开发框架）</h3><p>Anchor是Solana生态最流行的开发框架，简化了合约编写、测试和部署流程，内置类型安全和序列化工具。</p><h4 id="环境安装">环境安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装Anchor CLI</span><span class="token function">cargo</span> <span class="token function">install</span> <span class="token parameter variable">--git</span> https://github.com/coral-xyz/anchor anchor-cli <span class="token parameter variable">--locked</span><span class="token comment"># 验证安装</span>anchor <span class="token parameter variable">--version</span>  <span class="token comment"># 需显示0.29.0+版本</span><span class="token comment"># 安装yarn</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">yarn</span>或者brew <span class="token function">install</span> <span class="token function">yarn</span> <span class="token comment"># 这个会默认系统配置</span></code></pre><h4 id="项目操作">项目操作</h4><ol><li><p><strong>创建项目</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">anchor init anchor-project <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> anchor-project</code></pre><p>项目结构：</p><pre class="language-none"><code class="language-none">anchor-project&#x2F;├── programs&#x2F;          # 合约代码（Rust）│   └── anchor_project&#x2F;├── tests&#x2F;             # 测试代码（TypeScript）├── migrations&#x2F;        # 部署脚本├── Anchor.toml        # 项目配置（网络、合约地址等）└── Cargo.toml         # 依赖管理</code></pre></li><li><p><strong>编写合约（以计数器为例）</strong><br>编辑<code>programs/anchor_project/src/lib.rs</code>：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">anchor_lang<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// 声明程序ID（需与Anchor.toml中一致）</span><span class="token macro property">declare_id!</span><span class="token punctuation">(</span><span class="token string">"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[program]</span><span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">anchor_project</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化计数器</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">initialize</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">Initialize</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>counter<span class="token punctuation">;</span>        counter<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 初始值为0</span>        <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">"Counter initialized! Current count: &#123;&#125;"</span><span class="token punctuation">,</span> counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 增加计数</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">increment</span><span class="token punctuation">(</span>ctx<span class="token punctuation">:</span> <span class="token class-name">Context</span><span class="token operator">&lt;</span><span class="token class-name">Increment</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> ctx<span class="token punctuation">.</span>accounts<span class="token punctuation">.</span>counter<span class="token punctuation">;</span>        counter<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">"Count incremented! New count: &#123;&#125;"</span><span class="token punctuation">,</span> counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化时的账户约束</span><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Initialize</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 计数器账户（需要存储数据，因此is_writable=true）</span>    <span class="token attribute attr-name">#[account(init, payer = user, space = 8 + 8)]</span>  <span class="token comment">// 8字节 discriminator + 8字节u64</span>    <span class="token keyword">pub</span> counter<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Counter</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// 支付者（签名者）</span>    <span class="token attribute attr-name">#[account(mut)]</span>    <span class="token keyword">pub</span> user<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span><span class="token punctuation">,</span>    <span class="token comment">// 系统程序（用于创建账户）</span>    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 增加计数时的账户约束</span><span class="token attribute attr-name">#[derive(Accounts)]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Increment</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token attribute attr-name">#[account(mut)]</span>  <span class="token comment">// 可写（需要修改count）</span>    <span class="token keyword">pub</span> counter<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'info</span><span class="token punctuation">,</span> <span class="token class-name">Counter</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 计数器数据结构</span><span class="token attribute attr-name">#[account]</span><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Counter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>配置网络</strong><br>编辑<code>Anchor.toml</code>，指定部署网络：</p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">provider</span><span class="token punctuation">]</span><span class="token key property">cluster</span> <span class="token punctuation">=</span> <span class="token string">"devnet"</span>  <span class="token comment"># 可选：localnet, testnet, mainnet-beta</span><span class="token key property">wallet</span> <span class="token punctuation">=</span> <span class="token string">"~/.config/solana/id.json"</span>  <span class="token comment"># 本地钱包路径</span><span class="token punctuation">[</span><span class="token table class-name">programs.devnet</span><span class="token punctuation">]</span><span class="token key property">anchor_project</span> <span class="token punctuation">=</span> <span class="token string">"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS"</span>  <span class="token comment"># 程序ID（需与合约中一致）</span></code></pre></li><li><p><strong>测试合约</strong><br>编辑<code>tests/anchor_project.ts</code>编写测试用例：</p><pre class="language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> anchor <span class="token keyword">from</span> <span class="token string">"@coral-xyz/anchor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Program <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@coral-xyz/anchor"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> AnchorProject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../target/types/anchor_project"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> expect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"chai"</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"anchor-project"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 配置Anchor provider和program</span>  <span class="token keyword">const</span> provider <span class="token operator">=</span> anchor<span class="token punctuation">.</span>AnchorProvider<span class="token punctuation">.</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  anchor<span class="token punctuation">.</span><span class="token function">setProvider</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> program <span class="token operator">=</span> anchor<span class="token punctuation">.</span>workspace<span class="token punctuation">.</span>AnchorProject <span class="token keyword">as</span> Program<span class="token operator">&lt;</span>AnchorProject<span class="token operator">></span><span class="token punctuation">;</span>    <span class="token comment">// 为每个测试生成一个新的账户密钥对</span>  <span class="token keyword">let</span> counterKeypair<span class="token operator">:</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>Keypair<span class="token punctuation">;</span>  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    counterKeypair <span class="token operator">=</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>Keypair<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"Initialize counter"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 调用initialize方法</span>    <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        counter<span class="token operator">:</span> counterKeypair<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>        user<span class="token operator">:</span> provider<span class="token punctuation">.</span>wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>        systemProgram<span class="token operator">:</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>SystemProgram<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">signers</span><span class="token punctuation">(</span><span class="token punctuation">[</span>counterKeypair<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Your transaction signature"</span><span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取counter账户并验证初始值</span>    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>account<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>counterKeypair<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Initial count:"</span><span class="token punctuation">,</span> counter<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"Increment counter"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 首先初始化账户</span>    <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        counter<span class="token operator">:</span> counterKeypair<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>        user<span class="token operator">:</span> provider<span class="token punctuation">.</span>wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>        systemProgram<span class="token operator">:</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>SystemProgram<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">signers</span><span class="token punctuation">(</span><span class="token punctuation">[</span>counterKeypair<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用increment方法</span>    <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         counter<span class="token operator">:</span> counterKeypair<span class="token punctuation">.</span>publicKey       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Your transaction signature"</span><span class="token punctuation">,</span> tx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取counter账户并验证计数增加</span>    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>account<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>counterKeypair<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"After increment:"</span><span class="token punctuation">,</span> counter<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"Increment counter multiple times"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 首先初始化账户</span>    <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        counter<span class="token operator">:</span> counterKeypair<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>        user<span class="token operator">:</span> provider<span class="token punctuation">.</span>wallet<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>        systemProgram<span class="token operator">:</span> anchor<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>SystemProgram<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">signers</span><span class="token punctuation">(</span><span class="token punctuation">[</span>counterKeypair<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 多次调用increment方法</span>    <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         counter<span class="token operator">:</span> counterKeypair<span class="token punctuation">.</span>publicKey       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         counter<span class="token operator">:</span> counterKeypair<span class="token punctuation">.</span>publicKey       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> program<span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">accounts</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>         counter<span class="token operator">:</span> counterKeypair<span class="token punctuation">.</span>publicKey       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">rpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取counter账户并验证计数</span>    <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token keyword">await</span> program<span class="token punctuation">.</span>account<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>counterKeypair<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">toNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"After 3 increments:"</span><span class="token punctuation">,</span> counter<span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行测试：</p><pre class="language-bash" data-language="bash"><code class="language-bash">anchor <span class="token builtin class-name">test</span>  <span class="token comment"># 自动启动本地节点，运行测试后关闭</span></code></pre><p>测试完成：</p><pre class="language-bash" data-language="bash"><code class="language-bash">anchor-projectYour transaction signature 3DBSMCVTW65CDsuPLx4jB3CosozZSjQbCurXo2KcfMSkfr2nZRHz5XQuEzEXr56bf1qY2MVsoYuQsYePwAuLLY4FInitial count: <span class="token number">0</span> ✔ Initialize counter <span class="token punctuation">(</span>592ms<span class="token punctuation">)</span>Your transaction signature 36wPyPxho2rGRiRxM2ihF2cvfKENbNFKzNEr3ida4mEVeiRSmnEMbKqeg7BuTWdiDeKzd7dktn5WjbpNv4mWhNnFAfter increment: <span class="token number">1</span> ✔ Increment counter <span class="token punctuation">(</span>915ms<span class="token punctuation">)</span>After <span class="token number">3</span> increments: <span class="token number">3</span> ✔ Increment counter multiple <span class="token builtin class-name">times</span> <span class="token punctuation">(</span>1905ms<span class="token punctuation">)</span> <span class="token number">3</span> passing <span class="token punctuation">(</span>3s<span class="token punctuation">)</span></code></pre></li><li><p><strong>部署合约</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">anchor deploy  <span class="token comment"># 部署到Anchor.toml指定的网络</span>-------------➜  anchor-project anchor deployError: error sending request <span class="token keyword">for</span> url <span class="token punctuation">(</span>http://127.0.0.1:8899/<span class="token punctuation">)</span>: error trying to connect: tcp connect error: Connection refused <span class="token punctuation">(</span>os error <span class="token number">61</span><span class="token punctuation">)</span>Caused by:    <span class="token number">0</span>: error sending request <span class="token keyword">for</span> url <span class="token punctuation">(</span>http://127.0.0.1:8899/<span class="token punctuation">)</span>: error trying to connect: tcp connect error: Connection refused <span class="token punctuation">(</span>os error <span class="token number">61</span><span class="token punctuation">)</span>    <span class="token number">1</span>: error trying to connect: tcp connect error: Connection refused <span class="token punctuation">(</span>os error <span class="token number">61</span><span class="token punctuation">)</span>    <span class="token number">2</span>: tcp connect error: Connection refused <span class="token punctuation">(</span>os error <span class="token number">61</span><span class="token punctuation">)</span>    <span class="token number">3</span>: Connection refused <span class="token punctuation">(</span>os error <span class="token number">61</span><span class="token punctuation">)</span></code></pre><p>部署失败，发现没有切换 devnet</p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">provider</span><span class="token punctuation">]</span><span class="token key property">cluster</span> <span class="token punctuation">=</span> <span class="token string">"devnet"</span>                  <span class="token comment"># 可选：localnet, testnet, mainnet-beta</span><span class="token key property">wallet</span> <span class="token punctuation">=</span> <span class="token string">"~/.config/solana/id.json"</span> <span class="token comment"># 本地钱包路径</span></code></pre><p>部署成功后，会返回<code>Program Id: &lt;DEPLOYED_PROGRAM_ID&gt;</code>，可在Solana Explorer中查看。</p><pre class="language-bash" data-language="bash"><code class="language-bash">➜  anchor-project anchor deployDeploying cluster: https://api.devnet.solana.comUpgrade authority: /Users/tinachan/.config/solana/id.jsonDeploying program <span class="token string">"anchor_project"</span><span class="token punctuation">..</span>.Program path: /Users/tinachan/rust/anchor-project/target/deploy/anchor_project.so<span class="token punctuation">..</span>.Program Id: HDvugLuzT7XtdaskGkYw9DJZqNLtDLeVXfMeET9bne9ySignature: 4ArrCsQQu4zCU7455yeoo3L5LvTiWngXq3gMCHoA42Z25tSHgMrVKPiQd4yhSvu37n28cwWPysrDiMAMfA21BNfFDeploy success</code></pre><p><img src="https://img.soniachen.com/blog/posts/2025/08/image-20250805231022756.png" alt="image-20250805231022756"></p></li></ol><h4 id="优势总结">优势总结</h4><ul><li>自动处理账户序列化/反序列化（无需手动处理二进制数据）。</li><li>内置测试框架，支持TypeScript测试合约。</li><li>简化账户权限管理（通过<code>#[derive(Accounts)]</code>约束）。</li><li>自动生成客户端SDK（<code>target/types/</code>目录下），方便前端集成。</li></ul><h3 id="踩坑">踩坑</h3><ol><li><strong>程序ID不匹配问题</strong>：<ul><li>Rust代码中的[declare_id!](javascript:void(0))与Anchor.toml中的程序ID不一致</li><li>我们将Rust代码中的程序ID从<code>Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS</code>更新为<code>5vhtLSUBXoqe3a2Kxtx8tcNdTNTaXaSgFT7MGN1bWxz5</code>，与Anchor.toml保持一致</li></ul></li><li><strong>测试环境配置问题</strong>：<ul><li>将Anchor.toml中的[cluster](javascript:void(0))从<code>devnet</code>改为<code>localnet</code>，这样测试可以在本地运行而不需要连接到Devnet</li></ul></li><li><strong>断言比较问题</strong>：<ul><li>Solana程序返回的数字是BN（BigNumber）类型，而我们之前直接与JavaScript数字比较</li><li>通过使用<code>.toNumber()</code>方法将BN类型转换为普通数字进行比较，解决了断言失败问题</li></ul></li><li><strong>依赖安装</strong>：<ul><li>确保安装了chai依赖以支持测试断言 <code>npm install chai</code></li></ul></li></ol><h2 id="总结">总结</h2><ul><li><strong>Native Rust</strong>：适合深入理解Solana底层，灵活性高但开发效率低。</li><li><strong>Playground</strong>：适合快速验证想法，无需配置环境，适合新手入门。</li><li><strong>Anchor</strong>：生产环境首选，大幅提升开发效率，生态工具丰富。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solana[part1]_SOL基础</title>
      <link href="/2025/08/04/Solana-part1-SOL%E4%B8%AD%E7%9A%84Rust%E6%BA%90%E7%A0%81%E6%A6%82%E8%A7%88%EF%BC%8C%E4%BB%A5%E5%8F%8ARust%E5%9C%A8%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2025/08/04/Solana-part1-SOL%E4%B8%AD%E7%9A%84Rust%E6%BA%90%E7%A0%81%E6%A6%82%E8%A7%88%EF%BC%8C%E4%BB%A5%E5%8F%8ARust%E5%9C%A8%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=b6d8eddc-02f4-bd5a-df42-a8be7caa3abc</cover>
      <date>Mon Aug 04 2025 15:19:03 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Solana[part1]_SOL基础</h1><h2 id="一、Solana概述">一、Solana概述</h2><p>Solana是一个高性能的公链系统，核心特点体现在以下几个方面：</p><ul><li><strong>共识协议</strong>：采用独特的历史证明（POH）与权益证明（PoS）结合的共识机制，兼顾安全性与高效性。</li><li><strong>高性能架构</strong>：通过优化数据传输、并行处理等技术，支持每秒数万笔交易（TPS），远超传统公链。</li><li><strong>高并发处理</strong>：采用账户模型与事务隔离设计，实现多笔交易的并行验证与执行。</li><li><strong>低延迟</strong>：得益于POH的时间戳机制，交易确认延迟可低至秒级。</li></ul><h3 id="1-1-核心模块">1.1 核心模块</h3><ul><li><strong>Runtime模块</strong>：作为Solana的运行时核心，负责管理所有账户的状态（包括余额、数据存储等），并调度智能合约的执行流程，确保交易按规则有序处理。</li><li><strong>Programs模块</strong>：即Solana的智能合约层，包含多个核心程序：<ul><li><strong>Token Program</strong>：Solana生态中代币发行、转账、授权的基础程序，兼容SPL标准代币（类似以太坊的ERC-20）。</li><li><strong>Stake Program</strong>：用于验证节点的质押管理，支持SOL代币质押、解除质押及收益分配等操作。</li></ul></li></ul><h3 id="1-2-Rust在Solana中的应用">1.2 Rust在Solana中的应用</h3><p>Rust是Solana智能合约开发的首选语言，核心原因包括：</p><ul><li><strong>内存安全性</strong>：Rust的所有权机制和借用检查器可避免空指针、缓冲区溢出等内存错误，确保智能合约在去中心化环境中稳定运行。</li><li><strong>高性能</strong>：编译型语言特性使Rust代码执行效率接近C/C++，适配Solana高TPS的性能需求。</li><li><strong>类型安全</strong>：强类型系统减少运行时错误，降低智能合约漏洞风险（如逻辑漏洞、重入攻击等）。</li><li><strong>生态适配</strong>：Solana提供了完整的Rust开发工具链（如Anchor框架），简化合约编写、测试与部署流程。</li></ul><h2 id="二、SOL在区块链生态系统中的地位">二、SOL在区块链生态系统中的地位</h2><ul><li><strong>高性能标杆</strong>：Solana以高TPS和低延迟成为去中心化应用（dAPP）的重要载体，尤其适合高频交易、游戏、DeFi等对性能敏感的场景。</li><li><strong>生态扩展性</strong>：支持NFT、DeFi、Web3应用等多元场景，拥有大量开发者工具（如Phantom钱包、Solscan区块浏览器）和基础设施。</li><li><strong>市场认可度</strong>：SOL作为其原生代币，是市值排名前列的加密资产，广泛用于支付手续费、质押验证节点及生态内价值流转。</li></ul><h2 id="三、SOL的历史、未来及发展">三、SOL的历史、未来及发展</h2><ul><li><strong>历史里程碑</strong>：<ul><li>2017年由Anatoly Yakovenko创立，核心团队多来自高通、英特尔等科技公司。</li><li>2020年主网上线，凭借POH技术迅速获得关注。</li><li>2021-2022年生态爆发，NFT和DeFi项目快速增长，成为主流公链之一。</li></ul></li><li><strong>未来方向</strong>：<ul><li>进一步优化共识机制，提升去中心化程度（如减少验证节点门槛）。</li><li>扩展跨链互操作性，支持与以太坊、Avalanche等公链的资产与数据交互。</li><li>降低开发门槛，吸引更多开发者参与生态建设。</li></ul></li></ul><h2 id="四、SOL的架构和常见名词概念">四、SOL的架构和常见名词概念</h2><h3 id="4-1-常见概念">4.1 常见概念</h3><ul><li><strong>accounts（账户）</strong>：Solana中数据存储的基本单元，不仅包含钱包地址（如solfare、Backpack等钱包管理的账户），还存储智能合约数据、代币余额等信息。每个账户有唯一的公钥（address），需支付租约费用以维持存储。</li><li><strong>合约（Programs）</strong>：即智能合约，由Rust编写并编译为字节码，部署后通过交易触发执行，修改账户状态。</li><li><strong>验证器（Validator）</strong>：维护Solana网络的节点，负责验证交易、生成区块并参与共识，通过质押SOL获得出块权限和奖励。</li><li><strong>区块浏览器</strong>：用于查询交易、账户、区块等信息的工具（如Solscan、Solana Explorer），支持主网、测试网（devnet/testnet）查询。</li><li><strong>address（地址）</strong>：账户的唯一标识符，由公钥生成（通常为Base58编码的字符串），用于接收转账或标识合约。</li><li><strong>transfer（转账）</strong>：通过交易将SOL或SPL代币从一个账户转移到另一个账户，需支付手续费（fee）。</li><li><strong>dAPP（去中心化应用）</strong>：基于Solana公链开发的应用，如去中心化交易所（DEX）、NFT市场等，依赖智能合约实现逻辑。</li><li><strong>fee（手续费）</strong>：用户发起交易时支付给验证节点的费用，取决于交易复杂度和网络拥堵程度。</li><li><strong>block（区块）</strong>：验证节点打包交易的集合，包含多个交易及POH时间戳，确保交易顺序可追溯。</li><li><strong>租约（rent）</strong>：Solana通过租约机制维持账户存储，账户余额高于阈值时可免租，否则会被回收。</li><li><strong>签名（signature）</strong>：交易发起者用私钥对交易进行签名，证明交易合法性，验证节点通过公钥验证签名。</li><li><strong>钱包（wallet）</strong>：管理账户私钥的工具，支持生成地址、签名交易、查询余额等功能（如Phantom、Solflare）。</li></ul><h3 id="4-2-8大核心技术">4.2 8大核心技术</h3><ol><li><strong>POH（历史证明）</strong>：Solana的创新时间戳机制，通过哈希链记录事件顺序，无需全节点同步即可确定交易先后，大幅提升共识效率。</li><li><strong>Turbine（涡轮机）</strong>：数据传输协议，将区块数据分片并通过节点网络并行传输，解决大区块同步瓶颈。</li><li><strong>Gulf Stream（湾流）</strong>：交易预执行机制，验证节点在收到交易前提前缓存并预执行，减少确认延迟。</li><li><strong>Sealevel</strong>：并行交易处理引擎，支持多笔不冲突的交易同时执行（基于账户隔离），提升TPS。</li><li><strong>Pipelining（流水线）</strong>：将交易处理拆分为“验证-执行-打包”等阶段，通过流水线并行处理，优化节点资源利用率。</li><li><strong>Cloudbreak</strong>：存储优化技术，将历史数据压缩并分布式存储，降低全节点存储成本。</li><li><strong>Reed-Solomon</strong>：数据冗余编码算法，通过纠错码确保数据在传输或存储中发生错误时可恢复，提升网络健壮性。</li><li><strong>Archivers（归档节点）</strong>：专门存储历史区块数据的节点，减轻验证节点的存储压力，确保链上数据可追溯。</li></ol><h2 id="五、本地环境搭建">五、本地环境搭建</h2><h3 id="5-1-环境准备">5.1 环境准备</h3><ol><li><p><strong>安装依赖工具</strong>：</p><ul><li>macOS：安装Xcode命令行工具</li></ul>  <pre class="language-bash" data-language="bash"><code class="language-bash">xcode-select <span class="token parameter variable">--install</span>  <span class="token comment"># 安装工具链</span>xcode-select <span class="token parameter variable">-p</span>  <span class="token comment"># 验证安装（输出路径即成功）</span></code></pre><ul><li>Windows：通过WSL（Windows Subsystem for Linux）模拟Linux环境，再执行后续步骤。</li></ul></li><li><p><strong>安装Rust</strong>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--proto</span> <span class="token string">'=https'</span> <span class="token parameter variable">--tlsv1.2</span> <span class="token parameter variable">-sSf</span> https://sh.rustup.rs <span class="token operator">|</span> <span class="token function">sh</span>  <span class="token comment"># 下载安装脚本</span><span class="token builtin class-name">source</span> <span class="token environment constant">$HOME</span>/.cargo/env  <span class="token comment"># 配置环境变量</span>rustc <span class="token parameter variable">--version</span>  <span class="token comment"># 验证安装</span></code></pre></li><li><p><strong>安装Solana CLI</strong>：<br>参考官方文档：<a href="https://solana.com/zh/docs/intro/installation#%E5%AE%89%E8%A3%85-solana-cli">https://solana.com/zh/docs/intro/installation#安装-solana-cli</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-sSfL</span> https://release.solana.com/v1.18.4/install<span class="token variable">)</span></span>"</span>  <span class="token comment"># 安装指定版本</span>solana <span class="token parameter variable">--version</span>  <span class="token comment"># 验证安装</span></code></pre></li><li><p><strong>安装Anchor框架（智能合约开发工具）</strong>：<br>参考官方文档：<a href="https://solana.com/zh/docs/intro/installation#%E5%AE%89%E8%A3%85-anchor-cli">https://solana.com/zh/docs/intro/installation#安装-anchor-cli</a></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> <span class="token function">install</span> <span class="token parameter variable">--git</span> https://github.com/coral-xyz/anchor avm <span class="token parameter variable">--locked</span> <span class="token parameter variable">--force</span>  <span class="token comment"># 安装AVM（Anchor版本管理器）</span>avm <span class="token function">install</span> latest  <span class="token comment"># 安装最新版Anchor</span>avm use latest  <span class="token comment"># 启用最新版</span></code></pre><p>配置环境变量（以zsh为例）：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export PATH="$HOME/.avm/bin:$PATH"'</span> <span class="token operator">>></span> ~/.zshrc<span class="token builtin class-name">source</span> ~/.zshrc  <span class="token comment"># 生效配置</span>anchor <span class="token parameter variable">--version</span>  <span class="token comment"># 验证安装</span></code></pre></li></ol><h3 id="5-2-创建钱包">5.2 创建钱包</h3><pre class="language-bash" data-language="bash"><code class="language-bash">solana-keygen new  <span class="token comment"># 创建默认钱包（路径：~/.config/solana/id.json）</span></code></pre><p>执行后输入密码（BIP39 Passphrase），完成后生成私钥文件（用于签名交易）和公钥（钱包地址）。</p><h3 id="5-3-切换至Devnet（测试网）">5.3 切换至Devnet（测试网）</h3><p>Solana有主网（Mainnet）、测试网（Devnet）、开发网（Testnet），开发阶段建议使用Devnet：</p><pre class="language-bash" data-language="bash"><code class="language-bash">solana config <span class="token builtin class-name">set</span> <span class="token parameter variable">-ud</span>  <span class="token comment"># 切换至Devnet</span>solana config get  <span class="token comment"># 验证配置（RPC URL显示https://api.devnet.solana.com即为成功）</span></code></pre><h3 id="5-4-获取测试SOL（空投）">5.4 获取测试SOL（空投）</h3><p>Devnet的SOL可通过空投获取，用于测试交易：</p><pre class="language-bash" data-language="bash"><code class="language-bash">solana airdrop <span class="token number">5</span>  <span class="token comment"># 向默认钱包空投5个SOL</span></code></pre><p>若提示“rate limit reached”，可等待几分钟后重试，或指定其他钱包地址：</p><pre class="language-bash" data-language="bash"><code class="language-bash">solana airdrop <span class="token number">5</span> <span class="token operator">&lt;</span>钱包公钥<span class="token operator">></span>  <span class="token comment"># 向指定钱包空投</span></code></pre><h2 id="六、Solana-CLI常见用法">六、Solana CLI常见用法</h2><h3 id="6-1-创建多个钱包">6.1 创建多个钱包</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建钱包1（路径：~/wallets/wallet1.json）</span>solana-keygen new <span class="token parameter variable">-o</span> ~/wallets/wallet1.json<span class="token comment"># 创建钱包2</span>solana-keygen new <span class="token parameter variable">-o</span> ~/wallets/wallet2.json<span class="token comment"># 创建带密码的钱包3（--force强制覆盖同名文件，谨慎使用）</span>solana-keygen new <span class="token parameter variable">-o</span> ~/wallets/wallet3.json <span class="token parameter variable">--force</span></code></pre><h3 id="6-2-领取空投至指定钱包">6.2 领取空投至指定钱包</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 向wallet2空投0.5个SOL（先通过pubkey命令获取钱包公钥）</span>solana airdrop <span class="token number">0.5</span> <span class="token variable"><span class="token variable">$(</span>solana-keygen pubkey ~/wallets/wallet2.json<span class="token variable">)</span></span></code></pre><h3 id="6-3-钱包间转账">6.3 钱包间转账</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从默认钱包向目标地址转账（示例）</span>solana transfer <span class="token parameter variable">--from</span> ~/.config/solana/id.json <span class="token operator">&lt;</span>目标钱包公钥<span class="token operator">></span> <span class="token number">0.3</span>  <span class="token comment"># 转账0.3 SOL</span></code></pre><p>参数说明：<code>--from</code>指定转出钱包路径，最后一个数字为转账金额（SOL）。</p><h3 id="6-4-查看账户余额">6.4 查看账户余额</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看指定钱包余额</span>solana balance <span class="token operator">&lt;</span>钱包公钥<span class="token operator">></span><span class="token comment"># 示例输出：0.9 SOL</span></code></pre><h3 id="6-5-查询交易记录">6.5 查询交易记录</h3><p>通过区块浏览器查询交易详情，例如Devnet的交易可访问：  <a href="https://solscan.io/tx/%3C%E4%BA%A4%E6%98%93ID%3E?cluster=devnet">https://solscan.io/tx/&lt;交易ID&gt;?cluster=devnet</a><br>（将<code>&lt;交易ID&gt;</code>替换为实际交易哈希，可通过<code>solana transfer</code>命令的输出获取）</p><p><a href="https://solscan.io/tx/3pnyEXnDJcyCZo2VBzunRRveu1siXmAJmjpGrC4TdrkbAfvLGaioC7Amnum6YoorioBUVMxgQe3VcW3UGpoJskh6?cluster=devnet">https://solscan.io/tx/3pnyEXnDJcyCZo2VBzunRRveu1siXmAJmjpGrC4TdrkbAfvLGaioC7Amnum6YoorioBUVMxgQe3VcW3UGpoJskh6?cluster=devnet</a></p><p><img src="https://img.soniachen.com/blog/posts/2025/08/image-20250805112329272.png" alt="image-20250805112329272"></p>]]></content>
      
      
      <categories>
          
          <category> Solana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Solana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进阶[part10]_并发-概念、线程、通信、共享内存</title>
      <link href="/2025/08/01/Rust%E8%BF%9B%E9%98%B6-part10-%E5%B9%B6%E5%8F%91-%E6%A6%82%E5%BF%B5%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E9%80%9A%E4%BF%A1/"/>
      <url>/2025/08/01/Rust%E8%BF%9B%E9%98%B6-part10-%E5%B9%B6%E5%8F%91-%E6%A6%82%E5%BF%B5%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E9%80%9A%E4%BF%A1/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=480f6274-8c71-d528-fde1-737f4e166196</cover>
      <date>Fri Aug 01 2025 10:30:48 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust进阶[part10]_并发</h1><h2 id="基本概述">基本概述</h2><p>在Rust中，通过<code>std::thread::spawn</code>函数可以创建新线程，该函数接收一个闭包作为参数，闭包中包含线程要执行的代码。</p><h3 id="基础线程创建">基础线程创建</h3><p>子线程的生命周期依赖于主线程：当主线程结束时，无论子线程是否执行完毕，都会被强制终止。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建子线程</span>    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"spawn thread: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟耗时操作</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 主线程逻辑</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"main thread: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>输出结果</strong>（可能因调度顺序略有不同）：</p><pre class="language-none"><code class="language-none">main thread: 1spawn thread: 1main thread: 2spawn thread: 2main thread: 3spawn thread: 3main thread: 4spawn thread: 4spawn thread: 5  &#x2F;&#x2F; 主线程已结束，子线程可能被中断</code></pre><h3 id="等待线程完成：JoinHandle">等待线程完成：JoinHandle</h3><p>通过<code>thread::spawn</code>返回的<code>JoinHandle</code>类型，可以让主线程等待子线程执行完毕。调用<code>join</code>方法会阻塞当前线程，直到子线程完成。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取子线程的JoinHandle</span>    <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"spawn thread: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 主线程逻辑</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"main thread: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 等待子线程完成（阻塞主线程）</span>    handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// join返回Result，unwrap处理成功情况</span><span class="token punctuation">&#125;</span></code></pre><p><strong>输出结果</strong>：主线程会等待子线程打印到9后再结束。</p><h3 id="使用move闭包">使用move闭包</h3><p><code>move</code>闭包用于将外部变量的所有权转移到子线程中，解决多线程中变量生命周期的问题（避免子线程访问已被释放的变量）。</p><p><strong>示例：不使用move导致的错误</strong></p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 错误：子线程可能比主线程生命周期长，s可能被提前释放</span>    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译错误：`s` does not live long enough</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>使用move闭包解决</strong></p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// move闭包将s的所有权转移到子线程</span>    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确：子线程拥有s的所有权</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="多线程通信">多线程通信</h2><p>Rust推荐通过<strong>消息传递</strong>实现安全并发，标准库提供的<code>channel</code>（通道）是实现这一机制的核心工具。</p><h3 id="Channel（通道）基础">Channel（通道）基础</h3><p>通道由<strong>发送端（Sender）</strong> 和<strong>接收端（Receiver）</strong> 组成，数据从发送端发送，接收端接收，实现线程间通信。</p><ul><li>导入：<code>use std::sync::mpsc;</code>（mpsc：多生产者单消费者，支持多个发送端向一个接收端发送数据）</li><li>创建：<code>let (tx, rx) = mpsc::channel();</code>（返回包含发送端和接收端的元组）</li></ul><h4 id="基本使用示例">基本使用示例</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 子线程发送数据</span>    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"the"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"thread"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals <span class="token punctuation">&#123;</span>            tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送数据，失败时unwrap panic</span>            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟间隔发送</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 主线程接收数据</span>    <span class="token keyword">for</span> received <span class="token keyword">in</span> rx <span class="token punctuation">&#123;</span> <span class="token comment">// 迭代接收，直到发送端全部关闭</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Got: &#123;&#125;"</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>输出结果</strong>：</p><pre class="language-none"><code class="language-none">Got: hiGot: fromGot: theGot: thread</code></pre><h4 id="发送端与接收端方法">发送端与接收端方法</h4><ul><li><p><strong>发送端（Sender）</strong>：</p><ul><li><code>send(T) -&gt; Result&lt;(), SendError&lt;T&gt;&gt;</code>：发送数据，成功返回<code>Ok(())</code>，失败（如接收端已关闭）返回<code>Err</code>。</li></ul></li><li><p><strong>接收端（Receiver）</strong>：</p><ul><li><code>recv() -&gt; Result&lt;T, RecvError&gt;</code>：阻塞当前线程，直到收到数据或发送端关闭（返回<code>Err</code>）。</li><li><code>try_recv() -&gt; Result&lt;T, TryRecvError&gt;</code>：非阻塞，立即返回：<ul><li>有数据：<code>Ok(T)</code></li><li>无数据：<code>Err(TryRecvError::Empty)</code></li><li>发送端关闭：<code>Err(TryRecvError::Disconnected)</code></li></ul></li></ul></li></ul><h3 id="多生产者示例">多生产者示例</h3><p>通过<code>Sender::clone</code>可以创建多个发送端，实现多线程向同一接收端发送数据。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">mpsc<span class="token punctuation">::</span></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tx2 <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 克隆发送端</span>    <span class="token comment">// 线程1发送数据</span>    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"thread1: hi"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"thread1: hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals <span class="token punctuation">&#123;</span>            tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 线程2发送数据</span>    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> vals <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"thread2: bye"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"thread2: goodbye"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> val <span class="token keyword">in</span> vals <span class="token punctuation">&#123;</span>            tx2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 接收数据</span>    <span class="token keyword">for</span> received <span class="token keyword">in</span> rx <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Got: &#123;&#125;"</span><span class="token punctuation">,</span> received<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="练习">练习</h3><h4 id="练习1——实现多线程文件处理器">练习1——实现多线程文件处理器</h4><h4 id="任务描述">任务描述</h4><p>你需要编写一个多线程文件处理器，它从一个通道（channel）中接收文件路径，并在线程池中处理这些文件。文件处理的具体任务可以是读取文件内容并打印到控制台。你需要使用 Rust 的带缓冲区的 channel 来控制并发线程的数量，从而限制同时处理的文件数量。</p><h4 id="具体要求">具体要求</h4><p>1.文件处理任务：定义一个函数<code>process_file</code>，该函数接受一个文件路径，读取文件内容，并将内容打印到控制台。</p><p>2.多线程控制：</p><ul><li>创建一个带缓冲区的<code>channel</code>，用于在主线程和工作线程之间传递文件路径。</li><li>使用多线程来实现文件处理的并发性，限制线程的并发数量（例如，最多同时处理 4 个文件）。</li></ul><p>3.主线程作为生产者：主线程负责向通道发送文件路径。假设我们有 10 个文件路径要处理。</p><p>4.工作线程作为消费者：创建多个工作线程，每个线程从通道中接收文件路径，并调用<code>process_file</code>函数来处理文件。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">crossbeam_channel<span class="token punctuation">::</span></span>bounded<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fs<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>path<span class="token punctuation">::</span></span><span class="token class-name">Path</span><span class="token punctuation">;</span><span class="token comment">// 实现多线程文件处理器,同时可以处理4个文件读取，说明有四个接受端 ，一个发送端</span><span class="token comment">/* */</span><span class="token keyword">fn</span> <span class="token function-definition function">process_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">match</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read_to_string</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Processing file: &#123;&#125;"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Content: &#123;&#125;"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"Error reading file &#123;&#125;: &#123;&#125;"</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">test_thread_file_processor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bounded</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num_threads <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> file_paths <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>        <span class="token string">"file1.txt"</span><span class="token punctuation">,</span>        <span class="token string">"file2.txt"</span><span class="token punctuation">,</span>        <span class="token string">"file3.txt"</span><span class="token punctuation">,</span>        <span class="token string">"file4.txt"</span><span class="token punctuation">,</span>        <span class="token string">"file5.txt"</span><span class="token punctuation">,</span>        <span class="token string">"file6.txt"</span><span class="token punctuation">,</span>        <span class="token string">"file7.txt"</span><span class="token punctuation">,</span>        <span class="token string">"file8.txt"</span><span class="token punctuation">,</span>        <span class="token string">"file9.txt"</span><span class="token punctuation">,</span>        <span class="token string">"file10.txt"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> handles <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 启动 4 个工作线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>num_threads <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> rx<span class="token punctuation">:</span> <span class="token namespace">crossbeam_channel<span class="token punctuation">::</span></span><span class="token class-name">Receiver</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> rx<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> handle<span class="token punctuation">:</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token class-name">JoinHandle</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> path <span class="token keyword">in</span> rx <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token namespace">fs<span class="token punctuation">::</span></span><span class="token function">read_to_string</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Error: &#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Worker &#123;&#125;: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 发送文件路径</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> file_paths <span class="token punctuation">&#123;</span>        tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>          <span class="token function">drop</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> handles <span class="token punctuation">&#123;</span>        h<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>坑⚠️：</p><p>需要使用<code>use crossbeam_channel::bounded; </code>才能满足接收者可以克隆，<code>mpsc::channel()</code>不能克隆接收者，只能克隆发送者</p><p>let (tx, rx) = bounded(4);</p><p>需要<code> drop(tx);</code>来显式关闭发送端，使接收端退出 <code>for path in rx</code> 循环</p><p><code>for path in rx</code>这是一个阻塞循环，只有在发送端关闭时才会退出</p></blockquote><h4 id="练习2——使用-Channel-实现程序的优雅停止">练习2——使用 Channel 实现程序的优雅停止</h4><h4 id="任务描述-2">任务描述</h4><ul><li>任务描述<br>○ 在这道练习中，你需要编写一个多线程程序，该程序会创建多个工作线程，持续处理任务。在接收到<strong>停止</strong>信号时，所有工作线程应该优雅地停止工作，并确保所有未完成的任务都被处理完毕。<br>○ 你将使用 Rust 的 channel 来实现任务的调度和优雅停止机制。</li></ul><h4 id="具体要求-2">具体要求</h4><ul><li>工作线程：<br>○ 创建一个工作线程池，工作线程从通道接收任务并处理。<br>○ 工作线程应能够响应停止信号，并在完成当前任务后优雅地退出。</li><li>任务结构：<br>○ 任务可以是简单的打印操作，模拟一些耗时工作，例如打印任务 ID 并暂停一段时间。</li><li>优雅停止：<br>○ 通过发送一个特殊的停止信号，通知所有工作线程停止接收新的任务，并在完成当前任务后退出。<br>○ 确保所有已接收的任务都被处理完毕。</li><li>主线程控制：<br>○ 主线程应当能够发送任务，也能够在适当的时候发送停止信号，触发工作线程的优雅停止。</li></ul><h3 id="答案：">答案：</h3><ul><li>优雅停止：工作线程处理完当前任务后退出，不中断正在执行的任务。</li><li>实现：通过特殊信号（如<code>Option::None</code>）通知线程停止，或关闭发送端触发接收端退出。</li></ul><h4 id="实现代码">实现代码</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span>mpsc<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token comment">// 任务类型：包含任务ID和模拟耗时</span><span class="token keyword">type</span> <span class="token type-definition class-name">Task</span> <span class="token operator">=</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment">// None作为停止信号</span><span class="token comment">// 处理任务</span><span class="token keyword">fn</span> <span class="token function-definition function">process_task</span><span class="token punctuation">(</span>task_id<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"处理任务&#123;&#125;..."</span><span class="token punctuation">,</span> task_id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟耗时1秒</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"任务&#123;&#125;处理完成"</span><span class="token punctuation">,</span> task_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>tx<span class="token punctuation">,</span> rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">bounded</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num_workers <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> handles <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 创建工作线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>num_workers <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> rx <span class="token operator">=</span> rx<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"工作线程&#123;&#125;启动"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 循环接收任务，直到收到None（停止信号）</span>            <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token operator">=</span> rx<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">match</span> task <span class="token punctuation">&#123;</span>                    <span class="token class-name">Some</span><span class="token punctuation">(</span>task_id<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">process_task</span><span class="token punctuation">(</span>task_id<span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"工作线程&#123;&#125;收到停止信号，退出"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 退出循环，线程结束</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 主线程发送任务</span>    <span class="token keyword">for</span> task_id <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">5</span> <span class="token punctuation">&#123;</span>        tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span>task_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 发送停止信号（每个线程一个）</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>num_workers <span class="token punctuation">&#123;</span>        tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 等待所有工作线程退出</span>    <span class="token keyword">for</span> handle <span class="token keyword">in</span> handles <span class="token punctuation">&#123;</span>        handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"所有线程已优雅退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="✅-总结">✅ 总结</h3><table><thead><tr><th style="text-align:left">方案</th><th style="text-align:left">支持克隆 Receiver</th><th style="text-align:left">是否推荐</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>mpsc::sync_channel</code></td><td style="text-align:left">❌</td><td style="text-align:left">❌</td><td style="text-align:left">不支持克隆 <code>Receiver</code></td></tr><tr><td style="text-align:left"><code>mpsc::channel</code></td><td style="text-align:left">❌</td><td style="text-align:left">✅</td><td style="text-align:left">可克隆 <code>Sender</code>，适合多发送者单接收者</td></tr><tr><td style="text-align:left"><code>crossbeam-channel</code></td><td style="text-align:left">✅</td><td style="text-align:left">✅✅</td><td style="text-align:left">支持克隆 <code>Receiver</code>，适合多消费者</td></tr><tr><td style="text-align:left"><code>Arc&lt;Mutex&lt;Receiver&gt;&gt;</code></td><td style="text-align:left">❌</td><td style="text-align:left">❌</td><td style="text-align:left">不推荐，性能差，易出错</td></tr><tr><td style="text-align:left"><code>select!</code> + <code>bounded</code></td><td style="text-align:left">✅</td><td style="text-align:left">✅</td><td style="text-align:left">适合多线程监听同一通道</td></tr></tbody></table><hr><h3 id="📌-推荐方案">📌 推荐方案</h3><p><strong>优先使用 <code>crossbeam-channel</code> 的 <code>bounded</code> 或 <code>unbounded</code> 通道</strong>，它不仅支持克隆 <code>Receiver</code>，还提供了更强大的功能，如 <code>select!</code>、<code>try_recv</code>、<code>recv_timeout</code> 等</p><h2 id="共享内存实现并发">共享内存实现并发</h2><p>除了消息传递，还可以通过<strong>共享内存</strong>实现并发。Rust通过<code>Mutex</code>（互斥锁）和<code>Arc</code>（原子引用计数）保证共享内存的线程安全。</p><h3 id="Mutex-T-（互斥锁）">Mutex&lt;T&gt;（互斥锁）</h3><p><code>Mutex</code>确保同一时间只有一个线程能访问共享数据，通过“锁”机制实现：</p><ul><li>访问数据前需调用<code>lock()</code>获取锁（返回<code>MutexGuard</code>，智能指针）。</li><li><code>MutexGuard</code>离开作用域时自动释放锁，避免死锁。</li></ul><h4 id="基本使用">基本使用</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Mutex</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建包含i32的Mutex</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取锁，返回MutexGuard</span>        <span class="token operator">*</span>num <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 通过解引用修改数据</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// MutexGuard离开作用域，自动释放锁</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"m = &#123;:?&#125;"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：m = 6</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Arc-T-（原子引用计数）">Arc&lt;T&gt;（原子引用计数）</h3><p><code>Rc&lt;T&gt;</code>不适合多线程（非线程安全），<code>Arc&lt;T&gt;</code>是线程安全版本的引用计数指针，通过原子操作保证计数的线程安全。常与<code>Mutex</code>配合，实现多线程共享数据。</p><h4 id="多线程共享计数器示例">多线程共享计数器示例</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Arc</span><span class="token punctuation">,</span> <span class="token class-name">Mutex</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Arc包裹Mutex，实现多线程共享</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> handles <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">10</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 克隆Arc，增加引用计数</span>        <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> <span class="token keyword">mut</span> num <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取锁</span>            <span class="token operator">*</span>num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 修改计数器</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handles<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 等待所有线程完成</span>    <span class="token keyword">for</span> handle <span class="token keyword">in</span> handles <span class="token punctuation">&#123;</span>        handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Result: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token operator">*</span>counter<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Result: 10</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Send-和-Sync-trait">Send 和 Sync  trait</h3><p>Rust通过这两个标记 trait 保证线程安全：</p><ul><li><strong>Send</strong>：标记类型可以安全地转移到另一个线程（所有权转移）。</li><li><strong>Sync</strong>：标记类型可以安全地被多个线程共享（即<code>&amp;T</code>是<code>Send</code>的）。</li></ul><p><strong>默认实现</strong>：</p><ul><li>基本类型（<code>i32</code>、<code>bool</code>等）和大多数标准库类型（<code>String</code>、<code>Vec</code>等）都实现了<code>Send</code>和<code>Sync</code>。</li><li><code>Rc&lt;T&gt;</code>不实现<code>Send</code>和<code>Sync</code>（非线程安全）。</li><li><code>Arc&lt;T&gt;</code>实现<code>Send</code>和<code>Sync</code>（线程安全）。</li><li><code>Mutex&lt;T&gt;</code>当<code>T</code>是<code>Send</code>时，<code>Mutex&lt;T&gt;</code>实现<code>Sync</code>。</li></ul><h3 id="练习3——实现多线程任务调度器">练习3——实现多线程任务调度器</h3><h4 id="任务描述-3">任务描述</h4><p>你需要编写一个简单的多线程任务调度器，它能够接收多个任务，并将这些任务分发到多个工作线程中执行。调度器使用 Channel 进行任务的分发和结果的收集。你需要使用 Rust 的<code>Send</code>和<code>Sync</code>特性来确保任务调度器在多线程环境中的安全性。</p><h4 id="具体要求-3">具体要求</h4><p>定义一个<code>Task</code>结构体，表示需要执行的任务。任务包含一个唯一的<code>id</code>和一个用于执行的闭包。</p><h4 id="调度器结构：">调度器结构：</h4><p>创建一个<code>Scheduler</code>结构体，包含一个任务队列和一个线程池。调度器应当使用<code>channel</code>来分发任务到不同的工作线程。</p><h4 id="功能实现：">功能实现：</h4><p>调度器应当具有以下功能：</p><ul><li>添加任务：向调度器添加一个任务。</li><li>启动调度器：启动多个线程，开始从任务队列中获取任务并执行。</li><li>获取结果：在所有任务完成后，收集并打印每个任务的执行结果。</li></ul><h4 id="多线程安全：">多线程安全：</h4><ul><li>通过使用<code>Arc</code>和<code>Mutex</code>确保任务队列在多个线程之间的安全访问。</li><li>确保任务的结果能够正确地在线程之间传递和收集。</li></ul><h4 id="任务分析">任务分析</h4><ul><li>核心：用channel分发任务，用<code>Arc</code>+<code>Mutex</code>管理任务队列和结果收集。</li><li>结构：<code>Scheduler</code>包含任务发送端、结果接收端和工作线程句柄。</li></ul><h4 id="实现代码-2">实现代码</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> crossbeam_channel <span class="token keyword">as</span> channel<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Mutex</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span><span class="token comment">// ------------------实现多线程任务调度器------------------------</span><span class="token comment">/** * 多线程任务调度器，能够接收多个任务，并将多个任务分配给多个线程执行。需要使用send和sync trait * 来确保任务调度器可以安全地被多个线程访问。 */</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>sync<span class="token punctuation">::</span></span><span class="token class-name">Arc</span><span class="token punctuation">;</span><span class="token comment">// 任务结构体：包含ID和执行闭包（返回结果）</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Task</span> <span class="token punctuation">&#123;</span>    id<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>    func<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">FnOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span> <span class="token operator">+</span> <span class="token class-name">Send</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">'static</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 闭包需实现Send</span><span class="token punctuation">&#125;</span><span class="token comment">// 调度器结构体</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Scheduler</span> <span class="token punctuation">&#123;</span>    task_tx<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token namespace">channel<span class="token punctuation">::</span></span><span class="token class-name">Sender</span><span class="token operator">&lt;</span><span class="token class-name">Task</span><span class="token operator">>></span><span class="token punctuation">,</span> <span class="token comment">// 任务发送端 (使用Option便于take)</span>    result_rx<span class="token punctuation">:</span> <span class="token class-name">Arc</span><span class="token operator">&lt;</span><span class="token class-name">Mutex</span><span class="token operator">&lt;</span><span class="token namespace">channel<span class="token punctuation">::</span></span><span class="token class-name">Receiver</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 结果接收端（共享）</span>    workers<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token class-name">JoinHandle</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 工作线程句柄队列 (使用Option便于take)</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Scheduler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建新调度器</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>num_workers<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>task_tx<span class="token punctuation">,</span> task_rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">channel<span class="token punctuation">::</span></span><span class="token function">unbounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token punctuation">(</span>result_tx<span class="token punctuation">,</span> result_rx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token namespace">channel<span class="token punctuation">::</span></span><span class="token function">unbounded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> result_rx <span class="token operator">=</span> <span class="token class-name">Arc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Mutex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>result_rx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> workers <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 创建工作线程</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>num_workers <span class="token punctuation">&#123;</span>            <span class="token comment">// 注意：crossbeam-channel的Receiver支持clone</span>            <span class="token keyword">let</span> task_rx_clone<span class="token punctuation">:</span> <span class="token namespace">channel<span class="token punctuation">::</span></span><span class="token class-name">Receiver</span><span class="token operator">&lt;</span><span class="token class-name">Task</span><span class="token operator">></span> <span class="token operator">=</span> task_rx<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> result_tx<span class="token punctuation">:</span> <span class="token namespace">channel<span class="token punctuation">::</span></span><span class="token class-name">Sender</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> result_tx<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> handle <span class="token operator">=</span> <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 循环接收任务并执行</span>                <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> <span class="token operator">=</span> task_rx_clone<span class="token punctuation">.</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"执行任务&#123;&#125;"</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行任务</span>                    result_tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发送结果</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Scheduler</span> <span class="token punctuation">&#123;</span>            task_tx<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>task_tx<span class="token punctuation">)</span><span class="token punctuation">,</span>            result_rx<span class="token punctuation">,</span>            workers<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>workers<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加任务</span>    <span class="token keyword">fn</span> <span class="token function-definition function">add_task</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> func<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">FnOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span> <span class="token operator">+</span> <span class="token class-name">Send</span> <span class="token operator">+</span> <span class="token lifetime-annotation symbol">'static</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token keyword">ref</span> tx<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>task_tx <span class="token punctuation">&#123;</span>            tx<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Task</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> func <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 等待所有任务完成并收集结果</span>    <span class="token keyword">fn</span> <span class="token function-definition function">wait_and_collect_results</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 关闭任务发送端，让工作线程接收完毕后退出</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>task_tx<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用take获取所有权并使原位置为None</span>        <span class="token comment">// 等待所有工作线程完成</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>workers<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>workers<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 使用take获取所有权</span>            <span class="token keyword">for</span> handle <span class="token keyword">in</span> workers <span class="token punctuation">&#123;</span>                handle<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 收集结果</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> results <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> result_rx <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>result_rx<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用try_iter()来获取已有的结果，避免阻塞</span>        <span class="token keyword">for</span> result <span class="token keyword">in</span> result_rx<span class="token punctuation">.</span><span class="token function">try_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        results    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> scheduler <span class="token operator">=</span> <span class="token class-name">Scheduler</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建2个工作线程</span>    <span class="token comment">// 添加任务</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">5</span> <span class="token punctuation">&#123;</span>        scheduler<span class="token punctuation">.</span><span class="token function">add_task</span><span class="token punctuation">(</span>            i<span class="token punctuation">,</span>            <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>                <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟耗时</span>                <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"任务&#123;&#125;执行完成"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 收集结果</span>    <span class="token keyword">let</span> results <span class="token operator">=</span> scheduler<span class="token punctuation">.</span><span class="token function">wait_and_collect_results</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"所有任务结果："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> res <span class="token keyword">in</span> results <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="总结">总结</h2><p>Rust通过所有权系统、<code>Send</code>/<code>Sync</code> trait、channel和<code>Mutex</code>/<code>Arc</code>等工具，在编译期保证并发安全，避免数据竞争。开发中应根据场景选择消息传递（channel）或共享内存（<code>Mutex</code>+<code>Arc</code>）模式，优先使用消息传递（更易保证安全）。</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进阶[part9]_test测试</title>
      <link href="/2025/07/31/Rust%E8%BF%9B%E9%98%B6-part9-test%E6%B5%8B%E8%AF%95/"/>
      <url>/2025/07/31/Rust%E8%BF%9B%E9%98%B6-part9-test%E6%B5%8B%E8%AF%95/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=bc4aadac-40c0-83e6-42b3-cfb410e8f433</cover>
      <date>Thu Jul 31 2025 21:15:02 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust进阶[part9]_test测试</h1><h2 id="Unit-Test（单元测试）">Unit Test（单元测试）</h2><p>单元测试用于测试代码中的最小功能单元（如函数、方法），通常与被测试代码放在同一模块中，方便测试私有接口。</p><h3 id="基本示例">基本示例</h3><p>创建<code>src/lib.rs</code>，编写公共函数及对应的单元测试：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">usize</span> <span class="token punctuation">&#123;</span>    left <span class="token operator">+</span> right<span class="token punctuation">&#125;</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">*</span> b<span class="token punctuation">&#125;</span><span class="token comment">// 测试模块（通常命名为test，使用#[cfg(test)]标记仅在测试模式下编译）</span><span class="token attribute attr-name">#[cfg(test)]</span><span class="token keyword">mod</span> <span class="token module-declaration namespace">tests</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 引入父模块的函数（因测试模块是子模块，需显式引入）</span>    <span class="token keyword">use</span> <span class="token keyword">super</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token comment">// 测试add函数：正常情况</span>    <span class="token attribute attr-name">#[test]</span>    <span class="token keyword">fn</span> <span class="token function-definition function">test_add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 断言相等</span>        <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 断言不相等</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 测试multiply函数：边界情况</span>    <span class="token attribute attr-name">#[test]</span>    <span class="token keyword">fn</span> <span class="token function-definition function">test_multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 乘以0</span>        <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 负数相乘</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 标记应该失败的测试（用于验证错误处理）</span>    <span class="token attribute attr-name">#[test]</span>    <span class="token attribute attr-name">#[should_panic(expected = <span class="token string">"division by zero"</span>)]</span> <span class="token comment">// 预期panic信息</span>    <span class="token keyword">fn</span> <span class="token function-definition function">test_divide_by_zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 忽略测试（暂时不执行）</span>    <span class="token attribute attr-name">#[test]</span>    <span class="token attribute attr-name">#[ignore = <span class="token string">"尚未实现完整逻辑"</span>]</span>    <span class="token keyword">fn</span> <span class="token function-definition function">test_complex_calculation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 待实现的测试逻辑</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="代码解释：">代码解释：</h3><ul><li><code>#[cfg(test)]</code>：标记测试模块，仅在运行<code>cargo test</code>时才编译，避免影响生产代码</li><li><code>#[test]</code>：标记测试函数，cargo会自动识别并执行</li><li>断言宏：<code>assert_eq!(a, b)</code>（检查a等于b）、<code>assert_ne!(a, b)</code>（检查a不等于b）、<code>assert!(condition)</code>（检查条件为真）</li><li><code>#[should_panic]</code>：标记测试预期会panic，若未panic则测试失败；可通过<code>expected</code>指定预期的panic信息</li><li><code>#[ignore]</code>：标记测试暂时忽略，执行<code>cargo test -- --ignored</code>可单独运行忽略的测试</li></ul><h2 id="Integration-Test（集成测试）">Integration Test（集成测试）</h2><p>集成测试用于测试多个模块或组件协同工作的情况，通常放在独立的<code>tests</code>目录中，只能访问被测试代码的公共接口。</p><h3 id="目录结构">目录结构</h3><p>在<code>src</code>同级创建<code>tests</code>文件夹（cargo会自动识别为集成测试目录）：</p><pre class="language-none"><code class="language-none">project&#x2F;├── src&#x2F;│   └── lib.rs├── tests&#x2F;│   ├── basic_test.rs  &#x2F;&#x2F; 集成测试文件1│   └── advanced_test.rs  &#x2F;&#x2F; 集成测试文件2└── Cargo.toml</code></pre><h3 id="示例代码">示例代码</h3><p><code>tests/basic_test.rs</code>：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 引入被测试的库（需在Cargo.toml中配置库名称）</span><span class="token keyword">use</span> <span class="token namespace">my_library<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>add<span class="token punctuation">,</span> multiply<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">test_integration_add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">test_integration_multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="配置说明">配置说明</h3><p>需在<code>Cargo.toml</code>中配置库信息，使集成测试能正确引入：</p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"my_library"</span>  <span class="token comment"># 库名称（集成测试中use的名称）</span><span class="token key property">path</span> <span class="token punctuation">=</span> <span class="token string">"src/lib.rs"</span>  <span class="token comment"># 库文件路径</span></code></pre><h2 id="测试命令行">测试命令行</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>cargo test</code></td><td>运行所有测试（单元测试+集成测试+文档测试）</td></tr><tr><td><code>cargo test test_add</code></td><td>运行名称包含<code>test_add</code>的测试（模糊匹配）</td></tr><tr><td><code>cargo test tests::test_multiply</code></td><td>运行指定模块下的测试</td></tr><tr><td><code>cargo test --test basic_test</code></td><td>仅运行<code>tests/basic_test.rs</code>中的集成测试</td></tr><tr><td><code>cargo test -- --nocapture</code></td><td>运行测试并显示测试中的打印输出（默认捕获输出）</td></tr><tr><td><code>cargo test -- --ignored</code></td><td>仅运行被<code>#[ignore]</code>标记的测试</td></tr><tr><td><code>cargo test --release</code></td><td>在release模式下运行测试（性能更接近生产环境）</td></tr></tbody></table><h2 id="Doc-Tests（文档测试）">Doc Tests（文档测试）</h2><p>文档测试是嵌入在代码文档中的测试，既能作为示例文档，又能被cargo执行，确保文档与代码行为一致。</p><h3 id="基本用法">基本用法</h3><p>在函数的文档注释（<code>///</code>）中通过代码块编写测试：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/// 两数相加</span><span class="token comment">/// </span><span class="token comment">/// # Examples</span><span class="token comment">/// </span><span class="token comment">/// ```</span><span class="token comment">/// use my_library::add;</span><span class="token comment">/// </span><span class="token comment">/// assert_eq!(add(2, 3), 5);</span><span class="token comment">/// assert_eq!(add(100, 200), 300);</span><span class="token comment">/// ```</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>left<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> right<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">usize</span> <span class="token punctuation">&#123;</span>    left <span class="token operator">+</span> right<span class="token punctuation">&#125;</span></code></pre><h3 id="执行文档测试">执行文档测试</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">--doc</span>  <span class="token comment"># 仅运行文档测试</span></code></pre><h3 id="注意事项">注意事项</h3><ul><li>文档测试代码块必须是完整可执行的（需包含<code>use</code>引入）</li><li>可使用<code>/// # fn main() &#123; ... &#125;</code>包裹复杂示例（适用于需要主函数的场景）</li><li>若示例代码预期会 panic，可在代码块前加<code>should_panic</code>标记：<pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/// # Examples</span><span class="token comment">/// </span><span class="token comment">/// ```should_panic</span><span class="token comment">/// use my_library::divide;</span><span class="token comment">/// divide(1, 0);  // 预期panic</span><span class="token comment">/// ```</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"division by zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    a <span class="token operator">/</span> b<span class="token punctuation">&#125;</span></code></pre></li></ul><h2 id="Examples（示例代码）">Examples（示例代码）</h2><p><code>examples</code>目录用于存放可运行的示例代码，这些示例不仅是文档，还能通过<code>cargo test</code>验证其可执行性。</p><h3 id="目录结构-2">目录结构</h3><pre class="language-none"><code class="language-none">project&#x2F;├── src&#x2F;│   └── lib.rs└── examples&#x2F;    ├── simple_usage.rs  # 简单示例    └── advanced&#x2F;  # 多文件示例        ├── main.rs        └── helper.rs</code></pre><h3 id="示例代码-2">示例代码</h3><p><code>examples/simple_usage.rs</code>：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">my_library<span class="token punctuation">::</span></span>add<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"5 + 7 = &#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="运行示例测试">运行示例测试</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">--examples</span>  <span class="token comment"># 运行所有示例（验证能否编译执行）</span><span class="token function">cargo</span> run <span class="token parameter variable">--example</span> simple_usage  <span class="token comment"># 直接运行指定示例</span></code></pre><h2 id="标准工程目录规范详解">标准工程目录规范详解</h2><pre class="language-none"><code class="language-none">├── Cargo.lock  # 依赖版本锁定文件（自动生成，不要手动修改）  ├── Cargo.toml  # 项目配置文件（依赖、库信息等）  ├── src&#x2F;  │   ├── lib.rs  # 库代码入口（被单元测试和集成测试引用）  │   ├── main.rs  # 主程序入口（若项目是可执行程序）  │   └── bin&#x2F;  # 多可执行文件目录（每个.rs文件对应一个可执行程序）  │       ├── tool1.rs  │       └── tool2.rs  ├── benches&#x2F;  # 基准测试目录（性能测试）  │   ├── performance.rs  │   └── heavy_operation.rs  │       # 基准测试示例：  │       # #[bench]  │       # fn bench_add(b: &amp;mut Bencher) &#123;  │       #     b.iter(|| add(1, 2));  │       # &#125;  ├── examples&#x2F;  # 示例代码目录（见上文Examples部分）  └── tests&#x2F;  # 集成测试目录（见上文Integration Test部分）  </code></pre><ul><li><code>src/bin</code>：当项目需要多个可执行程序时使用，运行<code>cargo run --bin tool1</code>可执行对应程序</li><li><code>benches</code>：基准测试使用<code>#[bench]</code>标记，通过<code>cargo bench</code>运行，用于评估代码性能</li><li>所有测试相关目录（<code>tests</code>、<code>benches</code>、<code>examples</code>）的代码都遵循&quot;仅在测试/运行时编译&quot;的原则，不影响生产环境代码体积</li></ul><h2 id="练习">练习</h2><p>创建并发布一个 Rust crate 到 <a href="http://crates.io">crates.io</a>，涵盖单元测试、集成测试、文档测试、examples 以及项目规范，甚至进阶的 GitHub Actions 自动发布。</p><p>首先，得理清楚整个流程的步骤，从初始化项目、编写代码、添加测试、配置文档，到发布和自动化。</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进阶[part8]_迭代器</title>
      <link href="/2025/07/31/Rust%E8%BF%9B%E9%98%B6-part8-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
      <url>/2025/07/31/Rust%E8%BF%9B%E9%98%B6-part8-%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=8bc6ef10-8ef3-6119-71e1-f8218f673dc0</cover>
      <date>Thu Jul 31 2025 16:19:14 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust进阶[part8]_迭代器&amp;关联类型</h1><h2 id="概述">概述</h2><p>迭代器（Iterator）是 Rust 中处理序列元素的强大工具，它提供了一种统一的方式来遍历集合（如向量、数组、哈希表等）中的元素。迭代器的核心特性是<strong>惰性执行</strong>：除非主动调用消耗迭代器的方法，否则迭代器不会实际执行任何操作。这种特性使得迭代器可以高效地组合使用，而不会带来额外的性能开销。</p><p>在 Rust 中，迭代器由 <code>Iterator</code> trait 定义，所有实现了该 trait 的类型都可以被称为迭代器。迭代器不仅可以用于遍历现有集合，还可以用于生成序列（如斐波那契数列）、处理数据流等场景。</p><h2 id="迭代器的实现">迭代器的实现</h2><p>迭代器本质是实现了 <code>Iterator</code> trait 的类型。该 trait 的核心定义如下：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Iterator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span><span class="token punctuation">;</span>  <span class="token comment">// 关联类型：迭代器产生的元素类型</span>    <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token comment">// 核心方法：返回下一个元素（None表示结束）</span><span class="token punctuation">&#125;</span></code></pre><p><code>next</code> 方法是迭代器的核心：</p><ul><li>每次调用返回 <code>Option&lt;Self::Item&gt;</code>，其中 <code>Some(value)</code> 表示下一个元素，<code>None</code> 表示迭代结束</li><li>调用 <code>next</code> 会修改迭代器的内部状态（推进到下一个元素），因此需要 <code>&amp;mut self</code></li></ul><h2 id="关联类型">关联类型</h2><p>上面 trait 中用到的 <code>type Item;</code> 是关联类型（Associated Type），它是在 trait 内部定义的类型占位符，用于表示 trait 中涉及的某个类型。实现该 trait 时，需要指定 <code>Item</code> 的具体类型。</p><h3 id="和泛型的区别">和泛型的区别</h3><p>关联类型与泛型都可以实现&quot;类型抽象&quot;，但适用场景不同：</p><ul><li><p><strong>关联类型</strong>：在 trait 中只声明一个类型占位符，实现 trait 时必须为该类型指定唯一具体类型（一个实现对应一个具体类型）。适合 trait 中某个类型逻辑上&quot;固定&quot;的场景（如迭代器的元素类型）。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 迭代器只能产生一种类型的元素，用关联类型更合适</span><span class="token keyword">trait</span> <span class="token type-definition class-name">Iterator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p><strong>泛型</strong>：在 trait 定义时声明类型参数，实现 trait 时可以为不同类型参数提供多个实现。适合需要为多种类型提供通用逻辑的场景。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 泛型可以为不同T实现不同逻辑</span><span class="token keyword">trait</span> <span class="token type-definition class-name">Container</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></li></ul><h2 id="简单迭代器">简单迭代器</h2><p>迭代器的基本使用示例：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">iter_study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 1. for循环遍历（最常用）</span>    <span class="token keyword">let</span> v1_iter <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取迭代器（不可变引用）</span>    <span class="token keyword">for</span> var <span class="token keyword">in</span> v1_iter <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> var<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：1 2 3</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 2. 手动调用next方法</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> v1_iter2 <span class="token operator">=</span> v1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 需要mut，因为next会修改迭代器状态</span>    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span> <span class="token operator">=</span> v1_iter2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> var<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：1 2 3</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>for 循环不需要 mut 而 while 循环需要的原因</strong>：<br>for 循环在内部会自动处理迭代器的可变性——它会将迭代器标记为 mutable，并在循环过程中隐式调用 <code>next</code> 方法。而手动调用 <code>next</code> 时，需要显式声明 <code>mut</code>，因为 <code>next</code> 方法接收 <code>&amp;mut self</code>，要求迭代器是可变的。</p><h2 id="几个迭代的方法">几个迭代的方法</h2><p>集合类型（如 <code>Vec</code>）通常提供以下方法来获取不同类型的迭代器：</p><h3 id="iter-方法">iter 方法</h3><p>返回<strong>不可变引用迭代器</strong>（<code>Iterator&lt;Item = &amp;T&gt;</code>），迭代过程中借用集合元素（不获取所有权），集合本身可以在迭代后继续使用。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> iter <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 迭代元素类型：&amp;i32</span></code></pre><h3 id="into-iter-方法">into_iter 方法</h3><p>返回<strong>所有权迭代器</strong>（<code>Iterator&lt;Item = T&gt;</code>），迭代过程中会获取集合元素的所有权，迭代结束后集合本身无法再使用（已被消耗）。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> iter <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 迭代元素类型：i32（v此后不可用）</span></code></pre><h3 id="iter-mut-方法">iter_mut 方法</h3><p>返回<strong>可变引用迭代器</strong>（<code>Iterator&lt;Item = &amp;mut T&gt;</code>），迭代过程中可以修改集合元素的值。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> iter <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 迭代元素类型：&amp;mut i32</span><span class="token keyword">for</span> num <span class="token keyword">in</span> iter <span class="token punctuation">&#123;</span>    <span class="token operator">*</span>num <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 修改元素值</span><span class="token punctuation">&#125;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：[2, 4, 6]</span></code></pre><h2 id="消耗迭代器的方法">消耗迭代器的方法</h2><p>消耗型方法（Consuming Adaptors）会遍历迭代器并消耗它（调用后迭代器无法再使用），通常会产生一个最终结果。</p><h3 id="next">next</h3><p>最基础的消耗型方法，每次调用返回下一个元素，直到返回 <code>None</code>。</p><h3 id="sum">sum</h3><p>计算迭代器中所有元素的总和，支持所有实现了 <code>Sum</code> trait 的类型（如数值类型）。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> total<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// sum会消耗迭代器</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：10</span></code></pre><h3 id="collect">collect</h3><p>将迭代器产生的元素收集到一个集合中（如 <code>Vec</code>、<code>HashMap</code> 等），需要显式指定目标集合类型。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> doubled<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 收集到Vec</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> doubled<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：[2, 4, 6]</span></code></pre><h2 id="产生其他迭代器的方法">产生其他迭代器的方法</h2><p>迭代器适配器（Iterator Adaptors）会对迭代器进行转换，产生一个新的迭代器（不立即执行，仍保持惰性）。</p><h3 id="map">map</h3><p>接收一个闭包作为参数，将迭代器中的每个元素转换为另一种类型，返回一个新的迭代器。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> mapped <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 类型：Map&lt;Iter&lt;i32>, ...>（未执行）</span><span class="token comment">// 用collect触发执行</span><span class="token keyword">let</span> result<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> mapped<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：[10, 20, 30]</span></code></pre><h3 id="filter">filter</h3><p>接收一个闭包作为 predicate（断言），该闭包返回 <code>bool</code>，新迭代器只包含满足断言的元素。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> even_numbers<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span><span class="token operator">*</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> even_numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：[2, 4]</span></code></pre><h2 id="练习：实现斐波那契数列迭代器">练习：实现斐波那契数列迭代器</h2><h3 id="题目描述">题目描述</h3><p>实现一个自定义迭代器，用于生成斐波那契数列。该迭代器应支持无限生成斐波那契数，直到用户停止迭代。</p><h3 id="任务要求">任务要求</h3><ol><li>实现结构体 <code>Fibonacci</code>，并为它实现 <code>Iterator</code> trait。</li><li>在 <code>next</code> 方法中生成下一个斐波那契数。</li><li>编写测试函数，输出前10个斐波那契数。</li></ol><h3 id="实现代码">实现代码</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>iter<span class="token punctuation">::</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token comment">// 定义斐波那契迭代器结构体，存储当前和下一个斐波那契数</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Fibonacci</span> <span class="token punctuation">&#123;</span>    current<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>    next<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 为Fibonacci实现Iterator trait</span><span class="token keyword">impl</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">Fibonacci</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token keyword">u64</span><span class="token punctuation">;</span>  <span class="token comment">// 迭代器产生u64类型的斐波那契数</span>    <span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> current_val <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>current<span class="token punctuation">;</span>  <span class="token comment">// 保存当前值作为返回结果</span>        <span class="token comment">// 更新下一组值（斐波那契规则：下一个数 = 当前数 + 前一个数）</span>        <span class="token keyword">let</span> new_next <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token keyword">self</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>next <span class="token operator">=</span> new_next<span class="token punctuation">;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>current_val<span class="token punctuation">)</span>  <span class="token comment">// 始终返回Some（无限迭代）</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 提供一个构造函数，初始化斐波那契迭代器（从0, 1开始）</span><span class="token keyword">impl</span> <span class="token class-name">Fibonacci</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Fibonacci</span> <span class="token punctuation">&#123;</span> current<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> next<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试函数：输出前10个斐波那契数</span><span class="token keyword">fn</span> <span class="token function-definition function">test_fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> fib_iter <span class="token operator">=</span> <span class="token class-name">Fibonacci</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// take(10)限制只取前10个元素（迭代器适配器）</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token keyword">in</span> fib_iter<span class="token punctuation">.</span>t  <span class="token function">ake</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"第&#123;&#125;个斐波那契数：&#123;&#125;"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行测试</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">test_fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="输出结果">输出结果</h3><pre class="language-none"><code class="language-none">第1个斐波那契数：0第2个斐波那契数：1第3个斐波那契数：1第4个斐波那契数：2第5个斐波那契数：3第6个斐波那契数：5第7个斐波那契数：8第8个斐波那契数：13第9个斐波那契数：21第10个斐波那契数：34</code></pre><h3 id="说明">说明</h3><ul><li>结构体 <code>Fibonacci</code> 用 <code>current</code> 和 <code>next</code> 存储当前和下一个斐波那契数，初始化为 <code>0</code> 和 <code>1</code>（符合斐波那契数列的数学定义）。</li><li><code>next</code> 方法通过更新 <code>current</code> 和 <code>next</code> 的值生成下一个数，始终返回 <code>Some</code>（实现无限迭代）。</li><li>使用 <code>take(10)</code> 适配器限制只获取前10个元素，避免无限循环。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进阶[part7]_闭包</title>
      <link href="/2025/07/31/Rust%E8%BF%9B%E9%98%B6-part7-%E9%97%AD%E5%8C%85/"/>
      <url>/2025/07/31/Rust%E8%BF%9B%E9%98%B6-part7-%E9%97%AD%E5%8C%85/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=a129f74d-2c53-336b-48ef-4c43b1835824</cover>
      <date>Thu Jul 31 2025 15:36:39 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust进阶[part7]_闭包</h1><h2 id="闭包概述">闭包概述</h2><ul><li>闭包是一个可以捕获所在环境中的变量的匿名函数</li><li>在Rust中，闭包通过<code>||</code>符号定义，可以像普通函数一样调用，但和函数不同，闭包可以访问外部作用域的变量</li></ul><h3 id="特点">特点</h3><ol><li><strong>匿名性</strong>：没有函数名，通常作为表达式使用</li><li><strong>捕获环境</strong>：能自动捕获定义所在作用域中的变量（无需显式声明）</li><li><strong>类型推断</strong>：参数和返回值类型可由编译器自动推断，无需显式标注</li><li><strong>灵活语法</strong>：语法简洁，可根据复杂度调整写法（单行可省略<code>&#123;&#125;</code>和<code>return</code>）</li><li><strong>实现trait</strong>：编译器会为闭包自动实现<code>Fn</code>、<code>FnMut</code>或<code>FnOnce</code> trait，使其能作为参数传递</li></ol><h3 id="语法">语法</h3><p>基本语法：<code>|参数列表| 代码块</code>（返回值由最后一行表达式决定）</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 无参数闭包</span><span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Hello, closure!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用闭包</span><span class="token comment">// 单参数闭包（省略类型标注）</span><span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：25</span><span class="token comment">// 多参数闭包（显式标注类型，可选）</span><span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span> a <span class="token operator">+</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：5</span><span class="token comment">// 多行闭包（需用&#123;&#125;包裹）</span><span class="token keyword">let</span> complex_calc <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    y <span class="token operator">+</span> <span class="token number">3</span> <span class="token comment">// 隐式返回</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">complex_calc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：11</span></code></pre><h2 id="使用场景">使用场景</h2><h3 id="函数的参数">函数的参数</h3><p>闭包常作为参数传递给函数（如迭代器方法、异步任务等），实现灵活的逻辑注入</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 1. 结合迭代器使用</span><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> doubled<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> doubled<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[2, 4, 6, 8, 10]</span><span class="token comment">// 2. 自定义接受闭包的函数</span><span class="token keyword">fn</span> <span class="token function-definition function">apply</span><span class="token operator">&lt;</span><span class="token class-name">F</span><span class="token operator">></span><span class="token punctuation">(</span>f<span class="token punctuation">:</span> <span class="token class-name">F</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token keyword">where</span>     <span class="token class-name">F</span><span class="token punctuation">:</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span>  <span class="token comment">// 约束闭包类型</span><span class="token punctuation">&#123;</span>    <span class="token function">f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：17</span></code></pre><h3 id="捕获环境变量">捕获环境变量</h3><p>可以捕获并使用其定义所在环境中的变量，捕获方式由编译器根据使用场景自动推断</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 1. 按引用捕获（&amp;T）：适用于只读访问</span><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> print_msg <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 捕获message的引用</span><span class="token function">print_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Hello</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仍可使用message（未转移所有权）</span><span class="token comment">// 2. 按可变引用捕获（&amp;mut T）：适用于修改变量</span><span class="token keyword">let</span> <span class="token keyword">mut</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token keyword">mut</span> increment <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 修改捕获的变量</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Count: &#123;&#125;"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Count: 1</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：Count: 2</span><span class="token comment">// 3. 按值捕获（T）：适用于需要转移所有权的场景</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> take_name <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Name: &#123;&#125;"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 捕获name的所有权</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">take_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// println!("&#123;&#125;", name); // 错误：name的所有权已被闭包捕获</span></code></pre><h2 id="闭包原理">闭包原理</h2><ul><li><p><strong>自动实现的函数类型</strong>：编译器会为每个闭包自动实现<code>Fn</code>、<code>FnMut</code>或<code>FnOnce</code>中的一个或多个trait：</p><ul><li><code>FnOnce</code>：闭包消耗捕获的变量（所有权转移），因此只能调用一次</li><li><code>FnMut</code>：闭包通过可变引用修改捕获的变量，可多次调用</li><li><code>Fn</code>：闭包通过不可变引用访问捕获的变量，可多次调用（实现<code>Fn</code>的闭包自动实现<code>FnMut</code>和<code>FnOnce</code>）</li></ul></li><li><p><strong>闭包的类型推断</strong>：</p><ul><li>闭包的参数和返回值类型由编译器根据上下文自动推断</li><li>同一闭包的类型是唯一的（即使签名相同，不同闭包类型也不同）</li><li>若需存储闭包或作为返回值，需通过trait对象（如<code>Box&lt;dyn Fn(...) -&gt; ...&gt;</code>）实现</li></ul></li><li><p><strong>生命周期与闭包</strong>：</p><ul><li>捕获引用的闭包，其生命周期受限于所捕获变量的生命周期</li><li>若闭包作为返回值，需确保返回的闭包不捕获已销毁的变量引用</li></ul></li></ul><h2 id="move关键字">move关键字</h2><p>在参数列表前使用<code>move</code>关键字，可强制闭包取得它所使用的环境值的所有权（忽略默认的引用捕获）</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 基础示例：转移所有权</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> equal_to_x <span class="token operator">=</span> <span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>y<span class="token closure-punctuation punctuation">|</span></span> y <span class="token operator">==</span> x<span class="token punctuation">;</span> <span class="token comment">// x的所有权被闭包捕获</span><span class="token comment">// println!("&#123;:?&#125;", x); // 错误：x的所有权已转移</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token function">equal_to_x</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 多线程场景：确保闭包拥有变量所有权（避免生命周期问题）</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"thread message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 必须用move转移s的所有权到子线程</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="练习">练习</h2><ol><li>实现一个闭包，计算两个数的乘积并加上一个外部定义的偏移量（如<code>offset = 10</code>）</li><li>使用闭包作为<code>filter</code>方法的参数，从整数列表中筛选出偶数</li><li>用<code>move</code>关键字创建一个闭包，在新线程中打印捕获的字符串</li><li>编写一个函数，接受两个闭包参数（一个计算平方，一个计算立方），并返回两个闭包结果的和</li></ol><p><strong>示例答案参考</strong>：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 练习1</span><span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">let</span> calc <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> a <span class="token operator">*</span> b <span class="token operator">+</span> offset<span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：22（3*4+10）</span><span class="token comment">// 练习2</span><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> evens<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span> <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> evens<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[2, 4, 6]</span><span class="token comment">// 练习3</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello from thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 练习4</span><span class="token keyword">fn</span> <span class="token function-definition function">combine</span><span class="token operator">&lt;</span><span class="token constant">F1</span><span class="token punctuation">,</span> <span class="token constant">F2</span><span class="token operator">></span><span class="token punctuation">(</span>f1<span class="token punctuation">:</span> <span class="token constant">F1</span><span class="token punctuation">,</span> f2<span class="token punctuation">:</span> <span class="token constant">F2</span><span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span><span class="token keyword">where</span>    <span class="token constant">F1</span><span class="token punctuation">:</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span><span class="token punctuation">,</span>    <span class="token constant">F2</span><span class="token punctuation">:</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> n <span class="token operator">*</span> n<span class="token punctuation">;</span><span class="token keyword">let</span> cube <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>n<span class="token closure-punctuation punctuation">|</span></span> n <span class="token operator">*</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> <span class="token function">combine</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> cube<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：4 + 8 = 12</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进阶[part6]_宏</title>
      <link href="/2025/07/31/Rust%E8%BF%9B%E9%98%B6-part6-%E5%AE%8F/"/>
      <url>/2025/07/31/Rust%E8%BF%9B%E9%98%B6-part6-%E5%AE%8F/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=6ab4e909-1d77-e524-6546-edb8e72b4042</cover>
      <date>Thu Jul 31 2025 10:25:29 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust进阶[part6]_宏</h1><h2 id="macro-概述">macro 概述</h2><p>宏是 Rust 中强大的代码生成工具，与函数不同，它在编译期展开并生成具体代码，能处理可变参数、实现动态逻辑，语法上以 <code>!</code> 结尾（如 <code>println!</code> <code>vec!</code> <code>panic!</code>）。</p><p>常用宏简化了重复操作：<code>println!</code> 处理格式化输出，<code>vec!</code> 快速创建向量，<code>cfg!</code> 做条件编译判断。宏支持模式匹配和代码生成，比函数更灵活，但也因编译期处理，调试和学习门槛稍高。按功能可分为声明宏（基于模式匹配）和过程宏（更复杂的代码生成），是 Rust 元编程的核心能力。</p><p>一些之前常用的宏，例如 <code>println!</code>、<code>vec!</code> 等，它们简化了代码编写。</p><h2 id="声明宏">声明宏</h2><p>声明宏允许你通过模式匹配来生成代码。例如，下面是一个简单的加法声明宏：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">macro_rules!</span> add <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token macro property">add!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Result: &#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>格式</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">macro_rules!</span> 宏名称 <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span>模式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> 代码<span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>模式<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> 代码<span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span></code></pre><ul><li><strong>模式</strong>：匹配调用宏时的输入参数。</li><li><strong>元变量</strong>：用 <code>$</code> 开头，捕获输入的片段（如表达式、标识符等）。</li><li><strong>重复符号</strong>：<code>*</code>（零或多次）、<code>+</code>（至少一次），类似正则表达式。</li></ul><h2 id="过程宏">过程宏</h2><h3 id="派生宏">派生宏</h3><p>派生宏可以为结构体、枚举等类型自动生成代码。例如，使用 <code>#[derive(Debug)]</code> 可以自动为结构体添加调试输出的能力：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="属性宏">属性宏</h3><p>属性宏可以为函数、结构体等添加自定义属性。例如，自定义一个日志属性宏：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[proc_macro_attribute]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span>_attr<span class="token punctuation">:</span> <span class="token class-name">TokenStream</span><span class="token punctuation">,</span> item<span class="token punctuation">:</span> <span class="token class-name">TokenStream</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">TokenStream</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里可以实现日志记录逻辑</span>    item<span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[log]</span><span class="token keyword">fn</span> <span class="token function-definition function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Function called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="函数宏">函数宏</h3><p>函数宏类似于普通函数，但在编译时展开。例如：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[proc_macro]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>_item<span class="token punctuation">:</span> <span class="token class-name">TokenStream</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">TokenStream</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token string">"println!(\"Hello, world!\");"</span><span class="token punctuation">;</span>    code<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">greet!</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="总结">总结</h2><p>宏是 Rust 中强大的代码生成工具，声明宏通过模式匹配生成代码，过程宏则提供了更灵活的代码生成方式，包括派生宏、属性宏和函数宏。</p><h2 id="应用场景">应用场景</h2><ol><li>减少重复代码： 通过宏生成重复的代码，提高代码的可维护性。</li><li>编译期计算：在编译器进行计算并生成代码，提高运行时性能。</li><li>DSL（领域特定语言）：使用宏定义领域特定语言，提高代码的表达力和可读性。</li></ol><h2 id="课后习题">课后习题</h2><p>实现一下宏</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token macro property">repeat!</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token macro property">sum!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token macro property">max_value!</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>代码：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[macro_export]</span><span class="token macro property">macro_rules!</span> say_hello <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"hello &#123;&#125;!"</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[macro_export]</span><span class="token macro property">macro_rules!</span> repeat <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"repeat!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$n</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token namespace">std<span class="token punctuation">::</span>string<span class="token punctuation">::</span></span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[macro_export]</span><span class="token macro property">macro_rules!</span> sum <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"sum!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> <span class="token keyword">mut</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            $<span class="token punctuation">(</span>total <span class="token operator">+=</span> <span class="token variable">$x</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">*</span>            total        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[macro_export]</span><span class="token macro property">macro_rules!</span> max_value <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"max_value!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$y</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> <span class="token variable">$z</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token variable">$x</span> <span class="token operator">></span> <span class="token variable">$y</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token variable">$x</span> <span class="token operator">></span> <span class="token variable">$z</span> <span class="token punctuation">&#123;</span> <span class="token variable">$x</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token variable">$z</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token variable">$y</span> <span class="token operator">></span> <span class="token variable">$z</span> <span class="token punctuation">&#123;</span> <span class="token variable">$y</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token variable">$z</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>一些符号拆解：</p><ul><li><strong><code>$()</code></strong>：分组捕获元变量。</li><li><strong><code>\*</code>/<code>+</code></strong>：重复匹配输入片段。</li><li><strong><code>$(...)\*</code></strong>：在展开时代入重复的代码逻辑。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// sum! 宏展开逻辑</span>$<span class="token punctuation">(</span>total <span class="token operator">+=</span> <span class="token variable">$x</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">*</span>  <span class="token comment">// 对每个捕获的表达式，生成一次累加语句</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进阶[part5]_trait</title>
      <link href="/2025/07/30/Rust%E8%BF%9B%E9%98%B6-part5-trait/"/>
      <url>/2025/07/30/Rust%E8%BF%9B%E9%98%B6-part5-trait/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=d62c5da6-c53e-15c7-de49-35c0ce16666b</cover>
      <date>Wed Jul 30 2025 17:46:25 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust进阶[part5]_trait</h1><h2 id="trait概述">trait概述</h2><p>在 Rust 中，<code>trait</code> 是一种定义共享行为的方式。它类似于其他语言中的接口，允许我们定义一组方法签名，然后让不同的类型去实现这些方法。通过 <code>trait</code>，我们可以实现多态性，即不同类型可以以统一的方式处理。</p><h2 id="普通实现">普通实现</h2><ul><li>使用 <code>trait</code> 关键字来声明一个特征</li><li><code>summary</code> 是特征名</li><li>在大括号中定义了该特征的所有方法</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 定义一个 trait</span><span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个结构体</span><span class="token keyword">struct</span> <span class="token type-definition class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>    headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    location<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 为 NewsArticle 结构体实现 Summary trait</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;, by &#123;&#125; (&#123;&#125;)"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>headline<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>author<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>location<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义另一个结构体</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Tweet</span> <span class="token punctuation">&#123;</span>    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    reply<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>    retweet<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 为 Tweet 结构体实现 Summary trait</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">Tweet</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> article <span class="token operator">=</span> <span class="token class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>        headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Penguins win the Stanley Cup Championship!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        location<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Pittsburgh, PA, USA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Iceburgh"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"The Pittsburgh Penguins once again are the best \                              hockey team in the NHL."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> tweet <span class="token operator">=</span> <span class="token class-name">Tweet</span> <span class="token punctuation">&#123;</span>        username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"horse_ebooks"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        content<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"of course, as you probably already know, people"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        reply<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        retweet<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Article summary: &#123;&#125;"</span><span class="token punctuation">,</span> article<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Tweet summary: &#123;&#125;"</span><span class="token punctuation">,</span> tweet<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="特征定义与实现的位置">特征定义与实现的位置</h2><h3 id="孤儿规则">孤儿规则</h3><p>孤儿规则是 Rust 中的一个重要规则，它规定了特征的实现必须满足以下条件：要么特征在当前的 crate 中定义，要么类型在当前的 crate 中定义。这个规则确保了特征的实现是可预测的，避免了不同 crate 中对同一类型实现同一特征时可能出现的冲突。</p><p>例如，我们不能在自己的 crate 中为 <code>Vec&lt;T&gt;</code> 实现标准库中的 <code>Display</code> 特征，因为 <code>Vec&lt;T&gt;</code> 和 <code>Display</code> 都定义在标准库中。</p><h2 id="带泛型的-trait">带泛型的 trait</h2><p>可以针对不同的泛型来实现</p><h3 id="默认泛型类型参数">默认泛型类型参数</h3><ul><li>实现 trait 时不指定 <code>Rhs</code> 的具体类型，<code>Rhs</code> 的类型将是默认的 <code>Self</code> 类型，也就是在其上实现 <code>Add</code> 的类型</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Add</span><span class="token operator">&lt;</span><span class="token class-name">Rhs</span><span class="token operator">=</span><span class="token keyword">Self</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Output</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token class-name">Rhs</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Output</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 为 i32 实现 Add trait</span><span class="token keyword">impl</span> <span class="token class-name">Add</span> <span class="token keyword">for</span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Output</span> <span class="token operator">=</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span> <span class="token operator">+</span> rhs    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The result of addition is: &#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="关联类型">关联类型</h2><p>关联类型是 trait 定义中的类型占位符，并不定义它的具体类型是什么，在实现这个 trait 的时候才为这个关联类型赋予确定的类型。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Container</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">IntContainer</span> <span class="token punctuation">&#123;</span>    numbers<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Container</span> <span class="token keyword">for</span> <span class="token class-name">IntContainer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>numbers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token class-name">IntContainer</span> <span class="token punctuation">&#123;</span> numbers<span class="token punctuation">:</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Container contains 2: &#123;&#125;"</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="特征作为函数参数">特征作为函数参数</h2><h3 id="impl">&amp;impl</h3><p>使用 <code>&amp;impl Trait</code> 语法可以将实现了特定 trait 的类型作为参数传递给函数。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>    headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Headline: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! &#123;&#125;"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> article <span class="token operator">=</span> <span class="token class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>        headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"New Rust feature released!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="trait-bound语法">trait bound语法</h3><p><code>trait bound</code> 语法允许我们在泛型函数中指定泛型类型必须实现的 trait。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span><span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! &#123;&#125;"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="where-语法简化-trait-bound">where 语法简化 trait bound</h3><p>当泛型参数较多，并且每个参数都有多个 trait 约束时，使用 <code>where</code> 语法可以使代码更易读。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token keyword">where</span>    <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking news! &#123;&#125;"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="trait作为泛型的类型">trait作为泛型的类型</h3><p>可以将 trait 作为泛型类型参数，这样函数就可以接受实现了该 trait 的任何类型。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>    headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Headline: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">print_summary</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span><span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Summary: &#123;&#125;"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> article <span class="token operator">=</span> <span class="token class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>        headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"New Rust feature released!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">print_summary</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="impl-trait-语法-（返回值中返回trait）">impl trait 语法 （返回值中返回trait）</h3><p>如果需要动态返回不同的 trait 类型的话，需要使用 <code>Box&lt;dyn xxx&gt;</code> 语法来保证返回的内存大小一致，并且可以标注返回的哪种 trait。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Summary</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>    headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token keyword">for</span> <span class="token class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">summarize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"Headline: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">returns_summarizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Summary</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">NewsArticle</span> <span class="token punctuation">&#123;</span>        headline<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"New Rust feature released!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token function">returns_summarizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Summary: &#123;&#125;"</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">summarize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="通过-derive-派生类型">通过 <code>derive</code> 派生类型</h3><p>例如 <code>#[derive(Debug)]</code> 是一种特征派生语法，这种被标记的对象会自动实现对应的默认特征代码，继承相应的功能。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span> width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Rectangle: &#123;:?&#125;"</span><span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="练习">练习</h2><h3 id="练习-1">练习 1</h3><p>定义一个 <code>Area</code> trait，包含一个 <code>area</code> 方法，用于计算面积。然后为 <code>Rectangle</code> 结构体实现该 trait。</p><h3 id="练习-2">练习 2</h3><p>创建一个函数，接受一个实现了 <code>Area</code> trait 的类型作为参数，并打印其面积。</p><h3 id="练习-3">练习 3</h3><p>使用 <code>derive</code> 派生 <code>Clone</code> 和 <code>Copy</code> trait 到一个自定义类型上，并验证其功能。</p><p>以下是练习的参考答案：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 练习 1</span><span class="token keyword">trait</span> <span class="token type-definition class-name">Area</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">f64</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    width<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Area</span> <span class="token keyword">for</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">f64</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 练习 2</span><span class="token keyword">fn</span> <span class="token function-definition function">print_area</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Area</span><span class="token operator">></span><span class="token punctuation">(</span>shape<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The area is: &#123;&#125;"</span><span class="token punctuation">,</span> shape<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 练习 3</span><span class="token attribute attr-name">#[derive(Clone, Copy, Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span> width<span class="token punctuation">:</span> <span class="token number">5.0</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">3.0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">print_area</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span> <span class="token comment">// 复制操作</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"p1: &#123;:?&#125;, p2: &#123;:?&#125;"</span><span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进阶[part4]_智能指针2</title>
      <link href="/2025/07/30/Rust%E8%BF%9B%E9%98%B6-part4-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%882/"/>
      <url>/2025/07/30/Rust%E8%BF%9B%E9%98%B6-part4-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%882/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=77ffd2a2-49de-1493-debe-0fee7b73e717</cover>
      <date>Wed Jul 30 2025 10:14:35 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust进阶[part4]_智能指针2</h1><h2 id="Rc-T">Rc&lt;T&gt;</h2><p><code>Rc&lt;T&gt;</code>（Reference Counted）是 Rust 标准库提供的<strong>单线程共享所有权智能指针</strong>，通过引用计数实现多所有权管理。以下是其核心特性与使用场景</p><h3 id="核心特性">核心特性</h3><ol><li><p><strong>引用计数</strong>：</p><ul><li><p>每个实例在堆上存储：</p></li><li><p>实际数据 <code>T</code></p></li><li><p>引用计数器（记录活跃引用数量）</p></li><li><p>克隆时只增加计数器，不会深拷贝数据：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计数器从1→2</span></code></pre></li><li><p>最后一个引用离开作用域时释放内存</p></li></ul></li><li><p><strong>不可变共享</strong>：</p><ul><li><p>所有者只能通过 <code>.clone()</code> 共享不可变引用</p></li><li><p>需配合<code>RefCell&lt;T&gt;</code>实现内部可变性：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> cell <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>cell<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></li></ul></li></ol><h3 id="使用场景">使用场景</h3><p>下面这个例子使用box可以实现链表的结构</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">list</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span>list<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Nil</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token namespace">list<span class="token punctuation">::</span></span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">list<span class="token punctuation">::</span></span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">list<span class="token punctuation">::</span></span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>Cons变体：表示链表节点</p><p>第一个参数i32：存储当前节点的数值</p><p>第二个参数Box<list>：指向下一个节点的堆内存指针</p></li><li><p>Nil变体：表示链表终止节点（空节点）</p></li></ul><p>如果需要共享引用，可以<strong>转换为Rc, 需要使用<code>use std::rc::Rc;</code></strong></p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">enum</span> <span class="token type-definition class-name">list</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span>list<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Nil</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">list<span class="token punctuation">::</span></span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token namespace">list<span class="token punctuation">::</span></span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token namespace">list<span class="token punctuation">::</span></span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token namespace">list<span class="token punctuation">::</span></span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印验证</span>    <span class="token keyword">match</span> b <span class="token punctuation">&#123;</span>        <span class="token namespace">list<span class="token punctuation">::</span></span><span class="token class-name">Cons</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token keyword">ref</span> next<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"当前值: &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"下一个节点: &#123;:?&#125;"</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token namespace">list<span class="token punctuation">::</span></span><span class="token class-name">Nil</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"空节点"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>✅ <strong>推荐使用场景</strong>：</p><ul><li><strong>共享子结构</strong>：如链表尾部共享、树结构的子节点</li><li><strong>缓存实现</strong>：多个地方需要访问相同缓存数据</li><li><strong>事件系统</strong>：多个监听者订阅同一事件源</li><li><strong>配置共享</strong>：全局只读配置的分发</li></ul><h3 id="RefCell-T-实现内部可变">RefCell&lt;T&gt; 实现内部可变</h3><p><code>RefCell&lt;T&gt;</code> 是 <strong>实现&quot;内部可变性&quot;的智能指针</strong>，它本身不是可变引用，但可以通过其方法获取对内部数据的可变访问权限。与 <code>Rc&lt;T&gt;</code> 结合使用时，可以实现 <strong>多所有权下的共享可变状态</strong>。以下是详细解释：</p><ol><li><strong>内部可变性模式</strong>：<ul><li>允许在不可变引用（<code>&amp;self</code>）下修改内部数据</li><li>通过运行时借用检查替代编译时检查</li><li>违反借用规则会触发 panic（而非编译错误）</li></ul></li><li><strong>关键方法</strong>：<ul><li><code>borrow()</code>：获取不可变借用（<code>Ref&lt;T&gt;</code>）</li><li><code>borrow_mut()</code>：获取可变借用（<code>RefMut&lt;T&gt;</code>）</li><li><code>into_inner()</code>：提取内部数据</li></ul></li><li><strong>与 <code>Cell&lt;T&gt;</code> 的区别</strong>：<ul><li><code>Cell&lt;T&gt;</code>：适用于复制类型（如 <code>i32</code>、<code>bool</code>），通过 <code>get()</code> 和 <code>set()</code> 直接操作值</li><li><code>RefCell&lt;T&gt;</code>：适用于引用类型（如 <code>Vec&lt;T&gt;</code>、自定义结构体），通过借用获取引用</li></ul></li></ol><h4 id="和Rc-T-组合使用">和<code>Rc&lt;T&gt;</code>组合使用</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>rc<span class="token punctuation">::</span></span><span class="token class-name">Rc</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cell<span class="token punctuation">::</span></span><span class="token class-name">RefCell</span><span class="token punctuation">;</span><span class="token keyword">let</span> shared_data <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 克隆 Rc 获取共享所有权</span><span class="token keyword">let</span> data1 <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shared_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> data2 <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shared_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过 borrow_mut() 修改数据</span>data1<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>data2<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最终结果：[1, 2, 3, 4, 5]</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> shared_data<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Weak-T">Weak&lt;T&gt;</h2><p><code>Weak&lt;T&gt;</code> 是 Rust 中用于打破 <strong>循环引用</strong> 的弱引用智能指针。它与 <code>Rc&lt;T&gt;</code> 配合使用，既能共享数据访问权，又不会增加引用计数，从而避免内存泄漏。</p><h3 id="核心作用">核心作用</h3><ol><li><strong>打破循环引用</strong></li></ol><pre><code>当两个 `Rc&lt;T&gt;` 相互引用时，会形成循环引用，导致引用计数永远不为 0，内存无法释放。`Weak&lt;T&gt;` 通过不增加引用计数，打破循环链。</code></pre><ol start="2"><li><strong>延迟访问共享数据</strong></li></ol><p><code>Weak&lt;T&gt;</code> 可以通过 <code>.upgrade()</code> 方法尝试获取 <code>Option&lt;Rc&lt;T&gt;&gt;</code><br>如果数据已被释放，返回 <code>None</code>，避免悬空指针</p><ol start="3"><li><strong>实现缓存和观察者模式</strong></li></ol><p>缓存系统：避免缓存项因强引用无法回收</p><h3 id="使用场景-2">使用场景</h3><p>双向链表循环引用导致无法释放内存</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/** * 双向链表 */</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Node</span> <span class="token punctuation">&#123;</span>    value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>    prev<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">,</span>    next<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">weak_reference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        prev<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>        next<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        value<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        prev<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        next<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 循环引用：a.next -> b，b.prev -> a</span>    <span class="token comment">// 无法释放内存！</span><span class="token punctuation">&#125;</span></code></pre><p>通过<code>weak&lt;T&gt;</code>解决</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>rc<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Rc</span><span class="token punctuation">,</span> <span class="token class-name">Weak</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>cell<span class="token punctuation">::</span></span><span class="token class-name">RefCell</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Node</span> <span class="token punctuation">&#123;</span>    value<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>    prev<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Weak</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">,</span>    next<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建节点 A</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        prev<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>        next<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建节点 B</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        value<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        prev<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 使用 Weak&lt;T></span>        next<span class="token punctuation">:</span> <span class="token class-name">None</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 A 的 next</span>    a<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 验证引用关系</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>next_node<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"A.next.value = &#123;&#125;"</span><span class="token punctuation">,</span> next_node<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>prev_weak<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prev <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>prev_strong<span class="token punctuation">)</span> <span class="token operator">=</span> prev_weak<span class="token punctuation">.</span><span class="token function">upgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"B.prev.value = &#123;&#125;"</span><span class="token punctuation">,</span> prev_strong<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 1</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"B.prev 已释放"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="✅-推荐使用场景">✅ 推荐使用场景</h4><ol><li><strong>双向链表</strong>：将 <code>prev</code> 设为 <code>Weak&lt;T&gt;</code></li><li><strong>树结构</strong>：子节点到父节点的引用设为 <code>Weak&lt;T&gt;</code></li><li><strong>缓存系统</strong>：缓存项使用 <code>Weak&lt;T&gt;</code>，避免阻止数据释放</li><li><strong>观察者模式</strong>：订阅者使用 <code>Weak&lt;T&gt;</code> 避免阻止发布者释放</li></ol><h2 id="练习">练习</h2><p>实现一个简单的社交网络系统，包含用户和朋友的关系。</p><p>要求：</p><p>用户结构：每个用户拥有一个名字和朋友列表。</p><p>添加朋友：支持在两个用户之间建立朋友关系。</p><p>展示朋友关系：能够展示每个用户的朋友列表。</p><p>循环引用：处理用户之间的双向引用，确保不产生循环引用。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/** * 实现一个简单的社交网络 */</span><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">&#123;</span>    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    friends<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Weak</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">User</span> <span class="token punctuation">&#123;</span>            username<span class="token punctuation">:</span> name<span class="token punctuation">,</span>            friends<span class="token punctuation">:</span> <span class="token class-name">RefCell</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">print_friends</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> friend <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span>                <span class="token string">"&#123;&#125;'s friends list: &#123;&#125;"</span><span class="token punctuation">,</span>                <span class="token keyword">self</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span>                friend<span class="token punctuation">.</span><span class="token function">upgrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>username            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">add_friend</span><span class="token punctuation">(</span>this<span class="token punctuation">:</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">></span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    this<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>other<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    other<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>this<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">test_social_network</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> alice <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> bob <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add_friend</span><span class="token punctuation">(</span>alice<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bob<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alice<span class="token punctuation">.</span><span class="token function">print_friends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bob<span class="token punctuation">.</span><span class="token function">print_friends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="最佳实践">最佳实践</h2><ol><li><p>优先选择</p><ul><li>优先用 <code>Box&lt;T&gt;</code> 保持所有权清晰</li><li>确需共享时才使用 <code>Rc&lt;T&gt;</code></li></ul></li><li><p>组合使用</p><ul><li>配合 <code>RefCell&lt;T&gt;</code> 实现&quot;内部可变性&quot;</li><li>配合 <code>Weak&lt;T&gt;</code> 避免循环引用</li></ul></li><li><p>性能优化</p><ul><li><p>避免频繁 <code>.clone()</code> 传递所有权</p></li><li><p>用 <code>Rc::make_mut</code>获取唯一可变引用：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> strong <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> weak <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">downgrade</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>strong<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> unique <span class="token operator">=</span> <span class="token class-name">Rc</span><span class="token punctuation">::</span><span class="token function">make_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> strong<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 若有其他引用会触发深拷贝</span><span class="token operator">*</span>unique <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre></li></ul></li></ol><p>通过合理使用 <code>Rc&lt;T&gt;</code>，可以在单线程场景下安全高效地实现数据共享，但需要特别注意其局限性和潜在风险。</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进阶[part3]_生命周期</title>
      <link href="/2025/07/29/Rust%E8%BF%9B%E9%98%B6-part3-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2025/07/29/Rust%E8%BF%9B%E9%98%B6-part3-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=78bdf691-e54d-f4b6-b13d-ec7368f3ac4d</cover>
      <date>Tue Jul 29 2025 19:24:26 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust进阶[part3]_生命周期</h1><h2 id="生命周期概述">生命周期概述</h2><p>在Rust中，生命周期是一种确保引用有效性的机制。Rust编译器通过生命周期注解来跟踪引用的作用域，防止出现悬空引用（dangling references）。</p><h3 id="简单使用">简单使用</h3><p>下面是一个简单的生命周期注解示例：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">longest</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        y    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> string1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> string2 <span class="token operator">=</span> <span class="token string">"xyz"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">longest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The longest string is &#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个例子中，<code>'a</code> 是一个生命周期参数，它表示 <code>x</code> 和 <code>y</code> 引用的字符串切片必须至少和 <code>'a</code> 一样长。函数返回的引用也必须和 <code>'a</code> 一样长。</p><h2 id="类别">类别</h2><h3 id="fn">fn</h3><p>函数可以有生命周期参数，用于指定函数参数和返回值的生命周期关系。如上面的 <code>longest</code> 函数示例。</p><h3 id="struct">struct</h3><p>结构体也可以包含引用类型的字段，这时需要为这些引用添加生命周期注解。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">ImportantExcerpt</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    part<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> novel <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Call me Ishmael. Some years ago..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> first_sentence <span class="token operator">=</span> novel<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Could not find a '.'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token class-name">ImportantExcerpt</span> <span class="token punctuation">&#123;</span>        part<span class="token punctuation">:</span> first_sentence<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里的 <code>'a</code> 表示 <code>part</code> 字段引用的字符串切片必须至少和 <code>ImportantExcerpt</code> 实例一样长。</p><h3 id="enum">enum</h3><p>枚举同样可以包含引用类型的字段，需要添加生命周期注解。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">MaybeString</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">None</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> maybe_str <span class="token operator">=</span> <span class="token class-name">MaybeString</span><span class="token punctuation">::</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="生命周期消除">生命周期消除</h2><blockquote><p>rust编译器自动推理，无需手动重复添加</p></blockquote><ol><li>每个引用参数都有自己的生命周期</li><li>如果只有一个输入引用参数，那么它的生命周期会被赋予所有输出引用</li><li>如果有多个输入生命周期参数，但是其中一个是 <code>&amp;self</code> 或者 <code>&amp;mut self</code> ，那它的生命周期也会被赋予所有输出引用 ，比如结构体和枚举自己实现的方法中</li></ol><h3 id="示例">示例</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b' '</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>在这个函数中，虽然没有显式地添加生命周期注解，但编译器根据生命周期消除规则，自动为 <code>s</code> 和返回值添加了相同的生命周期。</p><h2 id="特殊生命周期的标注">特殊生命周期的标注</h2><p>全局变量或者字符串字面量的生命周期在整个程序运行期间都有效，一般是使用 <code>'static</code> 来标注的生命周期。</p><h3 id="示例-2">示例</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"I have a static lifetime."</span><span class="token punctuation">;</span></code></pre><p>这里的 <code>s</code> 是一个字符串字面量，它的生命周期是 <code>'static</code>，意味着它在整个程序运行期间都有效。</p><h2 id="生命周期约束">生命周期约束</h2><p>生命周期注解可以用来约束多个引用之间的关系。</p><h3 id="示例-3">示例</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">longest_with_an_announcement</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> ann<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token keyword">where</span>    <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Announcement! &#123;&#125;"</span><span class="token punctuation">,</span> ann<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        y    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> string1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> string2 <span class="token operator">=</span> <span class="token string">"xyz"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> ann <span class="token operator">=</span> <span class="token string">"Let's find the longest string!"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">longest_with_an_announcement</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">,</span> ann<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The longest string is &#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个例子中，<code>'a</code> 约束了 <code>x</code> 和 <code>y</code> 引用的字符串切片的生命周期，同时也约束了返回值的生命周期。</p><h2 id="生命周期子类型和协变">生命周期子类型和协变</h2><p>生命周期可以有子类型关系，较短的生命周期可以被视为较长生命周期的子类型。这在协变（covariance）中尤为重要。</p><h3 id="示例-4">示例</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        r <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// x 在这里离开作用域，r 变成悬空引用</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"r: &#123;&#125;"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个例子中，<code>x</code> 的生命周期比 <code>r</code> 短，<code>x</code> 的生命周期是 <code>r</code> 生命周期的子类型。当 <code>x</code> 离开作用域时，<code>r</code> 变成悬空引用，这段代码会编译错误。</p><h2 id="练习">练习</h2><p>要求：修复一下原始代码的bug</p><h3 id="原始代码">原始代码</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">test_lifetime_multiple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">insert_value</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token punctuation">,</span> <span class="token lifetime-annotation symbol">'b</span><span class="token operator">></span><span class="token punctuation">(</span>my_vec<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'b</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        my_vec<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> my_vec<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> val1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> val2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> my_vec<span class="token punctuation">;</span>    <span class="token function">insert_value</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"a is &#123;:?&#125; "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> my_vec<span class="token punctuation">;</span>    <span class="token function">insert_value</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"b is &#123;:?&#125;"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;my_vec:?&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="修改后的代码">修改后的代码</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">test_lifetime_multiple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">insert_value</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token punctuation">,</span> <span class="token lifetime-annotation symbol">'b</span><span class="token operator">></span><span class="token punctuation">(</span>my_vec<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'b</span> <span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'b</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        my_vec<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> my_vec<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> val1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> val2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> my_vec<span class="token punctuation">;</span>    <span class="token function">insert_value</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"a is &#123;:?&#125; "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> my_vec<span class="token punctuation">;</span>    <span class="token function">insert_value</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"b is &#123;:?&#125;"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;my_vec:?&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="解释">解释</h3><p><strong>分离生命周期参数</strong>：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">insert_value</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token punctuation">,</span> <span class="token lifetime-annotation symbol">'b</span><span class="token operator">></span><span class="token punctuation">(</span>my_vec<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">mut</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'b</span> <span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'b</span> <span class="token keyword">i32</span><span class="token punctuation">)</span></code></pre><ul><li><code>'a</code> 是 <code>my_vec</code> 可变引用的生命周期</li><li><code>'b</code> 是存储在 <code>Vec</code> 中的引用的生命周期</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进阶[part2]_泛型</title>
      <link href="/2025/07/29/Rust%E8%BF%9B%E9%98%B6-part2-%E6%B3%9B%E5%9E%8B/"/>
      <url>/2025/07/29/Rust%E8%BF%9B%E9%98%B6-part2-%E6%B3%9B%E5%9E%8B/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=46b6d237-4fd7-6e71-e627-c8fdbdb18f61</cover>
      <date>Tue Jul 29 2025 16:22:20 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust进阶[part2]_泛型</h1><h3 id="泛型概述">泛型概述</h3><p>在定义函数时运用泛型，可将原本函数签名里明确指定参数和返回值类型的部分，用泛型来替代。这种方式能增强代码的适应性，为函数调用者赋予更多功能，还能避免代码重复。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">T</span><span class="token punctuation">&#123;</span>  a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span></code></pre><p>不过，并非所有的T类型都能进行相加操作，此时会提示错误：<br><code>genertic_type.rs(5, 9): consider restricting type parameter 'T' with trait 'Add': ': std::ops::Add&lt;Output = T&gt;'</code><br>修正后的代码如下：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Add</span><span class="token operator">&lt;</span><span class="token class-name">Output</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token operator">>></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">T</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span></code></pre><h3 id="使用场景">使用场景</h3><h4 id="在函数定义中使用泛型">在函数定义中使用泛型</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">largest</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>cmp<span class="token punctuation">::</span></span><span class="token class-name">PartialOrd</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> largest <span class="token operator">=</span> <span class="token operator">&amp;</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> list <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> item <span class="token operator">></span> largest <span class="token punctuation">&#123;</span>            largest <span class="token operator">=</span> item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    largest<span class="token punctuation">&#125;</span></code></pre><h4 id="在结构体中使用泛型">在结构体中使用泛型</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 实例化泛型结构体</span><span class="token keyword">let</span> integer <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> float <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">4.0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="在枚举里面使用泛型">在枚举里面使用泛型</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 实例化泛型枚举</span><span class="token keyword">fn</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span>numerator<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> denominator<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> denominator <span class="token operator">==</span> <span class="token number">0.0</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"Division by zero"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>numerator <span class="token operator">/</span> denominator<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="impl之后声明泛型T">impl之后声明泛型T</h4><p>泛型参数可以和结构体定义中声明的泛型参数不一样。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">></span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">mixup</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>            x<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> other<span class="token punctuation">.</span>y<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 示例用法</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10.4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">:</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token char">'c'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">mixup</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="const泛型">const泛型</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 定义一个固定大小的数组类型</span><span class="token keyword">struct</span> <span class="token type-definition class-name">ArrayBuffer</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">N</span><span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">;</span> <span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    len<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">N</span><span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token operator">></span> <span class="token class-name">ArrayBuffer</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token operator">></span><span class="token keyword">where</span>    <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Default</span> <span class="token operator">+</span> <span class="token class-name">Copy</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayBuffer</span> <span class="token punctuation">&#123;</span>            data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            len<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建一个可以存储10个i32的缓冲区</span><span class="token keyword">let</span> buffer<span class="token punctuation">:</span> <span class="token class-name">ArrayBuffer</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>where子句可以直接写在泛型参数后面，例如：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 写法1：使用where子句</span><span class="token keyword">fn</span> <span class="token function-definition function">new_array_buffer</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">N</span><span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">ArrayBuffer</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token operator">></span><span class="token keyword">where</span>    <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Default</span> <span class="token operator">+</span> <span class="token class-name">Copy</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> <span class="token punctuation">...</span> <span class="token punctuation">&#125;</span><span class="token comment">// 写法2：直接在泛型参数后指定约束</span><span class="token keyword">fn</span> <span class="token function-definition function">new_array_buffer</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Default</span> <span class="token operator">+</span> <span class="token class-name">Copy</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">N</span><span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">ArrayBuffer</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">...</span> <span class="token punctuation">&#125;</span></code></pre><h2 id="泛型代码的性能">泛型代码的性能</h2><p>Rust通过在编译时对泛型代码进行单态化来保证效率。</p><p>当代码运行时，其执行效率和手写每个具体定义的重复代码一样。正是这个单态化过程，使得Rust泛型在运行时极为高效。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 泛型代码</span><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Add</span><span class="token operator">&lt;</span><span class="token class-name">Output</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token operator">>></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">T</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span class="token comment">// 单态化后的代码示例</span><span class="token keyword">fn</span> <span class="token function-definition function">add_i32</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">add_f64</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">f64</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust进阶[part1]_智能指针概述&amp;box指针</title>
      <link href="/2025/07/18/Rust%E8%BF%9B%E9%98%B6-part1-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E6%A6%82%E8%BF%B0-box%E6%8C%87%E9%92%88/"/>
      <url>/2025/07/18/Rust%E8%BF%9B%E9%98%B6-part1-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E6%A6%82%E8%BF%B0-box%E6%8C%87%E9%92%88/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=87e4d33b-f6bf-ba3c-ecfa-f2c526cc556a</cover>
      <date>Fri Jul 18 2025 09:57:54 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust进阶[part1]_智能指针概述&amp;box指针</h1><h2 id="智能指针概述">智能指针概述</h2><p>在Rust中，智能指针是一类特殊的数据结构，它们不仅像普通指针一样可以引用数据，还带有额外的元数据和功能。与普通指针不同，智能指针通常使用结构体实现，并且会实现 <code>Deref</code> 和 <code>Drop</code> 等特定的trait，以提供更强大的功能和更安全的内存管理。</p><p>智能指针在Rust编程中扮演着重要的角色，它们能够帮助开发者处理复杂的内存管理场景，确保程序的安全性和性能。例如，在处理动态大小的数据、递归数据结构或者需要自定义资源释放逻辑时，智能指针就显得尤为重要。</p><h2 id="Box指针">Box指针</h2><h3 id="内存分配到堆上">内存分配到堆上</h3><p>在Rust中，栈内存的分配和释放是自动且高效的，但栈空间是有限的。对于一些大型的数据结构或者需要在运行时动态确定大小的数据，将其存储在栈上可能会导致栈溢出。这时，我们可以使用 <code>Box</code> 指针将数据分配到堆上。</p><p><code>Box</code> 是Rust标准库中最基本的智能指针之一，它允许我们在堆上分配内存，并将数据存储在其中。通过 <code>Box</code> 指针，我们可以在栈上存储一个指向堆上数据的引用，从而实现对堆上数据的访问。</p><p>以下是一个简单的示例，展示了如何使用 <code>Box</code> 将一个整数分配到堆上：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> boxed_int <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value inside the box is: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token operator">*</span>boxed_int<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个示例中，<code>Box::new(42)</code> 创建了一个 <code>Box</code> 指针，它指向堆上存储的整数 <code>42</code>。</p><p>通过解引用运算符 <code>*</code>，我们可以访问堆上的数据。</p><h3 id="允许处理动态大小类型（DST）">允许处理动态大小类型（DST）</h3><p>Rust中的动态大小类型（DST）是指在编译时无法确定大小的数据类型，例如切片（<code>[T]</code>）和特征对象（<code>dyn Trait</code>）。</p><p>由于栈上的内存分配需要在编译时确定大小，因此无法直接将DST存储在栈上。而 <code>Box</code> 指针可以用于存储DST，因为它会在堆上分配内存，从而避免了栈上内存分配的限制。</p><p>以下是一个使用 <code>Box</code> 存储切片的示例：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> slice<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> boxed_slice<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The boxed slice contains: &#123;:?&#125;"</span><span class="token punctuation">,</span> boxed_slice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个示例中，我们首先创建了一个切片 <code>slice</code>，然后使用 <code>Box::from</code> 方法将其转换为 <code>Box&lt;[i32]&gt;</code> 类型，从而将切片存储在堆上。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 允许处理动态大小类型，比如结构体和元组</span><span class="token keyword">let</span> boxed_tuple <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Boxed tuple: &#123;:?&#125;"</span><span class="token punctuation">,</span> boxed_tuple<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="递归数据结构">递归数据结构</h3><p>递归数据结构是指包含自身类型的成员的结构体或枚举。由于递归数据结构的大小在编译时无法确定，因此无法直接将其存储在栈上。<code>Box</code> 指针可以用于解决这个问题，通过在递归数据结构中使用 <code>Box</code> 指针，我们可以将递归成员存储在堆上，从而避免栈溢出的问题。</p><p>以下是一个使用 <code>Box</code> 实现链表节点的示例：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">enum</span> <span class="token type-definition class-name">List</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Nil</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">::</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">::</span><span class="token class-name">Nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The list is: &#123;:?&#125;"</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个示例中，<code>List</code> 枚举表示一个链表，其中 <code>Cons</code> 变体包含一个整数和一个指向另一个 <code>List</code> 节点的 <code>Box</code> 指针。通过使用 <code>Box</code> 指针，我们可以创建一个递归的链表结构。</p><h3 id="类型擦除">类型擦除</h3><p>类型擦除是指在编译时隐藏具体的类型信息，只保留类型的共性。在Rust中，我们可以使用 <code>Box&lt;dyn Trait&gt;</code> 来实现类型擦除。<code>Box&lt;dyn Trait&gt;</code> 是一个特征对象，它可以存储任何实现了指定特征的类型的值。</p><p>以下是一个使用 <code>Box&lt;dyn Trait&gt;</code> 实现类型擦除的示例：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Draw</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Circle</span><span class="token punctuation">;</span><span class="token keyword">impl</span> <span class="token class-name">Draw</span> <span class="token keyword">for</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Drawing a circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Square</span><span class="token punctuation">;</span><span class="token keyword">impl</span> <span class="token class-name">Draw</span> <span class="token keyword">for</span> <span class="token class-name">Square</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Drawing a square"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> shapes<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Draw</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>        <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Square</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> shape <span class="token keyword">in</span> shapes <span class="token punctuation">&#123;</span>        shape<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个示例中，我们定义了一个 <code>Draw</code> 特征，并为 <code>Circle</code> 和 <code>Square</code> 结构体实现了该特征。然后，我们创建了一个 <code>Vec&lt;Box&lt;dyn Draw&gt;&gt;</code> 类型的向量，其中存储了 <code>Circle</code> 和 <code>Square</code> 的实例。通过使用 <code>Box&lt;dyn Draw&gt;</code>，我们实现了类型擦除，使得向量可以存储不同类型的形状。</p><h3 id="内存管理和性能优化">内存管理和性能优化</h3><p><code>Box</code> 指针在内存管理方面具有重要的作用。当 <code>Box</code> 指针离开作用域时，Rust会自动调用其 <code>Drop</code> 实现，从而释放堆上分配的内存。这种自动内存管理机制确保了内存的安全性，避免了内存泄漏的问题。</p><p>在性能方面，由于 <code>Box</code> 指针涉及到堆上的内存分配和释放，因此会比栈上的内存分配和释放稍微慢一些。但是，对于需要动态分配内存或者处理动态大小类型的场景，使用 <code>Box</code> 指针是必要的。在实际编程中，我们应该根据具体的需求和性能要求来选择合适的内存分配方式。</p><h3 id="box的优缺点">box的优缺点</h3><h4 id="优点">优点</h4><ul><li><strong>动态内存分配</strong>：允许在运行时动态分配内存，处理大型数据结构和动态大小类型。</li><li><strong>递归数据结构支持</strong>：可以用于实现递归数据结构，避免栈溢出的问题。</li><li><strong>类型擦除</strong>：支持类型擦除，使得代码更加灵活和可复用。</li><li><strong>自动内存管理</strong>：Rust的所有权系统确保了 <code>Box</code> 指针离开作用域时，堆上的内存会被自动释放，避免了内存泄漏。</li></ul><h4 id="缺点">缺点</h4><ul><li><strong>性能开销</strong>：堆上的内存分配和释放比栈上的内存分配和释放稍微慢一些，可能会影响性能。</li><li><strong>额外的间接访问</strong>：使用 <code>Box</code> 指针需要通过指针进行间接访问，可能会增加一定的开销。</li></ul><h2 id="Drop-Trait">Drop Trait</h2><p><code>Drop</code> trait 用于自定义当值离开作用域时执行的代码，通常用于释放资源，例如内存、文件句柄、网络连接等。当一个实现了 <code>Drop</code> trait 的值离开作用域时，Rust会自动调用其 <code>drop</code> 方法。</p><p>以下是一个简单的示例，展示了如何实现 <code>Drop</code> trait：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">CustomSmartPointer</span> <span class="token punctuation">&#123;</span>    data<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Drop</span> <span class="token keyword">for</span> <span class="token class-name">CustomSmartPointer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">drop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Dropping CustomSmartPointer with data `&#123;&#125;`!"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">CustomSmartPointer</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"my stuff"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token class-name">CustomSmartPointer</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"other stuff"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"CustomSmartPointers created."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个示例中，我们定义了一个 <code>CustomSmartPointer</code> 结构体，并为其实现了 <code>Drop</code> trait。当 <code>c</code> 和 <code>d</code> 离开作用域时，Rust会自动调用它们的 <code>drop</code> 方法，打印出相应的信息。</p><h2 id="Deref-Trait">Deref Trait</h2><p><code>Deref</code> trait 用于重载解引用运算符（<code>*</code>），允许我们自定义指针类型的解引用行为。通过实现 <code>Deref</code> trait，我们可以让自定义的智能指针像普通指针一样使用解引用运算符。</p><p><code>Deref</code> trait 定义了一个 <code>deref</code> 方法，该方法返回一个指向内部数据的引用。</p><p>以下是一个简单的示例，展示了如何实现 <code>Deref</code> trait：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Deref</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyBox</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token class-name">Deref</span> <span class="token keyword">for</span> <span class="token class-name">MyBox</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">type</span> <span class="token type-definition class-name">Target</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">deref</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Target</span> <span class="token punctuation">&#123;</span>        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token class-name">MyBox</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个示例中，我们定义了一个 <code>MyBox</code> 结构体，并为其实现了 <code>Deref</code> trait。通过实现 <code>deref</code> 方法，我们可以使用解引用运算符 <code>*</code> 来访问 <code>MyBox</code> 内部的数据。</p><h2 id="练习">练习</h2><h3 id="1-创建一个大型数组并将其分配在堆上，然后测量和比较分配在堆和栈上的性能差异。">1. 创建一个大型数组并将其分配在堆上，然后测量和比较分配在堆和栈上的性能差异。</h3><p>使用instant::now() ; 以及elapsed()</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Instant</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">ARRAY_SIZE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 测量栈上分配的时间</span>    <span class="token keyword">let</span> start_stack <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> _stack_array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token constant">ARRAY_SIZE</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token constant">ARRAY_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> stack_duration <span class="token operator">=</span> start_stack<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 测量堆上分配的时间</span>    <span class="token keyword">let</span> start_heap <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> _heap_array<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token constant">ARRAY_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">into_boxed_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> heap_duration <span class="token operator">=</span> start_heap<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Stack allocation time: &#123;:?&#125;"</span><span class="token punctuation">,</span> stack_duration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Heap allocation time: &#123;:?&#125;"</span><span class="token punctuation">,</span> heap_duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-创建一个包含1-000-000个元素的数据，分别将其分配在堆和栈上。使用std-time-Instant来测量分配和访问时间。">2. 创建一个包含1_000_000个元素的数据，分别将其分配在堆和栈上。使用std::time::Instant来测量分配和访问时间。</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Instant</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">ELEMENT_COUNT</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 栈上分配</span>    <span class="token keyword">let</span> start_stack_alloc <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> stack_data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token constant">ELEMENT_COUNT</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token constant">ELEMENT_COUNT</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> stack_alloc_time <span class="token operator">=</span> start_stack_alloc<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> start_stack_access <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token constant">ELEMENT_COUNT</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> _ <span class="token operator">=</span> stack_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> stack_access_time <span class="token operator">=</span> start_stack_access<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 堆上分配</span>    <span class="token keyword">let</span> start_heap_alloc <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> heap_data<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token constant">ELEMENT_COUNT</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">into_boxed_slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> heap_alloc_time <span class="token operator">=</span> start_heap_alloc<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> start_heap_access <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token constant">ELEMENT_COUNT</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> _ <span class="token operator">=</span> heap_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> heap_access_time <span class="token operator">=</span> start_heap_access<span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Stack allocation time: &#123;:?&#125;"</span><span class="token punctuation">,</span> stack_alloc_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Stack access time: &#123;:?&#125;"</span><span class="token punctuation">,</span> stack_access_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Heap allocation time: &#123;:?&#125;"</span><span class="token punctuation">,</span> heap_alloc_time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Heap access time: &#123;:?&#125;"</span><span class="token punctuation">,</span> heap_access_time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>通过以上练习，我们可以更深入地了解 <code>Box</code> 指针在堆上分配内存的性能特点，以及与栈上分配的差异。</p><h3 id="3-实现一个简单的文件系统模拟">3. 实现一个简单的文件系统模拟</h3><h4 id="目标">目标</h4><p>实现一个简单的文件系统模拟，其中包含文件和文件夹的概念。文件夹可以包含文件和其他文件夹。使用 Box 来管理内存，并实现对文件系统的基本操作（如创建文件、创建文件夹、列出文件和文件夹）。</p><h4 id="作业要求">作业要求</h4><ol><li><p><strong>定义 FileSystem trait 和 Node 枚举</strong></p><ul><li><code>FileSystem</code> trait 包含 <code>create_file</code>、<code>create_folder</code> 和 <code>list_contents</code> 方法。</li><li><code>Node</code> 枚举包含 <code>File</code> 和 <code>Folder</code> 变体。</li></ul></li><li><p><strong>实现 FolderNode 结构体</strong></p><ul><li><code>FolderNode</code> 实现 <code>FileSystem</code> trait，包含 <code>name</code> 和 <code>contents</code> 字段。</li><li>使用 <code>Box</code> 管理 <code>contents</code> 中的子节点。</li></ul></li><li><p><strong>实现文件系统的基本操作</strong></p><ul><li><code>create_file</code> 方法在文件夹中创建文件。</li><li><code>create_folder</code> 方法在文件夹中创建子文件夹。</li><li><code>list_contents</code> 方法列出文件夹的所有内容。</li></ul></li><li><p><strong>测试文件系统的操作</strong></p><ul><li>创建根文件夹并添加文件和文件夹。</li><li>创建子文件夹并添加文件。</li><li>列出文件夹的内容并输出文件系统结构。</li></ul></li></ol><p>提示</p><ul><li>使用 <code>Box</code> 来管理 <code>Folder</code> 中的子节点。</li><li>使用递归方法来遍历和列出文件和文件夹的内容。</li><li>考虑使用 <code>Vec</code> 来存储文件夹的子节点。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/** * ---------------文件系统---------------------------- */</span><span class="token comment">// 节点枚举 用来区分文件夹还是文件，文件夹通过box包装来避免递归类型的大小歧义</span><span class="token comment">// 定义 Node 枚举：包含文件（File）和文件夹（Folder）两种变体</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">enum</span> <span class="token type-definition class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">// 文件：存储文件名</span>    <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">FolderNode</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 文件夹：存储 FolderNode 的 Box（避免递归结构的大小问题）</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义 FileSystem trait：包含文件系统的核心操作</span><span class="token keyword">trait</span> <span class="token type-definition class-name">FileSystem</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">create_file</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在当前文件夹创建文件</span>    <span class="token keyword">fn</span> <span class="token function-definition function">create_folder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span><span class="token punctuation">;</span> <span class="token comment">// 在当前文件夹创建子文件夹（返回子文件夹引用以便链式操作）</span>    <span class="token keyword">fn</span> <span class="token function-definition function">list_contents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> indent<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 列出当前文件夹内容（带缩进，方便展示结构）</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义 FolderNode 结构体：表示文件夹节点</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">FolderNode</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>        <span class="token comment">// 文件夹名称</span>    contents<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Node</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 存储子节点（文件或文件夹）</span><span class="token punctuation">&#125;</span><span class="token comment">// 为 FolderNode 实现 FileSystem trait</span><span class="token keyword">impl</span> <span class="token class-name">FileSystem</span> <span class="token keyword">for</span> <span class="token class-name">FolderNode</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 创建文件：向 contents 添加 File 节点</span>    <span class="token keyword">fn</span> <span class="token function-definition function">create_file</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">::</span><span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 2. 创建子文件夹：向 contents 添加 Folder 节点，并返回子文件夹的可变引用</span>    <span class="token keyword">fn</span> <span class="token function-definition function">create_folder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 新建子文件夹节点</span>        <span class="token keyword">let</span> new_folder <span class="token operator">=</span> <span class="token class-name">FolderNode</span> <span class="token punctuation">&#123;</span>            name<span class="token punctuation">:</span> name<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            contents<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 将子文件夹包装为 Box 并加入 contents</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">::</span><span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>new_folder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 找到刚添加的子文件夹并返回其可变引用（通过 last_mut 确保是最后一个元素）</span>        <span class="token keyword">match</span> <span class="token keyword">self</span><span class="token punctuation">.</span>contents<span class="token punctuation">.</span><span class="token function">last_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">::</span><span class="token class-name">Folder</span><span class="token punctuation">(</span>folder_box<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">*</span><span class="token operator">*</span>folder_box<span class="token punctuation">,</span>            _ <span class="token operator">=></span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"创建文件夹失败：逻辑错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 理论上不会触发</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 3. 列出内容：递归遍历子节点，带缩进展示结构</span>    <span class="token keyword">fn</span> <span class="token function-definition function">list_contents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> indent<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 打印当前文件夹名称</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;&#123;&#125;"</span><span class="token punctuation">,</span> indent<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历子节点</span>        <span class="token keyword">for</span> node <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>contents <span class="token punctuation">&#123;</span>            <span class="token keyword">match</span> node <span class="token punctuation">&#123;</span>                <span class="token class-name">Node</span><span class="token punctuation">::</span><span class="token class-name">File</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;&#123;&#125;"</span><span class="token punctuation">,</span> indent<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 打印文件</span>                <span class="token class-name">Node</span><span class="token punctuation">::</span><span class="token class-name">Folder</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token operator">=></span> folder<span class="token punctuation">.</span><span class="token function">list_contents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;  "</span><span class="token punctuation">,</span> indent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 递归打印子文件夹（增加缩进）</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试代码：创建文件系统并执行操作</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">test_file_system</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 创建根文件夹</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> root <span class="token operator">=</span> <span class="token class-name">FolderNode</span> <span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span> <span class="token string">"Root"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        contents<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 根文件夹操作：创建文件 + 子文件夹</span>    root<span class="token punctuation">.</span><span class="token function">create_file</span><span class="token punctuation">(</span><span class="token string">"file1.txt"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根目录创建文件</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> sub1 <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">create_folder</span><span class="token punctuation">(</span><span class="token string">"sub1"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根目录创建子文件夹 sub1</span>    sub1<span class="token punctuation">.</span><span class="token function">create_file</span><span class="token punctuation">(</span><span class="token string">"subfile1.txt"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在 sub1 中创建文件</span>    <span class="token comment">// 3. 子文件夹嵌套操作</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> sub2 <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">create_folder</span><span class="token punctuation">(</span><span class="token string">"sub2"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根目录创建子文件夹 sub2</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> subsub2 <span class="token operator">=</span> sub2<span class="token punctuation">.</span><span class="token function">create_folder</span><span class="token punctuation">(</span><span class="token string">"subsub2"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在 sub2 中创建子文件夹 subsub2</span>    subsub2<span class="token punctuation">.</span><span class="token function">create_file</span><span class="token punctuation">(</span><span class="token string">"deepfile.txt"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在 subsub2 中创建文件</span>    <span class="token comment">// 4. 列出根文件夹内容（从空缩进开始）</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"文件系统结构："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span><span class="token function">list_contents</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础[part9]_返回值和错误处理、模块化</title>
      <link href="/2025/07/16/Rust%E5%9F%BA%E7%A1%80%5Bpart9%5D_%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2025/07/16/Rust%E5%9F%BA%E7%A1%80%5Bpart9%5D_%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E3%80%81%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=85f3b52f-555d-24d9-8cad-e7f23954c2ca</cover>
      <date>Wed Jul 16 2025 15:38:07 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust基础[part9]_返回值和错误处理、模块化</h1><h2 id="返回值">返回值</h2><h3 id="Option-T"><code>Option&lt;T&gt;</code></h3><h4 id="基本使用">基本使用</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">option_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建Option</span>    <span class="token keyword">let</span> some_number <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> some_string <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> absent_number<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>    <span class="token comment">//使用</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">plus_one</span><span class="token punctuation">(</span>some_number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">plus_one</span><span class="token punctuation">(</span>absent_number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"x: &#123;:?&#125;, y: &#123;:?&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">plus_one</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">match</span> x <span class="token punctuation">&#123;</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token class-name">None</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Some</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="辅助函数">辅助函数</h4><ul><li>unwrap() : 提取option中的值，但是没有值的时候会panic</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">unwrap_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> some_number <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> some_string <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> absent_number<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"some_number: &#123;:?&#125;"</span><span class="token punctuation">,</span> some_number<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"some_string: &#123;:?&#125;"</span><span class="token punctuation">,</span> some_string<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// println!("absent_number: &#123;:?&#125;", absent_number.unwrap());</span><span class="token punctuation">&#125;</span></code></pre><ul><li>is_some() 和is_none()</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">is_some_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> some_number <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> some_string <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> absent_number<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"some_number: &#123;:?&#125;"</span><span class="token punctuation">,</span> some_number<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"some_string: &#123;:?&#125;"</span><span class="token punctuation">,</span> some_string<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"absent_number: &#123;:?&#125;"</span><span class="token punctuation">,</span> absent_number<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">is_none_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> some_number <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> some_string <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> absent_number<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"some_number: &#123;:?&#125;"</span><span class="token punctuation">,</span> some_number<span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"some_string: &#123;:?&#125;"</span><span class="token punctuation">,</span> some_string<span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"absent_number: &#123;:?&#125;"</span><span class="token punctuation">,</span> absent_number<span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="错误处理">错误处理</h2><p>Rust中的错误主要分为两类：</p><ul><li>可恢复错误：通常用于系统全局角度来看可以接受的错误，例如处理用户的访问、操作等错误，这些错误只会影响某个用户自身的操作进程，而不会对系统的全局稳定性产生影响  Result&lt;T,E&gt;</li><li>不可恢复错误：全局性或系统性的错误，会比较致命  Panic</li></ul><h3 id="Panic"><code>Panic</code></h3><ul><li><code>panic!</code> 是 Rust 标准库提供的宏，用于<strong>主动引发运行时错误</strong>。</li><li>当 <code>panic!</code> 被调用时：<ul><li>程序打印错误信息（包括文件名、行号等）。</li><li>展开（unwind）调用栈并清理资源（默认行为）。</li><li>最终终止当前线程或整个程序（取决于编译配置）。</li></ul></li></ul><h4 id="常见场景">常见场景</h4><table><thead><tr><th>场景</th><th>描述</th></tr></thead><tbody><tr><td><code>panic!</code> 显式调用</td><td>主动触发 panic</td></tr><tr><td>数组越界访问</td><td>如 <code>vec[100]</code> 访问长度不足的向量</td></tr><tr><td><code>unwrap()</code> 或 <code>expect()</code> 错误</td><td>当 <code>Option</code> 或 <code>Result</code> 为 <code>None</code> 或 <code>Err</code> 时</td></tr><tr><td>断言失败</td><td>使用 <code>assert!</code>, <code>assert_eq!</code> 等宏检查失败时</td></tr></tbody></table><h4 id="行为控制">行为控制</h4><h5 id="1-栈展开（Unwinding）">1. <strong>栈展开（Unwinding）</strong></h5><p>默认情况下，panic 会：</p><ul><li>展开调用栈（stack unwinding）</li><li>执行析构函数（drop）</li><li>清理资源</li></ul><p>这是最安全的方式，但可能带来一定性能开销。</p><h5 id="2-中止（Aborting）">2. <strong>中止（Aborting）</strong></h5><p>在 [Cargo.toml](file:///Users/tinachan/rust/hello_cargo/Cargo.toml) 中可以配置：</p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">profile.release</span><span class="token punctuation">]</span><span class="token key property">panic</span> <span class="token punctuation">=</span> <span class="token string">"abort"</span></code></pre><ul><li><code>&quot;abort&quot;</code>：直接终止程序，不进行栈展开（适用于嵌入式系统或性能敏感场景）</li><li><code>&quot;unwind&quot;</code>：默认值，保留栈展开行为</li></ul><h4 id="示例代码">示例代码</h4><h5 id="示例-1：显式-panic">示例 1：显式 panic</h5><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"这是一个主动 panic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="示例-2：数组越界访问">示例 2：数组越界访问</h5><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 越界访问触发 panic</span></code></pre><h5 id="示例-3：使用-unwrap-触发-panic">示例 3：使用 <code>unwrap()</code> 触发 panic</h5><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> s<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span><span class="token keyword">let</span> _ <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发 panic</span></code></pre><h4 id="获取-Backtrace（调试信息）">获取 Backtrace（调试信息）</h4><p>设置环境变量以获取详细的调用栈信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">RUST_BACKTRACE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token function">cargo</span> run</code></pre><p>输出将包含完整的调用栈，帮助定位 panic 发生的位置。</p><h5 id="panic-处理策略（高级）">panic 处理策略（高级）</h5><p>你可以通过 <code>std::panic::set_hook</code> 自定义 panic 处理逻辑：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>panic<span class="token punctuation">;</span><span class="token namespace">panic<span class="token punctuation">::</span></span><span class="token function">set_hook</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>info<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"自定义 panic 处理：&#123;&#125;"</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"测试自定义 panic hook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注意：此方法只能设置一次，通常用于日志记录或崩溃分析工具集成。</p></blockquote><h3 id="Result">Result</h3><p>在 Rust 中，<code>Result</code> 是一个标准库提供的枚举类型，用于处理<strong>可恢复错误（recoverable errors）</strong>。与 <code>panic!</code> 不同，<code>Result</code> 允许开发者通过返回值明确地处理成功或失败的情况，是编写健壮程序的核心机制之一。</p><h4 id="定义">定义</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><ul><li><code>T</code>：表示操作成功时返回的值类型。</li><li><code>E</code>：表示操作失败时返回的错误类型。</li></ul><h4 id="二、常用操作">二、常用操作</h4><h5 id="1-match-匹配">1. <code>match</code> 匹配</h5><p>最基础也最灵活的方式：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">result_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">match</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"result=&#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="2-提取内部值：-unwrap-和-expect-msg">2. 提取内部值： <code>unwrap()</code> 和 <code>expect(msg)</code></h5><ul><li><code>unwrap()</code>：如果 <code>Ok</code> 返回内部值；如果是 <code>Err</code> 则触发 panic。</li><li><code>expect(&amp;str)</code>：类似 <code>unwrap()</code>，但可以自定义 panic 消息。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果出错会 panic</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"除法计算错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自定义 panic 消息</span></code></pre><blockquote><p>⚠️ 注意：仅在测试或确定不会出错的情况下使用。</p></blockquote><h5 id="3-传播错误-运算符">3. 传播错误:<code>?</code> 运算符</h5><p>用于在函数中快速传播错误。只能用于返回类型为 <code>Result</code> 的函数中。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">read_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token string">"file.txt"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h5 id="4-对内部值进行修改：map-、map-err和-and-then">4. 对内部值进行修改：<code>map</code> 、<code>map_err</code>和 <code>and_then</code></h5><ul><li><code>map(f)</code>：对 <code>Ok</code> 值进行映射，不影响 <code>Err</code>。</li><li><code>map_err(f)</code>: 可以修改<code>Err</code>类型</li><li><code>and_then(f)</code>： 链式调用，只有当前为 <code>Ok</code> 时才继续执行。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token closure-punctuation punctuation">|</span></span> <span class="token function">divide</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="5-or-和-or-else">5. <code>or</code> 和 <code>or_else</code></h5><ul><li><code>or(res)</code>：如果当前是 <code>Err</code>，则使用给定的 <code>Result</code> 替代。</li><li><code>or_else(f)</code>：如果当前是 <code>Err</code>，则调用闭包获取替代值。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果出错就返回默认值 42</span></code></pre><h5 id="6-is-ok-is-err-ok-err">6. <code>is_ok</code> / <code>is_err</code> / <code>ok()</code> / <code>err()</code></h5><p>用于判断状态或转换为 <code>Option</code>。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">if</span> result<span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"操作成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> opt <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换为 Option&lt;T></span></code></pre><h5 id="7-对返回的错误进行处理-err-kind">7. 对返回的错误进行处理 <code>err.kind</code></h5><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">ErrorKind</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">error_kind_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> greeting_result <span class="token operator">=</span> <span class="token keyword">match</span> greeting <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=></span> result<span class="token punctuation">,</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">match</span> err<span class="token punctuation">.</span><span class="token function">kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ErrorKind</span><span class="token punctuation">::</span><span class="token class-name">NotFound</span> <span class="token operator">=></span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            other_error <span class="token operator">=></span> <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"Error: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="三、注意事项">三、注意事项</h4><ol><li><p>避免滥用 <code>unwrap()</code> 和 <code>expect()</code>：除非你非常确定某个操作不会失败，否则应优先使用 <code>match</code> 或 <code>?</code> 来处理错误。</p></li><li><p>错误类型保持一致：在一个项目中，建议统一使用相同的错误类型（如自定义枚举或 <code>anyhow::Error</code>），以便集中处理。</p></li><li><p>使用 <code>?</code> 时注意函数签名：只能在返回 <code>Result</code> 或 <code>Option</code> 的函数中使用 <code>?</code>，否则编译器会报错。</p></li><li><p>错误信息应清晰具体：不要简单返回 <code>&quot;error&quot;</code>，而应该提供上下文信息，便于调试和日志分析。</p></li><li><p>配合 <code>From</code> trait 自动转换错误：你可以为自定义错误类型实现 <code>From</code>，从而简化错误传播。</p></li></ol><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token class-name">MyError</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyError</span><span class="token punctuation">::</span><span class="token class-name">Io</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样就可以直接使用 <code>?</code> 将 <code>std::io::Result</code> 转换为你的错误类型。</p><table><thead><tr><th>操作</th><th>用途</th></tr></thead><tbody><tr><td><code>match</code></td><td>手动匹配成功或失败情况</td></tr><tr><td><code>unwrap()</code> / <code>expect()</code></td><td>快速获取值，出错 panic</td></tr><tr><td><code>?</code></td><td>向上层传递错误</td></tr><tr><td><code>map()</code> / <code>and_then()</code></td><td>链式处理成功值</td></tr><tr><td><code>or()</code> / <code>or_else()</code></td><td>提供备选错误处理方案</td></tr></tbody></table><h3 id="panic-与-Result-的区别">panic 与 <code>Result</code> 的区别</h3><table><thead><tr><th>特性</th><th><code>panic!</code></th><th><code>Result</code></th></tr></thead><tbody><tr><td>类型</td><td>不可恢复错误</td><td>可恢复错误</td></tr><tr><td>推荐使用场景</td><td>逻辑错误、非法状态</td><td>文件读写、网络请求等</td></tr><tr><td>是否必须处理</td><td>否</td><td>是</td></tr><tr><td>对性能影响</td><td>较大（栈展开）</td><td>小</td></tr></tbody></table><table><thead><tr><th>最佳实践</th></tr></thead><tbody><tr><td>优先使用 <code>Result</code> 而不是 <code>panic!</code></td></tr><tr><td>减少 <code>unwrap()</code> 的使用，尤其在生产代码中</td></tr><tr><td>统一错误类型，方便集中处理</td></tr><tr><td>使用 <code>?</code> 简化错误传播逻辑</td></tr></tbody></table><h3 id="练习">练习</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 修复call函数的错误</span><span class="token comment">// 当b为None时，按默认值1</span><span class="token keyword">fn</span> <span class="token function-definition function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理b为None的情况，默认值1</span>    <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=></span> r<span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Division by zero"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 捕获除零错误</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">match</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=></span> s<span class="token punctuation">,</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">MathError</span><span class="token punctuation">::</span><span class="token class-name">NegativeSquareRoot</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Cannot compute square root of a negative number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 捕获负数平方根错误</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// 正常返回结果</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> b <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>a <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">/</span> b <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">None</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">MathError</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">DivisionByZero</span><span class="token punctuation">,</span>    <span class="token class-name">NegativeSquareRoot</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">sqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token class-name">MathError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0.0</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">MathError</span><span class="token punctuation">::</span><span class="token class-name">NegativeSquareRoot</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="模块化-Modules">模块化 Modules</h2><p>Rust 的模块系统用于组织代码结构、控制作用域和可见性。它支持将程序划分为多个逻辑单元（模块），便于代码管理、复用和封装。</p><h3 id="package">package</h3><p>一般通过<code>cargo new</code>创建的就是一个package，包含library crates和 binary crates，也就是<code>.rs</code></p> <pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token class-name">Cargo</span><span class="token punctuation">.</span>lock<span class="token class-name">Cargo</span><span class="token punctuation">.</span>tomlsrc├── bin│   ├── a<span class="token punctuation">.</span>rs│   └── b<span class="token punctuation">.</span>rs├── lib<span class="token punctuation">.</span>rs└── main<span class="token punctuation">.</span>rs</code></pre><h3 id="crate">crate</h3><ul><li><strong>crate</strong> 是 Rust 中最小的编译单元，可以是一个库（library）或可执行程序（binary）。</li><li>每个 crate 都有一个隐式的根模块（root module）：[<a href="http://main.rs">main.rs</a>](file:///Users/tinachan/rust/hello_cargo/src/main.rs) 或 <code>lib.rs</code>。</li><li>所有模块都是从根模块开始组织的。</li></ul><p>例如：</p><pre class="language-none"><code class="language-none">src&#x2F;├── main.rs       &#x2F;&#x2F; 根模块├── utils.rs      &#x2F;&#x2F; 模块文件└── utils&#x2F;    └── logging.rs &#x2F;&#x2F; 子模块文件</code></pre><h3 id="Moudles">Moudles</h3><p>使用 <code>mod</code> 关键字定义一个模块：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">mod</span> <span class="token module-declaration namespace">a</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> num<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">log1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>模块可以嵌套定义：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">mod</span> <span class="token module-declaration namespace">a</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> num<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">log1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">mod</span> <span class="token module-declaration namespace">b</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 无论是func还是mod 在外部需要调用的话都需要加上pub</span>        <span class="token keyword">const</span> num2<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">fn</span> <span class="token function-definition function">log2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="导入模块-use">导入模块 use</h4><p>使用 <code>use</code> 将模块或函数引入当前作用域，简化调用：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">a<span class="token punctuation">::</span>b<span class="token punctuation">::</span></span>log2<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">a<span class="token punctuation">::</span></span>log1<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">log1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内部的mod需要多层调用</span><span class="token punctuation">&#125;</span></code></pre><p>重命名 <code>as</code>[重名的情况]：</p><pre class="language-rust" data-language="rust"><code class="language-rust"> <span class="token keyword">use</span> <span class="token namespace">a<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">b<span class="token punctuation">::</span></span>log <span class="token keyword">as</span> log1<span class="token punctuation">,</span> log <span class="token keyword">as</span> log2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// use合并</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">log1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">log2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">mod</span> <span class="token module-declaration namespace">a</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> num<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">b</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 无论是func还是mod 在外部需要调用的话都需要加上pub</span>        <span class="token keyword">const</span> num2<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="可见性（Visibility）">可见性（Visibility）</h4><p>默认模块中的项是私有的 ; <code>pub</code> 关键字实现公有</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token namespace">a<span class="token punctuation">::</span></span><span class="token function">log1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token namespace">a<span class="token punctuation">::</span>b<span class="token punctuation">::</span></span><span class="token function">log2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a内部的mod需要多层调用</span><span class="token punctuation">&#125;</span><span class="token keyword">mod</span> <span class="token module-declaration namespace">a</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> num<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">log1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">b</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 无论是func还是mod 在外部需要调用的话都需要加上pub</span>        <span class="token keyword">const</span> num2<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">log2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="pub-crate">pub(crate)</h5><p>限定在mod a中调用</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span><span class="token punctuation">(</span><span class="token keyword">in</span> <span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>a</span><span class="token punctuation">)</span> <span class="token keyword">fn</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="pub-in-path">pub(in path)</h5><h5 id="pub-use">pub use</h5><h3 id="Path">Path</h3><p>通过路径访问</p><ul><li>绝对路径</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">crate</span><span class="token module-declaration namespace"><span class="token punctuation">::</span>b<span class="token punctuation">::</span></span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绝对路径访问</span></code></pre><ul><li>相对路径</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token namespace">a<span class="token punctuation">::</span></span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 相对路径访问</span></code></pre><h3 id="workspace">workspace</h3><p>Rust 中用于管理 多个相关包（crate）的功能。工作区允许将多个 crate 组织在同一仓库下，共享依赖、统一构建 / 测试流程。</p><p>可以通过在<code>cargo.toml</code>中添加</p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">workspace</span><span class="token punctuation">]</span> <span class="token key property">members</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"course"</span><span class="token punctuation">,</span><span class="token string">"lib_add"</span><span class="token punctuation">,</span><span class="token string">"lib_divide"</span><span class="token punctuation">]</span></code></pre><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250716205510619.png" alt="image-20250716205510619"></p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础[part8]_模式匹配、常见集合</title>
      <link href="/2025/07/15/Rust%E5%9F%BA%E7%A1%80-part8-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E3%80%81%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88/"/>
      <url>/2025/07/15/Rust%E5%9F%BA%E7%A1%80-part8-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E3%80%81%E5%B8%B8%E8%A7%81%E9%9B%86%E5%90%88/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=48373455-1043-5622-d896-75762fe0672b</cover>
      <date>Tue Jul 15 2025 11:21:53 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust基础[part8]_模式匹配、常见集合</h1><h2 id="模式匹配">模式匹配</h2><p>检查数据结构，提高代码的可读性和简洁性，减少错误，尤其在处理复杂数据结构的时候</p><h3 id="基础模式匹配">基础模式匹配</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">match_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment">// 必须要有所有可能的case</span>    <span class="token keyword">match</span> x <span class="token punctuation">&#123;</span>        <span class="token number">1</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">2</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">3</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"something else"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="守卫">守卫</h3><p>在模式匹配中，可以总使用守卫来添加额外的条件判断。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">match</span> x <span class="token punctuation">&#123;</span>    n <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"x is greater than 5"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    _ <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"x is less than or equal to 5"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><h3 id="绑定">绑定</h3><p>在模式匹配中，可以使用绑定来将模式中的值绑定到变量上</p><p><code>@ 0..=5</code>这个是用来指定范围的</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 绑定：可以把匹配到的值绑定到一个变量上</span>    <span class="token keyword">let</span> enum1 <span class="token operator">=</span> <span class="token class-name">MyEnum</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> enum1 <span class="token punctuation">&#123;</span>        <span class="token class-name">MyEnum</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">:</span> val <span class="token operator">@</span> <span class="token number">0</span><span class="token punctuation">..=</span><span class="token number">5</span> <span class="token punctuation">&#125;</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"x is &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">MyEnum</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">:</span> val <span class="token operator">@</span> <span class="token number">5</span><span class="token punctuation">..</span> <span class="token punctuation">&#125;</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"x is &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">MyEnum</span><span class="token punctuation">::</span><span class="token class-name">B</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"s is &#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">MyEnum</span><span class="token punctuation">::</span><span class="token class-name">C</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"something else"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="应用场景">应用场景</h3><ul><li><p>处理错误</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/** * 匹配模式应用场景 */</span><span class="token keyword">fn</span> <span class="token function-definition function">pattern_match_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 1 匹配错误</span>    <span class="token keyword">match</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Result: &#123;&#125;"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Error: &#123;&#125;"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"Division by zero is not allowed"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li><li><p>解析命令行参数</p></li><li><p>解析配置文件</p></li><li><p>解析数据包</p></li><li><p>解析XML或JSON</p></li></ul><h3 id="高级匹配技巧">高级匹配技巧</h3><h4 id="嵌套模式">嵌套模式</h4><p>这里 <code>Message::Move &#123; x, y &#125;</code> 是一个嵌套模式，因为它：</p><ul><li>匹配外层枚举变体 <code>Message::Move</code></li><li>同时解构了内部的结构体字段 <code>&#123; x: i32, y: i32 &#125;</code></li></ul><p>这样你就可以在一个步骤中直接访问到 <code>x</code> 和 <code>y</code>。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Message</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Quit</span><span class="token punctuation">,</span>      <span class="token class-name">Move</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token class-name">Write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">ChangeColor</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Move</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">match</span> msg <span class="token punctuation">&#123;</span>      <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Quit</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Quit"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Move</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Move to (&#123;&#125;, &#123;&#125;)"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Write</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Write: &#123;&#125;"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">ChangeColor</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Change color to (&#123;&#125;, &#123;&#125;, &#123;&#125;)"</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 可以使用enum中的参数</span>  <span class="token punctuation">&#125;</span></code></pre><h4 id="匹配模式和迭代器：结合iter和match使用">匹配模式和迭代器：结合iter和match使用</h4><ul><li><code>for (a, b)</code> 中的括号结构本质上是一种<strong>模式匹配语法</strong></li><li>它和 <code>match</code> 一样可以解构元组、结构体、枚举等复杂类型</li><li><code>iter()</code> 提供了迭代器的能力，<code>match</code>（或模式匹配）提供了结构解构的能力</li><li>所以这段代码体现了 <code>iter</code> 和 <code>match</code> 的结合使用</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">iterator_match_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> vec1 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> vec2 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">in</span> vec1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">zip</span><span class="token punctuation">(</span>vec2<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; + &#123;&#125; = &#123;&#125;"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="if-let-和while-let：-简化单个模式匹配">if let 和while let： 简化单个模式匹配</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">if_let_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> option <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">while_let_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ref和ref-mut">ref和ref mut</h3><ul><li>借用数据而不转移所有权：在某些情况下，你只需要借用数据而不是转移所有权。例如在递归数据结构中，借用数据可以避免所有权转移带来的复杂性</li><li>对数据进行修改：使用ref mut 可以在模式匹配时对对数据进行修改，而无需转移所有权</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">ref_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> x <span class="token punctuation">&#123;</span>        <span class="token keyword">ref</span> var <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> var<span class="token punctuation">)</span><span class="token punctuation">,</span>        _ <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">ref_mut_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> x <span class="token punctuation">&#123;</span>        <span class="token keyword">ref</span> <span class="token keyword">mut</span> var <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token operator">*</span>var <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        _ <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="练习">练习</h3><h4 id="目标">目标</h4><ul><li>理解如何使用 Rust 的模式匹配功能解析 JSON 数据。</li><li>学会使用 <code>serde_json</code> 库进行 JSON 处理。</li><li>练习在实际应用场景中使用模式匹配。</li></ul><h4 id="要求">要求</h4><ul><li>使用 <code>serde_json</code> 库解析 JSON 字符串。</li><li>使用模式匹配提取 JSON 对象中的不同字段。</li><li>处理不同类型的数据（字符串、数字、数组、嵌套对象等）。</li></ul><h4 id="示例">示例</h4><p>假设你有一个包含用户信息的 JSON 字符串：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"alice@example.com"</span><span class="token punctuation">,</span>  <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"street"</span><span class="token operator">:</span> <span class="token string">"123 Main St"</span><span class="token punctuation">,</span>    <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"Wonderland"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"phone_numbers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"123-456-7890"</span><span class="token punctuation">,</span> <span class="token string">"987-654-3210"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><h4 id="答案：">答案：</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Result</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fmt<span class="token punctuation">;</span><span class="token comment">// 定义错误类型（替代简单的 String 错误）</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">enum</span> <span class="token type-definition class-name">ParseError</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Json</span><span class="token punctuation">(</span><span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">FieldMissing</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 字段名 + 期望类型</span>    <span class="token class-name">NumberRange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'static</span> <span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 数字超出范围</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span> <span class="token keyword">for</span> <span class="token class-name">ParseError</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">match</span> <span class="token keyword">self</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">Json</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"JSON 解析错误: &#123;e&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">FieldMissing</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"字段缺失: &#123;field&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> expect<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"字段 &#123;field&#125; 类型错误，期望 &#123;expect&#125;"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">NumberRange</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"字段 &#123;field&#125; 数值超出范围"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">From</span><span class="token operator">&lt;</span><span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">></span> <span class="token keyword">for</span> <span class="token class-name">ParseError</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">from</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">Json</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Address</span> <span class="token punctuation">&#123;</span>    street<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    city<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Info</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token class-name">Address</span><span class="token punctuation">,</span>    phone_numbers<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 解析函数：使用模式匹配提取字段，返回 Result 处理错误</span><span class="token keyword">fn</span> <span class="token function-definition function">parse_json</span><span class="token punctuation">(</span>json<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Info</span><span class="token punctuation">,</span> <span class="token class-name">ParseError</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> value<span class="token punctuation">:</span> <span class="token class-name">Value</span> <span class="token operator">=</span> <span class="token namespace">serde_json<span class="token punctuation">::</span></span><span class="token function">from_str</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>    <span class="token comment">// 1. 提取 name（字符串类型）</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token keyword">match</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> s<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">FieldMissing</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 提取 age（非负整数，且在 u32 范围内）</span>    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token keyword">match</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">Number</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            n<span class="token punctuation">.</span><span class="token function">as_u64</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"非负整数"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>                <span class="token punctuation">.</span><span class="token function">try_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">NumberRange</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"数字"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">FieldMissing</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 提取 email（字符串类型）</span>    <span class="token keyword">let</span> email <span class="token operator">=</span> <span class="token keyword">match</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> s<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">FieldMissing</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 4. 提取嵌套对象 address</span>    <span class="token keyword">let</span> address <span class="token operator">=</span> <span class="token keyword">match</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">Object</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> street <span class="token operator">=</span> <span class="token keyword">match</span> obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"street"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> s<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span><span class="token string">"address.street"</span><span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">FieldMissing</span><span class="token punctuation">(</span><span class="token string">"address.street"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> city <span class="token operator">=</span> <span class="token keyword">match</span> obj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> s<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span><span class="token string">"address.city"</span><span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">FieldMissing</span><span class="token punctuation">(</span><span class="token string">"address.city"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token class-name">Address</span> <span class="token punctuation">&#123;</span> street<span class="token punctuation">,</span> city <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"对象"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">FieldMissing</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 5. 提取数组 phone_numbers（元素为字符串）</span>    <span class="token keyword">let</span> phone_numbers <span class="token operator">=</span> <span class="token keyword">match</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"phone_numbers"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">Array</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>elem<span class="token closure-punctuation punctuation">|</span></span> <span class="token keyword">match</span> elem <span class="token punctuation">&#123;</span>                    <span class="token class-name">Value</span><span class="token punctuation">::</span><span class="token class-name">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    _ <span class="token operator">=></span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span><span class="token string">"phone_numbers 元素"</span><span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">></span><span class="token punctuation">,</span> _<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">TypeMismatch</span><span class="token punctuation">(</span><span class="token string">"phone_numbers"</span><span class="token punctuation">,</span> <span class="token string">"数组"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ParseError</span><span class="token punctuation">::</span><span class="token class-name">FieldMissing</span><span class="token punctuation">(</span><span class="token string">"phone_numbers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token class-name">Info</span> <span class="token punctuation">&#123;</span>        name<span class="token punctuation">,</span>        age<span class="token punctuation">,</span>        email<span class="token punctuation">,</span>        address<span class="token punctuation">,</span>        phone_numbers<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> json_str <span class="token operator">=</span> <span class="token string">r#"    &#123;        "name": "Alice",        "age": 30,        "email": "alice@example.com",        "address": &#123;            "street": "123 Main St",            "city": "Wonderland"        &#125;,        "phone_numbers": ["123-456-7890", "987-654-3210"]    &#125;    "#</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> <span class="token function">parse_json</span><span class="token punctuation">(</span>json_str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"解析结果:\n&#123;:#?&#125;"</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"解析失败: &#123;e&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="常见集合">常见集合</h2><h3 id="Vec">Vec</h3><h4 id="基本用法">基本用法</h4><ul><li>创建和初始化</li><li>添加元素</li><li>访问元素</li><li>修改元素</li><li>遍历元素</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 创建一个空的vec</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> v<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用宏来创建一个veck k</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> v1<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 添加元素</span>    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 访问元素</span>    <span class="token comment">// 1.使用索引</span>    <span class="token keyword">let</span> third<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The third element is &#123;&#125;"</span><span class="token punctuation">,</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.使用get方法</span>    <span class="token keyword">match</span> v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>third<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The third element is &#123;&#125;"</span><span class="token punctuation">,</span> third<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"There is no third element."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 修改元素</span>    v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">// 迭代元素</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token operator">&amp;</span>v <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="高阶用法：">高阶用法：</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 进阶的用法</span>  <span class="token comment">// 1.使用枚举来存储多种类型</span>  <span class="token keyword">enum</span> <span class="token type-definition class-name">SpreadsheetCell</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>      <span class="token class-name">SpreadsheetCell</span><span class="token punctuation">::</span><span class="token class-name">Int</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">SpreadsheetCell</span><span class="token punctuation">::</span><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">SpreadsheetCell</span><span class="token punctuation">::</span><span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">10.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 2.容量与重新分配</span>  <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="常见错误">常见错误:</h4><ul><li><p>不安全的索引访问，所以最好使用match</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 不安全的索引访问</span>    <span class="token keyword">let</span> v2 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// println!("&#123;&#125;", v2[100]); // 运行时会出错</span></code></pre></li><li><p>可变引用与不可变引用的混用</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 可变引用和不可变引用混用</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> v3 <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v3<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里会报错</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>cannot borrow `v3` <span class="token keyword">as</span> mutable because it is also borrowed <span class="token keyword">as</span> immutablemutable borrow occurs hererustcClick <span class="token keyword">for</span> full compiler diagnostic</code></pre><p>修复的话可以分两种，可以修改push的顺序，或者使用作用域的特性来控制引用的生命周期</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 第一种</span>v3<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> first<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 第二种</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> first<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>v3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v3<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="HashMap">HashMap</h3><h4 id="基本操作">基本操作</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 基本操作</span>  <span class="token keyword">let</span> <span class="token keyword">mut</span> scores<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Yellow"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取元素</span>  <span class="token keyword">let</span> team_name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> score<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> scores<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>team_name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">match</span> score <span class="token punctuation">&#123;</span>      <span class="token class-name">Some</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"None"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 遍历</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>scores <span class="token punctuation">&#123;</span>      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; : &#123;&#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h4 id="进阶操作">进阶操作</h4><ul><li><p>更新哈希表</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 更新</span>   scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   scores<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre></li><li><p>合并哈希表</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 合并两个集合</span>  <span class="token keyword">let</span> <span class="token keyword">mut</span> map1 <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token keyword">mut</span> map2 <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token operator">&amp;</span>map2 <span class="token punctuation">&#123;</span>      map1<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> map1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="常见陷阱">常见陷阱</h4><ul><li><p>哈希冲突</p></li><li><p>所有权问题</p></li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">hashmap_ownership</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> scores <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> team_name <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> team_score <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>team_name<span class="token punctuation">,</span> team_score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> scores<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> team_name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里会报错</span></code></pre><p>修改为<code>.clone()</code></p><pre class="language-rust" data-language="rust"><code class="language-rust">scores<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>team_name<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> team_score<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="练习-2">练习</h3><ol><li>使用Vec实现一个简单的栈</li></ol><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Stack</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    elements<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化空栈</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span> <span class="token punctuation">&#123;</span>            elements<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 入栈：向尾部添加元素</span>    <span class="token keyword">fn</span> <span class="token function-definition function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> item<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 出栈：移除并返回尾部元素（空栈时返回 None）</span>    <span class="token keyword">fn</span> <span class="token function-definition function">pop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 查看栈顶：返回尾部元素的引用（空栈时返回 None）</span>    <span class="token keyword">fn</span> <span class="token function-definition function">peek</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[test]</span><span class="token comment">// 测试用例</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> stack <span class="token operator">=</span> <span class="token class-name">Stack</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"栈顶元素（peek）: &#123;:?&#125;"</span><span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Some(3)</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"出栈元素（pop）: &#123;:?&#125;"</span><span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Some(3)</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"出栈后栈顶: &#123;:?&#125;"</span><span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Some(2)</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>使用<code>HashMap</code>实现字频统计器</li></ol><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/** * 通过hashmap计算单词频率 */</span><span class="token keyword">fn</span> <span class="token function-definition function">count_frequency</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> letters<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">split_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        letters            <span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and_modify</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>counter<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">*</span>counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">or_insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> letters<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">test_count_frequency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"hello world hello rust"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> letters <span class="token operator">=</span> <span class="token function">count_frequency</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> letters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>使用Vec和HashMap实现一个简单的书籍库存管理系统：</li></ol><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 库存管理系统</span><span class="token keyword">struct</span> <span class="token type-definition class-name">InventorySystem</span> <span class="token punctuation">&#123;</span>    books<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Book</span><span class="token operator">></span><span class="token punctuation">,</span>                 <span class="token comment">// 存储所有书籍</span>    id_to_index<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// ID -> Vec索引的映射</span>    next_id<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>                     <span class="token comment">// 下一个可用ID（自增）</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">InventorySystem</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化空系统</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InventorySystem</span> <span class="token punctuation">&#123;</span>            books<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            id_to_index<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            next_id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// ID从1开始</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 添加书籍：自动分配ID，返回新书籍ID</span>    <span class="token keyword">fn</span> <span class="token function-definition function">add_book</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> quantity<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u32</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>next_id<span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>next_id <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>            id<span class="token punctuation">,</span>            title<span class="token punctuation">,</span>            author<span class="token punctuation">,</span>            quantity<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>id_to_index<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录ID与索引的映射</span>        id    <span class="token punctuation">&#125;</span>    <span class="token comment">// 按ID查询书籍：返回Option&lt;&amp;Book>（不存在则返回None）</span>    <span class="token keyword">fn</span> <span class="token function-definition function">get_book</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token class-name">Book</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>id_to_index<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token operator">&amp;</span>index<span class="token closure-punctuation punctuation">|</span></span> <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 通过索引取书籍引用</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 按标题模糊查询：返回所有包含该标题的书籍</span>    <span class="token keyword">fn</span> <span class="token function-definition function">search_by_title</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token class-name">Book</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>books            <span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>book<span class="token closure-punctuation punctuation">|</span></span> book<span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 更新库存：按ID修改数量，返回是否成功</span>    <span class="token keyword">fn</span> <span class="token function-definition function">update_quantity</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> new_quantity<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>index<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>id_to_index<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>quantity <span class="token operator">=</span> new_quantity<span class="token punctuation">;</span>            <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除书籍：按ID删除，返回是否成功</span>    <span class="token comment">// （注：删除时将最后一本书移到被删位置，保证Vec索引一致性）</span>    <span class="token keyword">fn</span> <span class="token function-definition function">remove_book</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>id_to_index<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 若删除的不是最后一本书，将最后一本书移到删除位置</span>            <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> last_book <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取出最后一本书</span>                <span class="token keyword">self</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> last_book<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 覆盖到删除位置</span>                <span class="token keyword">self</span><span class="token punctuation">.</span>id_to_index<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>last_book<span class="token punctuation">.</span>id<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新最后一本书的索引映射</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">self</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除最后一本书，无需调整映射</span>            <span class="token punctuation">&#125;</span>            <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试用例</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">test_inventory_system</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> inventory <span class="token operator">=</span> <span class="token class-name">InventorySystem</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加书籍</span>    <span class="token keyword">let</span> id1 <span class="token operator">=</span> inventory<span class="token punctuation">.</span><span class="token function">add_book</span><span class="token punctuation">(</span><span class="token string">"Rust编程入门"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> id2 <span class="token operator">=</span> inventory<span class="token punctuation">.</span><span class="token function">add_book</span><span class="token punctuation">(</span><span class="token string">"Effective Rust"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 查询书籍</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"书籍1: &#123;&#125;"</span><span class="token punctuation">,</span> inventory<span class="token punctuation">.</span><span class="token function">get_book</span><span class="token punctuation">(</span>id1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"书籍2: &#123;&#125;"</span><span class="token punctuation">,</span> inventory<span class="token punctuation">.</span><span class="token function">get_book</span><span class="token punctuation">(</span>id2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更新库存</span>    inventory<span class="token punctuation">.</span><span class="token function">update_quantity</span><span class="token punctuation">(</span>id1<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"更新后书籍1: &#123;&#125;"</span><span class="token punctuation">,</span> inventory<span class="token punctuation">.</span><span class="token function">get_book</span><span class="token punctuation">(</span>id1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模糊查询</span>    <span class="token keyword">let</span> results <span class="token operator">=</span> inventory<span class="token punctuation">.</span><span class="token function">search_by_title</span><span class="token punctuation">(</span><span class="token string">"Rust"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"含'Rust'的书籍:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> book <span class="token keyword">in</span> results <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除书籍</span>    inventory<span class="token punctuation">.</span><span class="token function">remove_book</span><span class="token punctuation">(</span>id2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"删除书籍2后，查询是否存在: &#123;:?&#125;"</span><span class="token punctuation">,</span> inventory<span class="token punctuation">.</span><span class="token function">get_book</span><span class="token punctuation">(</span>id2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础[part7]_枚举、结构体</title>
      <link href="/2025/07/14/Rust%E5%9F%BA%E7%A1%80-part7-%E6%9E%9A%E4%B8%BE%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2025/07/14/Rust%E5%9F%BA%E7%A1%80-part7-%E6%9E%9A%E4%B8%BE%E3%80%81%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=4a6f7424-e980-1447-9d78-1c8affb6925c</cover>
      <date>Mon Jul 14 2025 15:19:37 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust基础[part7]_枚举、结构体</h1><h2 id="枚举">枚举</h2><p>枚举用于表示一个值可能是多种变体（Variant）中的一种。每个变体可以有不同的数据类型：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Message</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Quit</span><span class="token punctuation">,</span>                   <span class="token comment">// 无数据</span>    <span class="token class-name">Move</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 带命名数据（类似结构体）</span>    <span class="token class-name">Write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">// 带单个值（类似元组）</span>    <span class="token class-name">ChangeColor</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 带多个值（类似元组）</span><span class="token punctuation">&#125;</span></code></pre><h3 id="基本使用">基本使用</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Pets</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">print_pet_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Pets</span><span class="token punctuation">::</span><span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Whiskers"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Pets</span><span class="token punctuation">::</span><span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>        name<span class="token punctuation">:</span> <span class="token string">"Buddy"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// Debug trait allows us to print the enum variants</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"cat is &#123;:?&#125;"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"dog is &#123;:?&#125;"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//impl是用来为枚举或结构体定义方法的</span>    <span class="token keyword">impl</span> <span class="token class-name">Pets</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">fn</span> <span class="token function-definition function">speak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    a<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 关联函数是与类型相关的函数，可以通过类型名直接调用</span>    <span class="token comment">// 关联函数不需要实例化对象就可以调用</span>    <span class="token keyword">impl</span> <span class="token class-name">Pets</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">fn</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Logging pet: &#123;&#125;"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Pets</span><span class="token punctuation">::</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Whiskers"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="语法-规范">语法&amp;规范</h3><ul><li><p>语法</p><ul><li>field-less enum</li><li>unit-only enum</li></ul></li><li><p>规范</p><ul><li><p>Pascal Case</p></li><li><p>snake_case</p></li></ul></li></ul><h3 id="用法">用法</h3><p>枚举通常与模式匹配（<code>match</code>）结合使用，以处理不同的变体：</p><h4 id="match-if-let">match &amp; if let</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// match 语句：</span>    <span class="token comment">// 用于模式匹配，可以根据枚举的不同变体执行不同的代码</span>    <span class="token keyword">match</span> a <span class="token punctuation">&#123;</span>        <span class="token class-name">Pets</span><span class="token punctuation">::</span><span class="token class-name">Cat</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"This is a cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Pets</span><span class="token punctuation">::</span><span class="token class-name">Bird</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"This is a bird"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Pets</span><span class="token punctuation">::</span><span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"This is a dog named &#123;&#125; and age &#123;&#125;"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 这里的 _ 是一个通配符，表示匹配所有未被前面分支匹配的情况</span>        _ <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"This is not a cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// if let 语句：</span>    <span class="token comment">// 用于简化模式匹配，当只关心某个特定变体时，可以使用 if let</span>    <span class="token comment">// 这种方式可以避免使用 match 的冗长语法</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Pets</span><span class="token punctuation">::</span><span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>b <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"This is a dog named &#123;&#125; and age &#123;&#125;"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"This is not a dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="Option">Option</h4><p>Option 的作用是安全地表达“有值”或“没有值”的情况，避免空指针（null）带来的运行时错误。在 Rust 里没有 null，所有“可能为空”的场景都用 Option<T> 来表达。</p><ul><li>你写的函数有时可能找不到结果、读取不到数据、或者参数可能为空，这时用 Option 返回 Some(值) 或 None。</li><li>这样编译器会强制你检查“有没有值”，防止忘记判断导致程序崩溃。</li></ul> <pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">option_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> some_value<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> none_value<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 match 处理 Option</span>    <span class="token keyword">match</span> some_value <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Got a value: &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Some 分支</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"No value found"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">// None 分支</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span> none_value <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Got a value: &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"No value found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Result">Result</h4><p>result 是一个枚举类型，用于表示操作的结果，Result&lt;T, E&gt; 有两个变体：Ok(T) 和 Err(E)；Ok(T) 表示操作成功，并包含一个值 T，Err(E) 表示操作失败，并包含一个错误值 E；Result&lt;T, E&gt; 常用于处理可能失败的操作，例如文件读取、网络请求等</p><ul><li>可以提高代码的安全性和可读性</li><li>可以避免异常处理（exception handling）的复杂性</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">result_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ok_value<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> err_value<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"Error occurred"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> ok_value <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Got a value: &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Ok 分支</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Error: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment">// Err 分支</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> err_value <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Error: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="Option-Result-转换">Option &amp; Result 转换</h4><p>option-&gt; result: <code>ok_or()</code></p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">option_result_convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> some_value<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> none_value<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>    <span class="token comment">// Option 转 Result</span>    <span class="token keyword">let</span> result_from_some<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token operator">=</span> some_value<span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"No value found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result_from_none<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token operator">=</span> none_value<span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token string">"No value found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> result_from_some <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Got a value: &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Error: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">match</span> result_from_none <span class="token punctuation">&#123;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Got a value: &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Error: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>result-&gt; option: <code>ok()</code></p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">option_result_convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Result 转 Option</span>    <span class="token keyword">let</span> ok_value<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> err_value<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"Error occurred"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> option_from_ok<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> ok_value<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> option_from_err<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> err_value<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> option_from_ok <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Got a value: &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"No value found"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">match</span> option_from_err <span class="token punctuation">&#123;</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Got a value: &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"No value found"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="常见api示例">常见api示例</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">enum_api_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> option1 <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> option2<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> option_mapped <span class="token operator">=</span> option1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 map 方法对 Some 值进行操作</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Option1 after map: &#123;:?&#125;"</span><span class="token punctuation">,</span> option_mapped<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 Some 值进行操作</span>    <span class="token keyword">let</span> option2_mapped <span class="token operator">=</span> option2<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 None 值进行操作时不会执行闭包</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Option2 after map: &#123;:?&#125;"</span><span class="token punctuation">,</span> option2_mapped<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 None 值进行操作</span>    option1<span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Some</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// and_then 方法用于链式调用</span>    option2<span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Some</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 None 值进行操作时不会执行闭包</span>    <span class="token keyword">let</span> option1_or_else <span class="token operator">=</span> option1<span class="token punctuation">.</span><span class="token function">or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// or_else 方法用于提供默认值</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Option1 or else: &#123;:?&#125;"</span><span class="token punctuation">,</span> option1_or_else<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 Some 值提供默认值</span>    <span class="token keyword">let</span> option2_or_else <span class="token operator">=</span> option2<span class="token punctuation">.</span><span class="token function">or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 None 值提供默认值</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Option2 or else: &#123;:?&#125;"</span><span class="token punctuation">,</span> option2_or_else<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 None 值提供默认值</span>    option1<span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// unwrap_or 方法用于获取 Some 值或提供默认值</span>    option2<span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 None 值提供默认值</span>    option1<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查是否为 Some 值</span>    option2<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查是否为 Some 值</span>    option1<span class="token punctuation">.</span><span class="token function">is_none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查是否为 None 值</span>    <span class="token keyword">let</span> result<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> error<span class="token punctuation">:</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token string">"An error occurred"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 map 方法对 Ok 值进行操作</span>    error<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Success!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 Err 值进行操作时</span>    <span class="token comment">// 不会执行闭包</span>    result<span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>val<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// and_then 方法用于链式调用 返回的是result类型</span>    error<span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>val<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 Err 值进行操作时不会执行闭包</span>    <span class="token comment">// ⚠️ or_else只会在 Err 分支执行</span>    result<span class="token punctuation">.</span><span class="token function">or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>val<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Err</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// or_else 方法用于提供默认值</span>    error<span class="token punctuation">.</span><span class="token function">or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 Err 值提供默认值</span>    result<span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>val<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// unwrap_or_else 返回的是最终的值</span>    error<span class="token punctuation">.</span><span class="token function">unwrap_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>val<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Error occurred: &#123;&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对 Err 值提供默认值</span>    result<span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查是否为 Ok 值</span>    error<span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查是否为 Ok 值</span>    result<span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查是否为 Err 值</span>    error<span class="token punctuation">.</span><span class="token function">is_err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查是否为 Err 值</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>⚠️ 坑</p><ul><li><code>unwrap_or_else</code> 得到的是最终的值（T）。</li><li><code>or_else</code> 得到的是另一个 Option/Result（Option<T> 或 Result&lt;T, E&gt;）。</li><li><code>or_else</code> 只会在 <code>Err</code> 的时候调用闭包，而闭包参数 <code>val</code> 的类型应该是 <code>E</code>（也就是 <code>Err</code> 的类型），而不是 <code>Ok</code> 的类型</li></ul></blockquote><h3 id="练习：">练习：</h3><p>分析enum的内存大小</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">enum_size_analysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span>size_of<span class="token punctuation">;</span>    <span class="token keyword">enum</span> <span class="token type-definition class-name">MyEnum</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">B</span><span class="token punctuation">,</span>        <span class="token class-name">C</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">enum</span> <span class="token type-definition class-name">EnumA1</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">enum</span> <span class="token type-definition class-name">EnumA2</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">,</span>        <span class="token class-name">B</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"MyEnum size: &#123;&#125; bytes"</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">MyEnum</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"EnumA1 size: &#123;&#125; bytes"</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">EnumA1</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"EnumA2 size: &#123;&#125; bytes"</span><span class="token punctuation">,</span> <span class="token function">size_of</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">EnumA2</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="结构体">结构体</h2><h3 id="创建">创建</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">&#123;</span>    active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>    username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>    sign_in_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">struct_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建结构体实例</span>    <span class="token comment">// 1.每个字段都需要实例化</span>    <span class="token comment">// 2.字段顺序可以任意</span>    <span class="token comment">// 3.字段名逗号分隔</span>    <span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someusername123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        username<span class="token punctuation">,</span> <span class="token comment">// 简写</span>        email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someone@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> user2 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>        email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"another@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">..</span>user1 <span class="token comment">// 结构体更新语法，没有逗号</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="常见使用">常见使用</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 1. 访问字段</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The username is &#123;&#125;"</span><span class="token punctuation">,</span> user1<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2 修改结构体字段（可变性）</span>  <span class="token comment">//      整个实例必须是可变的</span>  <span class="token keyword">let</span> <span class="token keyword">mut</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>      active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someusername123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someone@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  user1<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"anotheremail@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="元祖结构体-tuple-struct">元祖结构体(tuple struct)</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Color</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3 使用元组结构体</span><span class="token keyword">fn</span> <span class="token function-definition function">tuple_strut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token type-definition class-name">Color</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> black <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> black<span class="token number">.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="单元结构体-unit-like-struct">单元结构体(unit-like struct)</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 单元结构体</span><span class="token keyword">fn</span> <span class="token function-definition function">unit_struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 单元结构体创建</span>    <span class="token keyword">let</span> always_equal <span class="token operator">=</span> <span class="token class-name">AlwaysEqual</span><span class="token punctuation">;</span>    <span class="token comment">// 我们不关心AlwaysEqual实例中的任何内容，我们只关心其类型，然后可以为它实现某个特征</span>    <span class="token keyword">impl</span> <span class="token class-name">SomeTrait</span> <span class="token keyword">for</span> <span class="token class-name">AlwaysEqual</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 函数体省略</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//单元结构体</span><span class="token keyword">struct</span> <span class="token type-definition class-name">AlwaysEqual</span><span class="token punctuation">;</span></code></pre><h3 id="所有权">所有权</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token punctuation">&#123;</span><span class="token comment">//3 所有权</span>    <span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someusername123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someone@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> email <span class="token operator">=</span> user1<span class="token punctuation">.</span>email<span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> user1<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 所有权转移</span>    <span class="token function">print_user</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里也会报错</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">print_user</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>error<span class="token punctuation">[</span><span class="token constant">E0382</span><span class="token punctuation">]</span><span class="token punctuation">:</span> borrow of moved value<span class="token punctuation">:</span> `user1<span class="token punctuation">.</span>email`  <span class="token operator">-</span><span class="token punctuation">-></span> src<span class="token operator">/</span>struct_example<span class="token punctuation">.</span>rs<span class="token punctuation">:</span><span class="token number">44</span><span class="token punctuation">:</span><span class="token number">20</span>   <span class="token operator">|</span><span class="token number">43</span> <span class="token operator">|</span>     <span class="token keyword">let</span> email <span class="token operator">=</span> user1<span class="token punctuation">.</span>email<span class="token punctuation">;</span>   <span class="token operator">|</span>                 <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> value moved here<span class="token number">44</span> <span class="token operator">|</span>     <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> user1<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 所有权转移</span>   <span class="token operator">|</span>                    <span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span><span class="token operator">^</span> value borrowed here after <span class="token keyword">move</span></code></pre><blockquote><ul><li>一旦结构体中某一个字段发生了所有权移动，那么整个结构体都会不能再赋值了</li><li>使用没有实现copy特性的类型，都会发生所有权的转移。</li></ul></blockquote><h3 id="定义方法">定义方法</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/** * 结构体方法的使用 */</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// new 方法可以创建一个 Self 的实例</span>        <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span> width<span class="token punctuation">,</span> height <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">set_width</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u32</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height    <span class="token punctuation">&#125;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">is_wide</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">></span> <span class="token keyword">self</span><span class="token punctuation">.</span>height    <span class="token punctuation">&#125;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">can_hold</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Rectangle</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">></span> other<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height <span class="token operator">></span> other<span class="token punctuation">.</span>height    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">struct_function_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rect1 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>        width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"The area of the rectangle is &#123;&#125; square pixels."</span><span class="token punctuation">,</span>        rect1<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> rect2 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>        width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    rect2<span class="token punctuation">.</span><span class="token function">set_width</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"The area of the rectangle is &#123;&#125; square pixels."</span><span class="token punctuation">,</span>        rect2<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> rect2<span class="token punctuation">.</span><span class="token function">is_wide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The rectangle is wide."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The rectangle is not wide."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用new</span>    <span class="token keyword">let</span> rect3 <span class="token operator">=</span> <span class="token class-name">Rectangle</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// can_hold</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span>        <span class="token string">"The area of the rectangle is &#123;&#125; square pixels."</span><span class="token punctuation">,</span>        <span class="token class-name">Rectangle</span><span class="token punctuation">::</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect3<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="实现trait">实现trait</h3><p>实现了通用的计算逻辑</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u32</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Shape</span> <span class="token keyword">for</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u32</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">trait</span> <span class="token type-definition class-name">Shape</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u32</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Shape</span> <span class="token keyword">for</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u32</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Shape</span> <span class="token keyword">for</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">u32</span> <span class="token punctuation">&#123;</span>        <span class="token number">3</span> <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>radius <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>radius    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 新建一个圆形</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Circle</span> <span class="token punctuation">&#123;</span>    radius<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">impl</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">Self</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span> radius <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 通过impl Trait可以创建一个函数， * 这个函数的参数是任何实现了Shape trait的类型。 * 这个函数可以传入圆形和矩形，都可以进行area计算，实现了通用的计算逻辑 */</span><span class="token keyword">fn</span> <span class="token function-definition function">print_area</span><span class="token punctuation">(</span>shape<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">impl</span> <span class="token class-name">Shape</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> shape<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">test_trait_impl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用trait通用计算</span>    <span class="token keyword">let</span> rect4 <span class="token operator">=</span> <span class="token class-name">Rectangle</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> circle1 <span class="token operator">=</span> <span class="token class-name">Circle</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>circle1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="自己实现Display">自己实现Display</h3><p>如果我们想打印出来整个矩形，该如何处理呢</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span><span class="token punctuation">;</span><span class="token keyword">impl</span> <span class="token class-name">Display</span> <span class="token keyword">for</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'_</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token keyword">self</span><span class="token punctuation">.</span>height <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token keyword">self</span><span class="token punctuation">.</span>width <span class="token punctuation">&#123;</span>                s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">'6'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"&#123;&#125;\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">print_the_rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rect1 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>        width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> rect1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>成功：</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250715110301161.png" alt="image-20250715110301161"></p><h3 id="自己实现debug">自己实现debug</h3><p>一般可以通过派生来实现debug</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[derive(Debug)]</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    width<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></code></pre><p>就可以使用<code>&quot;&#123;:?&#125;&quot;</code> 打印结构体</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">print_the_rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rect1 <span class="token operator">=</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>        width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> rect1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span> width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span></code></pre><p>不使用派生,自己实现：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Debug</span><span class="token punctuation">;</span><span class="token keyword">impl</span> <span class="token class-name">Debug</span> <span class="token keyword">for</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'_</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">std<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">write!</span><span class="token punctuation">(</span>            f<span class="token punctuation">,</span>            <span class="token string">"Rectangle: width: &#123;&#125;, height: &#123;&#125;"</span><span class="token punctuation">,</span>            <span class="token keyword">self</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>height        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础[part6]_数组与切片_字符串</title>
      <link href="/2025/07/13/Rust%E5%9F%BA%E7%A1%80-part6-%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2025/07/13/Rust%E5%9F%BA%E7%A1%80-part6-%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/image-20250713200224069.png</cover>
      <date>Sun Jul 13 2025 09:47:37 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust基础[part6]_数组与切片、字符串</h1><h2 id="数组">数组</h2><p>数组的类型格式:<code>[T; N]</code></p><ul><li><strong>固定长度</strong>：必须在编译时指定长度 <code>N</code>，且<strong>无法扩容</strong>。</li><li><strong>可变</strong>：如果声明为 <code>mut</code>，可以修改元素值，但<strong>不能改变长度</strong>。</li><li><strong>存储在栈上</strong>（除非被装箱到堆上，如 <code>Box&lt;[T; N]&gt;</code>）。</li></ul><h3 id="定义">定义</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Array: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="默认初始值">默认初始值</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 默认初始值</span>   <span class="token keyword">let</span> arr1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Array with default value: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="数组长度">数组长度</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 数组长度</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Array length: &#123;&#125;"</span><span class="token punctuation">,</span> arr1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="遍历">遍历</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>arr<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历索引</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Element at index &#123;&#125;: &#123;&#125;"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> element <span class="token keyword">in</span> arr1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用迭代器遍历</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Element: &#123;&#125;"</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    arr1<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">i32</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Element: &#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用闭包遍历</span></code></pre><h3 id="数组的值传递">数组的值传递</h3><pre class="language-rust" data-language="rust"><code class="language-rust">    <span class="token comment">// 数组值传递</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Before update: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"After update: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意这里的 arr2 仍然是原来的值，因为数组是值传递</span><span class="token keyword">fn</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token keyword">mut</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Updating array: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>arr<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 修改每个元素</span>    <span class="token punctuation">&#125;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Updated array inside function: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出：主函数中的数组并未改变，因为是值传递</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token class-name">Before</span> update<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token class-name">Updating</span> array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token class-name">Updated</span> array inside function<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token class-name">After</span> update<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre><h3 id="数组的引用传递">数组的引用传递</h3><pre class="language-rust" data-language="rust"><code class="language-rust"> <span class="token comment">// 数组引用传递</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Before update_mut: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_mut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"After update_mut: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的 arr2 已经被修改，因为传递的是可变引用</span><span class="token keyword">fn</span> <span class="token function-definition function">update_mut</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Updating array with mutable reference: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>arr<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 修改每个元素</span>    <span class="token punctuation">&#125;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Updated array with mutable reference: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>输出：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token class-name">Before</span> update_mut<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token class-name">Updating</span> array with mutable reference<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token class-name">Updated</span> array with mutable reference<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token class-name">After</span> update_mut<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span></code></pre><h3 id="数组的切片">数组的切片</h3><p>也就是<strong>slice类型</strong>，他表示从包含多个元素的容器中取得局部数据，这个过程称为切片操作。 不同语言对切片的支持有所不同。 Rust可以支持Slice操作，Rust中的切片操作只允许获取一段连续的局部数据。支持的有Array、String、Vec。</p><blockquote><p>⚠️ Slice切片 是单独的类型</p><p>切片的类型是 <code>&amp;[T]</code>（不可变切片）或 <code>&amp;mut [T]</code>（可变切片），它不包含长度信息。</p><p>切片也是一种引用，不包含所有权</p></blockquote><p>内存结构，切片由两部分组成：</p><ol><li><strong>指向数据起始位置的指针</strong>（指向数组或 <code>Vec</code> 的内存）。</li><li><strong>长度字段</strong>（<code>len</code>），表示切片包含的元素个数。</li></ol><p>这里以Array的切片示例：</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">slice_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> slice1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 包含索引1和2的元素</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Slice from index 1 to 3: &#123;:?&#125;"</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> slice2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 包含前3个元素</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Slice of first three elements: &#123;:?&#125;"</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> slice3<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 从索引2开始到末尾</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Slice from index 2 to end: &#123;:?&#125;"</span><span class="token punctuation">,</span> slice3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="常用的函数">常用的函数</h4><ul><li><p>len ()：取 slice 元素个数</p></li><li><p>is_empty ()：判断 slice 是否为空</p></li><li><p>contains ()：判断是否包含某个元素</p></li><li><p>repeat ()：重复 slice 指定次数</p></li><li><p>reverse ()：反转 slice</p></li><li><p>join ()：将各元素压平 (flatten) 并通过指定的分隔符连接起来</p></li><li><p>swap ()：交换两个索引处的元素，如 s.swap (1,3)</p></li><li><p>windows ()：以指定大小的窗口进行滚动迭代</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">for</span> i <span class="token keyword">in</span> arr<span class="token punctuation">.</span><span class="token function">windows</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历数组的窗口</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Window of size 3: &#123;:?&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token class-name">Window</span> of size <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token class-name">Window</span> of size <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token class-name">Window</span> of size <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></code></pre></li><li><p>starts_with ()：判断 slice 是否以某个 slice 开头</p></li></ul><h3 id="练习-⚠️">练习 ⚠️</h3><blockquote><p>给定一个整数数组 nums，返回一个数组 answer ，使得 answer[i] 等于 nums 除 nums[i] 之外的所有元素的乘积。 任何前缀或后缀的乘积 nums 都保证适合 32 位整数。 您必须编写一个能够及时运行 O(n) 且无需使用除法运算的算法。</p><p>示例 1： 输入：nums = [1,2,3,4] 输出：[24,12,8,6]</p><p>示例 2： 输入：nums = [-1,1,0,-3,3] 输出：[0,0,9,0,0] 限制： 2 &lt;= nums.length &lt;= 10^5 -30 &lt;= nums[i] &lt;= 30 任何前缀或后缀的乘积 nums 都保证适合 32 位整数。</p><p>进阶：你能以 O(1) 额外空间复杂度解决这个问题吗？（输出数组不算作空间复杂度分析的额外空间。）</p></blockquote><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#[test]</span><span class="token keyword">fn</span> <span class="token function-definition function">feature_array_practice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> nums<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> answer<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">arr_practice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Result of arr_practice: &#123;:?&#125;"</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">arr_practice</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> answer <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">;</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化为全1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span>n <span class="token punctuation">&#123;</span>        answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> answer<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> suffix <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">..</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*=</span> suffix<span class="token punctuation">;</span>        suffix <span class="token operator">*=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    answer<span class="token punctuation">&#125;</span></code></pre><h2 id="字符串">字符串</h2><p>是字符组成的连续集合</p><p>Rust字符是Unicode类型，每个字符占四个字节，但是在字符串里面不一样，字符串是UTF-8编码。也就是字符串中的字符所占的字节数的变化的四分之一。</p><p>Rust 的字符串主要分为两种类型：</p><ol><li><strong><code>str</code></strong>（字符串切片）：它是不可变的引用类型，长度固定，通常以借用的形式存在，即<code>&amp;str</code>。</li><li><strong><code>String</code></strong>：这是一个在堆上分配内存的可增长类型，具备所有权。</li></ol><h3 id="创建字符串">创建字符串</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 创建String类型</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空字符串</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token string">"初始内容"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从&amp;str转换</span><span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"直接创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用from函数</span><span class="token comment">// 创建&amp;str类型（字符串字面量）</span><span class="token keyword">let</span> s4<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token string">"这是一个字符串切片"</span><span class="token punctuation">;</span></code></pre><h3 id="String-str">String -&gt;&amp;str</h3><p>三种</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">string_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Rust"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Rust自动解引用s3，&amp;String会自动转换为&amp;str</span>    <span class="token function">say_hello</span><span class="token punctuation">(</span>s3<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显式转换为&amp;str</span>    <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s3<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过切片转换为&amp;str</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">say_hello</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Hello, &#123;&#125;!"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="各种转换方式">各种转换方式</h3><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250713193730227.png" alt="image-20250713193730227"></p><h3 id="字符串拼接">字符串拼接</h3><p>都是原有的字符串添加，需要可变</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加单个字符</span>s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加字符串切片</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125; &#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token string">"Rust"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 格式化拼接</span></code></pre><h4 id="字符串查找与替换">字符串查找与替换</h4><p>是返回的新的字符串，不需要可变</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> contains <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token keyword">let</span> replaced <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"Rust"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Hello, Rust!"</span></code></pre><h3 id="其他常见操作">其他常见操作</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除最后一个字符</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"After pop: &#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>   s<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除第一个字符</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"After remove: &#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>   s<span class="token punctuation">.</span><span class="token function">truncate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 截断字符串到指定长度</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"After truncate: &#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>   s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空字符串</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"After clear: &#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 字符串连接</span>   <span class="token keyword">let</span> s4 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> s5 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">", Rust!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> s6 <span class="token operator">=</span> s4 <span class="token operator">+</span> <span class="token operator">&amp;</span>s5<span class="token punctuation">;</span> <span class="token comment">// 使用 + 运算符连接字符串，使用 &amp;s5 传递引用</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"After concat: &#123;&#125;"</span><span class="token punctuation">,</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//format</span>   <span class="token keyword">let</span> s7 <span class="token operator">=</span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;&#123;&#125;"</span><span class="token punctuation">,</span> s5<span class="token punctuation">,</span> <span class="token string">" is awesome!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 format! 宏连接字符串</span><span class="token comment">// 转义</span></code></pre><p>性能考量</p><ul><li>拼接字符串时，<code>format!</code>宏比<code>+</code>运算符更高效。</li><li>频繁修改字符串建议使用<code>String</code>。</li></ul><h3 id="练习">练习</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 修复所有错误，并且不要新增代码行</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">" world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">+=</span> <span class="token string">"!"</span><span class="token punctuation">;</span><span class="token comment">//字面量 不能用to_string()</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础[part5]_引用、数组与切片</title>
      <link href="/2025/07/12/Rust%E5%9F%BA%E7%A1%80-part5-%E5%BC%95%E7%94%A8/"/>
      <url>/2025/07/12/Rust%E5%9F%BA%E7%A1%80-part5-%E5%BC%95%E7%94%A8/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/image-20250712221340214.png</cover>
      <date>Sat Jul 12 2025 09:19:56 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust基础[part5]_引用</h1><ul><li>不可变引用：通过不可变引用，可以读取变量，但是不能够修改数据。一个变量可以有多个不可变引用，但不能与可变引用共存。</li><li>可变引用：通过可变引用，可以读取和修改数据。一个变量在某一时刻只能有一个可变引用，且不能与不可变引用共存。</li></ul><h2 id="引用规则">引用规则</h2><ul><li>同一时间(生命周期)内，一个变量只能有一个可变引用或多个不可变引用<ul><li>多个不可变引用可以共存</li><li>可变引用必须是独占的（不能与其他引用共存）</li></ul></li><li>引用必须总是有效（Rust保证引用永远不会指向无效内存）</li></ul><h3 id="示例1：错误示范">示例1：错误示范</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">reference_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 创建不可变引用</span>    <span class="token keyword">let</span> s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span>    <span class="token comment">// 创建可变引用（错误：此时s已有不可变引用）</span>    <span class="token keyword">let</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">;</span>      <span class="token comment">// 错误：不能创建多个可变引用</span>    <span class="token keyword">let</span> s3<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">;</span>        <span class="token comment">// 错误：同一生命周期内同时使用不可变和可变引用</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"s1: &#123;&#125;, s2: &#123;&#125;"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><h3 id="示例-2：正确示范">示例 2：正确示范</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">reference_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第一阶段：仅使用不可变引用</span>    <span class="token keyword">let</span> s1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"s1: &#123;&#125;"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// s1在此处不再使用</span>        <span class="token comment">// 第二阶段：创建可变引用（s1已不再活跃）</span>    <span class="token keyword">let</span> s2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"s2: &#123;&#125;"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="切片-Slices">切片(Slices)</h2><h3 id="数组切片">数组切片</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token operator">&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token operator">&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..=</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="字符串切片">字符串切片</h3><p>是对字符串部分内容的引用</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 字符串引用</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello, Rust!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> slice1<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "Hello"</span>    <span class="token keyword">let</span> slice2<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "Rust!"</span>    <span class="token keyword">let</span> slice3<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// "Hello, Rust!"</span></code></pre><h2 id="悬垂引用（Dangling-Reference）">悬垂引用（Dangling Reference）</h2><p>生命周期核心规则：<strong>引用的生命周期必须 ≤ 被引用对象的生命周期</strong></p><h3 id="错误示例1：">错误示例1：</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">dangling_pointer_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> r<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s的生命周期仅在&#123;&#125;内</span>        r <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span>                        <span class="token comment">// r引用s，但s即将被销毁</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// s在此处被释放</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"r: &#123;&#125;"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 错误：r引用的s已不存在（悬垂引用）</span><span class="token punctuation">&#125;</span></code></pre><p><strong>关键点</strong>：</p><ul><li><strong>s的生命周期</strong>：从创建到<code>&#125;</code>结束。</li><li><strong>r的生命周期</strong>：从创建到函数结束（覆盖<code>s</code>的生命周期）。</li><li><strong>错误原因</strong>：<code>r</code>存活时间超过<code>s</code>，导致引用无效。</li></ul><h3 id="错误示例2：">错误示例2：</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">get_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 错误：返回局部变量的引用</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>s <span class="token comment">// 函数结束后s被销毁，引用悬空</span><span class="token punctuation">&#125;</span></code></pre><p><strong>关键点</strong>：</p><ul><li><strong>返回引用的合法性</strong>：只能返回<strong>参数</strong>或<strong>全局变量</strong>的引用，不能返回<strong>局部变量</strong>的引用。</li></ul><h3 id="正确示例：">正确示例：</h3><p><strong>生命周期注解（Lifetime Annotation）</strong></p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">lifetime_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> large <span class="token operator">=</span> <span class="token function">longest</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The longest string is: &#123;&#125;"</span><span class="token punctuation">,</span> large<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 生命周期注解：确保返回的引用与参数生命周期一致</span>    <span class="token keyword">fn</span> <span class="token function-definition function">longest</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> x <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>关键点</strong>：</p><ul><li><strong><code>'a</code>的含义</strong>：参数<code>x</code>和<code>y</code>以及返回值的引用必须<strong>至少存活到<code>'a</code>结束</strong>。</li><li><strong>编译器检查</strong>：<ol><li>验证<code>x</code>和<code>y</code>的实际生命周期是否满足<code>'a</code>。</li><li>确保返回值的生命周期不超过<code>'a</code>。</li></ol></li><li><strong>实际效果</strong>：返回的引用在调用者的作用域内有效（如<code>large</code>的生命周期覆盖<code>longest</code>的调用）。</li></ul><h3 id="总结：避免悬垂引用的3种方式">总结：避免悬垂引用的3种方式</h3><ol><li><strong>返回所有权</strong>（如<code>fn get_a() -&gt; String</code>）：转移值的控制权，无需引用。</li><li><strong>引用外部变量</strong>（如<code>fn get_a(s: &amp;String) -&gt; &amp;String</code>）：确保被引用对象生命周期足够长。</li><li><strong>生命周期注解</strong>（如<code>fn longest&lt;'a&gt;(x: &amp;'a str) -&gt; &amp;'a str</code>）：明确引用的合法存活范围。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础[part4]_基本类型,所有权</title>
      <link href="/2025/07/11/Rust%E5%9F%BA%E7%A1%80%5Bpart4%5D_%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B,%E6%89%80%E6%9C%89%E6%9D%83/"/>
      <url>/2025/07/11/Rust%E5%9F%BA%E7%A1%80%5Bpart4%5D_%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B,%E6%89%80%E6%9C%89%E6%9D%83/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/image-20250711222125005.png</cover>
      <date>Fri Jul 11 2025 18:52:46 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust基础[part4]_基本类型,所有权</h1><h2 id="Rust类型">Rust类型</h2><h3 id="概览">概览</h3><p>以下是整合后的 Rust 类型说明表格：</p><table><thead><tr><th>类型</th><th>说明</th><th>值</th></tr></thead><tbody><tr><td><code>i8</code>、<code>i16</code>、<code>i32</code>、<code>i64</code>、<code>i128</code>、<code>u8</code>、<code>u16</code>、<code>u32</code>、<code>u64</code>、<code>u128</code></td><td>给定位宽的有符号整数和无符号整数</td><td><code>42</code>、<code>-5i8</code>、<code>0x400u16</code>、<code>0o100i16</code>、<code>20_922_789_888_000u64</code>、<code>b'*'</code>（<code>u8</code> 字节字面量）</td></tr><tr><td><code>isize</code>、<code>usize</code></td><td>与机器字（32 位或 64 位）一样大的有符号整数和无符号整数</td><td><code>137</code>、<code>-0b0101_0010isize</code>、<code>0xffff_fc00usize</code></td></tr><tr><td><code>f32</code>、<code>f64</code></td><td>单精度 IEEE 浮点数和双精度 IEEE 浮点数</td><td><code>1.61803</code>、<code>3.14f32</code>、<code>6.0221e23f64</code></td></tr><tr><td><code>bool</code></td><td>布尔值</td><td><code>true</code>、<code>false</code></td></tr><tr><td><code>char</code></td><td>Unicode 字符，32 位宽（4 字节）</td><td><code>'*'</code>、<code>'\n'</code>、<code>'字'</code>、<code>'\x7f'</code>、<code>'\u&#123;...&#125;'</code>（Unicode 转义）</td></tr><tr><td><code>(char, u8, i32)</code></td><td>元组，允许混合类型</td><td><code>('%', 0x7f, -1)</code></td></tr><tr><td><code>()</code></td><td>“单元”（空元组）</td><td><code>()</code></td></tr><tr><td><code>struct S &#123; x: f32, y: f32 &#125;</code></td><td>具名字段型结构体</td><td><code>S &#123; x: 120.0, y: 209.0 &#125;</code></td></tr><tr><td><code>struct T(i32, char);</code></td><td>元组型结构体</td><td><code>T (120, 'X')</code></td></tr><tr><td><code>struct E;</code></td><td>单元型结构体，无字段</td><td><code>E</code></td></tr><tr><td><code>enum Attend &#123; OnTime, Late(u32) &#125;</code></td><td>枚举，或代数数据类型</td><td><code>Attend::Late(5)</code>、<code>Attend::OnTime</code></td></tr><tr><td><code>Box&lt;Attend&gt;</code></td><td><code>Box</code>：指向堆中值的拥有型指针</td><td><code>Box::new(Late(15))</code></td></tr><tr><td><code>&amp;i32</code>、<code>&amp;mut i32</code></td><td>共享引用和可变引用：非拥有型指针，其生命周期不能超出引用目标</td><td><code>&amp;s.y</code>、<code>&amp;mut v</code></td></tr><tr><td><code>String</code></td><td>UTF-8 字符串，动态分配大小</td><td><code>&quot; ラーメン : ramen&quot;.to_string()</code></td></tr><tr><td><code>&amp;str</code></td><td>对 <code>str</code> 的引用：指向 UTF-8 文本的非拥有型指针</td><td><code>&quot; そば : soba&quot;</code>、<code>&amp;s[0..12]</code></td></tr><tr><td><code>[f64; 4]</code>、<code>[u8; 256]</code></td><td>数组，固定长度，其元素类型都相同</td><td><code>[1.0, 0.0, 0.0, 1.0]</code>、<code>[b' '; 256]</code></td></tr><tr><td><code>Vec&lt;f64&gt;</code></td><td>向量，可变长度，其元素类型都相同</td><td><code>vec![0.367, 2.718, 7.389]</code></td></tr><tr><td><code>&amp;[u8]</code>、<code>*mut [u8]</code></td><td>对切片（数组或向量某一部分）的引用，包含指针和长度</td><td><code>&amp;v[10..20]</code>、<code>&amp;mut a[..]</code></td></tr><tr><td><code>Option&lt;&amp;str&gt;</code></td><td>可选值：或者为 <code>None</code>（无值），或者为 <code>Some(v)</code>（有值，其值为 <code>v</code>）</td><td><code>Some(&quot;Dr.&quot;)</code>、<code>None</code></td></tr><tr><td><code>Result</code></td><td>可能失败的操作结果：或者为成功值 <code>Ok(v)</code>，或者为错误值 <code>Err(e)</code></td><td><code>Ok(4096)</code>、<code>Err(Error::last_os_error())</code></td></tr><tr><td><code>&amp;dyn Any</code>、<code>&amp;mut dyn Read</code></td><td>特型对象，是对任何实现了一组给定方法的值的引用</td><td><code>value as &amp;dyn Any</code>、<code>&amp;mut file as &amp;mut dyn Read</code></td></tr><tr><td><code>fn(&amp;str) -&gt; bool</code></td><td>函数指针</td><td><code>str::is_empty</code></td></tr><tr><td>（闭包类型没有显式书写形式）</td><td>闭包</td><td>`</td></tr><tr><td><code>x..=y</code></td><td>序列</td><td><code>1..=4</code></td></tr></tbody></table><h3 id="整型">整型</h3><table><thead><tr><th>大小</th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8 位</td><td>i8</td><td>u8</td></tr><tr><td>16 位</td><td>i16</td><td>u16</td></tr><tr><td>32 位</td><td>i32</td><td>u32</td></tr><tr><td>64 位</td><td>i64</td><td>u64</td></tr><tr><td>128 位</td><td>i128</td><td>u128</td></tr><tr><td>视架构而定</td><td>isize</td><td>usize</td></tr></tbody></table><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">print_int_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> integer<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span> <span class="token comment">// 最大值</span>    <span class="token keyword">let</span> integer<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">;</span> <span class="token comment">// 最小值</span>    <span class="token keyword">let</span> integer<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0x1F</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制</span>    <span class="token keyword">let</span> integer<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0o17</span><span class="token punctuation">;</span> <span class="token comment">// 八进制</span>    <span class="token keyword">let</span> integer<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0b1111_0000</span><span class="token punctuation">;</span> <span class="token comment">// 二进制</span>    <span class="token keyword">let</span> integer<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> <span class="token comment">// 使用下划线分隔数字</span>    <span class="token keyword">let</span> integer<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> <span class="token char">b'A'</span><span class="token punctuation">;</span> <span class="token comment">// 字符转换为整数</span><span class="token punctuation">&#125;</span></code></pre><h3 id="浮点型">浮点型</h3><p>浮点类型数数字，带有小数点，基本两种类型是：f32和f64</p><p>默认为f64，精度更高，速度基本和f32相同</p><p>但是一般在区块链应用中，一般都使用i128， 因为精度的问题</p><h4 id="精度问题">精度问题</h4><p>精度问题，Rust 作为一门注重内存安全和性能的系统级编程语言，在处理数值精度时遵循明确的规则，但也存在一些需要开发者注意的潜在陷阱。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 浮点数相加 这里会failed</span></code></pre><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"0.1 + 0.2 = &#123;:x&#125;"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>abc<span class="token number">.0</span> <span class="token operator">+</span> abc<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"0.3 = &#123;:x&#125;"</span><span class="token punctuation">,</span> abc<span class="token number">.2</span><span class="token punctuation">.</span><span class="token function">to_bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"0.1 + 0.2 = &#123;:x&#125;"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>xyz<span class="token number">.0</span> <span class="token operator">+</span> xyz<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to_bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"0.3 = &#123;:x&#125;"</span><span class="token punctuation">,</span> xyz<span class="token number">.2</span><span class="token punctuation">.</span><span class="token function">to_bits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果，发现高精度的0.1 + 0.2 的结果和0.3的结果是不同的。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">=</span> 3e99999a<span class="token number">0.3</span> <span class="token operator">=</span> 3e99999a<span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">=</span> 3fd3333333333334<span class="token number">0.3</span> <span class="token operator">=</span> 3fd3333333333333</code></pre><p>这就是精度问题。</p><blockquote><p>Rust 对<strong>整数</strong>和<strong>浮点数</strong>的类型后缀语法有细微差别：</p><ul><li><strong>整数</strong>：类型后缀直接紧跟数值，<strong>无下划线</strong>。<br>例如：<code>1u32</code>、<code>42i64</code>、<code>0xFFu8</code>。</li><li><strong>浮点数</strong>：类型后缀与数值之间<strong>必须有下划线</strong>（<code>_</code>）。<br>例如：<code>0.5_f32</code>、<code>3.14159_f64</code>。</li></ul></blockquote><h3 id="NAN">NAN</h3><p>NAN(Not a Number) ， 用来定义如以下这个平方根，这种数学上未定义的结果。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">nan_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> nan_value<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.1_f64</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算负数的平方根</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span>nan_value<span class="token punctuation">.</span><span class="token function">is_nan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查是否为NaN</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"NaN: &#123;&#125;"</span><span class="token punctuation">,</span> nan_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="布尔类型">布尔类型</h3><p>占一个字节</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">boolean_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> f<span class="token punctuation">:</span> <span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"true: &#123;&#125;, false: &#123;&#125;"</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="字符">字符</h3><p>单引号去声明的，unicode字符也可以作为Rust的字符 ，占用四个字节</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">char_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token keyword">char</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> emoji<span class="token punctuation">:</span> <span class="token keyword">char</span> <span class="token operator">=</span> '😊'<span class="token punctuation">;</span><span class="token comment">// unicode字符也可以作为Rust的字符</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"char: &#123;&#125;, emoji: &#123;&#125;"</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> emoji<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="序列">序列</h3><p>包含需要加上<code>=</code></p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">_sequence_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> seq <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 包含5的范围</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> seq <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Sequence: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="类型强转">类型强转</h3><p>as关键字用于在原始类型之间进行类型转换，不适用于复合类型，比如String或其他自定义类型</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">convert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> a <span class="token keyword">as</span> <span class="token keyword">f64</span><span class="token punctuation">;</span> <span class="token comment">// 将i32转换为f64</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Converted value: &#123;&#125;"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> c<span class="token punctuation">:</span> <span class="token keyword">f64</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> c <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token comment">// 将f64转换为i32</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Converted value: &#123;&#125;"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="练习">练习</h3><p><a href="https://practice-zh.course.rs/basic-types/numbers.html">https://practice-zh.course.rs/basic-types/numbers.html</a></p><h4 id="错题记录：">错题记录：</h4><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 填空</span><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Range</span><span class="token punctuation">,</span> <span class="token class-name">RangeInclusive</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Range</span><span class="token punctuation">&#123;</span> start<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">RangeInclusive</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 填空，并解决错误</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 整数加法</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token number">1u32</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 整数减法</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token number">1i32</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token number">1i8</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token number">9.6</span> <span class="token operator">/</span> <span class="token number">3.2</span> <span class="token operator">-</span> <span class="token number">3.0</span> <span class="token operator">&lt;</span> <span class="token number">1e-9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 逻辑与或非操作</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 位操作</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"0011 AND 0101 is &#123;:04b&#125;"</span><span class="token punctuation">,</span> <span class="token number">0b0011u32</span> <span class="token operator">&amp;</span> <span class="token number">0b0101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"0011 OR 0101 is &#123;:04b&#125;"</span><span class="token punctuation">,</span> <span class="token number">0b0011u32</span> <span class="token operator">|</span> <span class="token number">0b0101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"0011 XOR 0101 is &#123;:04b&#125;"</span><span class="token punctuation">,</span> <span class="token number">0b0011u32</span> <span class="token operator">^</span> <span class="token number">0b0101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"1 &lt;&lt; 5 is &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token number">1u32</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"0x80 >> 2 is 0x&#123;:x&#125;"</span><span class="token punctuation">,</span> <span class="token number">0x80u32</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="所有权">所有权</h2><blockquote><p>零开销内存回收的一种高效实现方式</p></blockquote><p>Rust是一种系统编程语言，其设计目的是确保内存安全并防止数据竞争，而不依赖垃圾回收器。这种内存安全性主要通过所有权系统来进行实现。</p><h3 id="为什么需要所有权？">为什么需要所有权？</h3><p>在系统编程语言中，内存管理一直是核心挑战：</p><ul><li><strong>手动管理（如 C/C++）</strong>：开发者需手动分配和释放内存，易出现悬空指针、内存泄漏等问题。</li><li><strong>垃圾回收（如 Java/Go）</strong>：自动回收不再使用的内存，但带来运行时开销和不可预测的停顿。</li></ul><p>Rust 通过<strong>所有权系统</strong>在编译期解决内存安全问题，无需垃圾回收，同时保持高性能。</p><h3 id="基本规则">基本规则</h3><ol><li>每一个值都有所有者(owner);</li><li>在任一时刻，值都只有一个所有者;</li><li>当所有者离开作用域(scope),值会被丢弃(drop);</li></ol><h3 id="move语义">move语义</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">_ownership_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s1<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> s2<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> s1<span class="token punctuation">;</span> <span class="token comment">// 转移所有权</span>    <span class="token comment">// println!("&#123;&#125;", s1); // 此处会报错，因为s1的所有权已转移</span>    <span class="token function">drop</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rust中可以手动释放资源,但通常不需要这样做,因为Rust会在变量超出作用域时自动释放资源; 注意s1这个时候已经是类似空指针的状态，也不需要去释放</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="copy语义">copy语义</h3><p>基本数据类型</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">// x 的值被复制到 y</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"x = &#123;&#125;, y = &#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 两个变量都有效</span><span class="token punctuation">&#125;</span></code></pre><h3 id="练习-2">练习</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 用两种方法打印成功s1 和s2的值</span>    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello, Rust!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token namespace">ownership<span class="token punctuation">::</span></span><span class="token function">take_ownership</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//以下代码不能修改</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="第一种方法">第一种方法</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 第一种方法</span>    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello, Rust!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">take_ownership</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用clone方法复制s1</span>    <span class="token comment">//以下代码不能修改</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">take_ownership</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    s <span class="token comment">// 返回的是 s的克隆</span><span class="token punctuation">&#125;</span></code></pre><h3 id="第二种方法">第二种方法</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 第二种方法</span>    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello, Rust!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">take_ownership</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传递s1的引用</span>    <span class="token comment">//以下代码不能修改</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 传入类型改为引用类型</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">take_ownership</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">&amp;</span><span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Taking ownership of: &#123;&#125;"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>s <span class="token comment">// 返回s的引用</span><span class="token punctuation">&#125;</span></code></pre><p>后面会详细讲到引用的用法</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础[part3]_函数、流程控制</title>
      <link href="/2025/07/10/Rust%E5%9F%BA%E7%A1%80-part3-%E5%87%BD%E6%95%B0/"/>
      <url>/2025/07/10/Rust%E5%9F%BA%E7%A1%80-part3-%E5%87%BD%E6%95%B0/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/image-20250710224443048.png</cover>
      <date>Thu Jul 10 2025 11:44:48 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust基础[part3]_函数、流程控制</h1><h2 id="函数">函数</h2><h3 id="组成和定义">组成和定义</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    i <span class="token operator">+</span> j<span class="token punctuation">&#125;</span></code></pre><ul><li>声明函数的关键字<code> fn</code></li><li>函数名<code>add()</code></li><li>参数i和j和参数类型 <code>i32</code></li><li>返回值类型`i32``</li><li>函数题<code>i+j</code></li></ul><h3 id="函数返回">函数返回</h3><h4 id="返回形态">返回形态</h4><p><code>i+j</code> 和 <code>return i+j;</code></p><p>可以有两种形态</p><ul><li>return + 分号</li><li>无return + 无分号</li></ul><h4 id="无返回值的情况："><strong>无返回值的情况</strong>：</h4><p>就返回 <code>()</code></p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span></code></pre><h4 id="永不返回值的情况：">永不返回值的情况：</h4><p><code>!</code>表示函数永不返回，例如<code>panic!</code>宏会导致程序崩溃，函数不会返回。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">add_one</span><span class="token punctuation">(</span>i<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">!</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"weeee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>死循环也不会返回</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">infinite_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">!</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 永远不会返回</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="流程控制">流程控制</h2><h3 id="if语法">if语法</h3><pre class="language-rust" data-language="rust"><code class="language-rust"> <span class="token comment">// if_else();</span>  <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Condition was true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Condition was false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token comment">// else if</span><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">&#123;</span>      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Condition was true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Condition was true for number % 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Condition was true for number % 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Condition was false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><p>let 语句中使用if，需要注意分号结尾。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> condition <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token keyword">if</span> condition <span class="token punctuation">&#123;</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of number is: &#123;&#125;"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="loop循环">loop循环</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">//loop 循环</span>    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"This is an infinite loop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="break、-continue">break、 continue</h4><p>使用break 关键字来告诉程序停止循环，使用continue关键字来告诉程序继续循环。</p><p>let语句中也可以使用loop返回, 需要注意分号结尾。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// let语句中使用loop</span>   <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>       count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">&#123;</span>           <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking the loop at count: &#123;&#125;"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">break</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 返回值</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><h4 id="多层loop">多层loop</h4><p>break退出内层循环，可以使用命名loop的方法来退出指定的循环。标签的语法是使用单引号（'）后跟一个标识符</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 多层循环可以使用标签来控制跳出特定的循环层级</span>   <span class="token comment">// 标签可以帮助我们在多层嵌套循环中跳出特定的循环层级</span>   <span class="token comment">// 标签的语法是使用单引号（'）后跟一个标识符</span>   <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token lifetime-annotation symbol">'outerloop</span><span class="token punctuation">:</span> <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>           i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Inner loop iteration with i: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>               <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking out of the inner loop at i: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 跳出内层循环</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>               <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Breaking out of the outer loop at i: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span> <span class="token lifetime-annotation symbol">'outerloop</span><span class="token punctuation">;</span> <span class="token comment">// 跳出外层循环</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="while-条件循环">while 条件循环</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">while_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> count<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">&#123;</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Current count: &#123;&#125;"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在rust中如果是条件判断的循环，使用while是比较便捷的，如果需要遍历集合的话，可以使用for</p><h3 id="for遍历集合">for遍历集合</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">for_example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> numbers <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Current number: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 直接遍历数值，逆序使用rev()</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Current number in range: &#123;&#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="所有权转移与借用：">所有权转移与借用：</h4><p>是Rust中的循环访问规则</p><h5 id="1-未实现Copy-trait的类型：所有权会转移（Move语义）">1. 未实现<code>Copy</code> trait的类型：所有权会转移（Move语义）</h5><p>像<code>Vec</code>这类集合类型<strong>没有实现<code>Copy</code> trait</strong>，当直接用它们进行循环遍历（<code>for v in vec</code>）时，循环会获取<code>vec</code>的所有权（即“所有权转移”）。</p><ul><li>循环结束后，<code>vec</code>的所有权已被消耗，无法再被访问（编译器会报错）。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 直接遍历vec：所有权转移给循环变量v</span><span class="token keyword">for</span> v <span class="token keyword">in</span> vec <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Current value: &#123;&#125;"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时v是vec中元素的所有权持有者</span><span class="token punctuation">&#125;</span><span class="token comment">// ❌ 错误：vec的所有权已转移，无法再使用</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Vector after loop: &#123;:?&#125;"</span><span class="token punctuation">,</span> vec<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h5 id="2-解决办法：用“借用”避免所有权转移">2. 解决办法：用“借用”避免所有权转移</h5><p>若想在循环后继续使用<code>vec</code>，需通过<strong>引用（&amp;）</strong> 进行“借用”，而非直接转移所有权。根据是否需要修改元素，分为两种借用方式：</p><h6 id="（1）不可变借用（-vec）：仅读取，不修改">（1）不可变借用（<code>&amp;vec</code>）：仅读取，不修改</h6><p>用<code>&amp;vec</code>进行遍历，循环获取的是<code>vec</code>的<strong>不可变引用</strong>，所有权仍归原变量所有。</p><ul><li>循环中只能读取元素，不能修改。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 不可变借用：&amp;vec表示“临时借用vec的读取权”</span><span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token operator">&amp;</span>vec <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Current value: &#123;&#125;"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// v是&amp;i32类型（不可变引用）</span><span class="token punctuation">&#125;</span><span class="token comment">// ✅ 合法：vec所有权未转移，可继续使用</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Vector after loop: &#123;:?&#125;"</span><span class="token punctuation">,</span> vec<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h6 id="（2）可变借用（-mut-vec）：需要修改元素">（2）可变借用（<code>&amp;mut vec</code>）：需要修改元素</h6><p>若要在循环中修改元素，需用<code>&amp;mut vec</code>进行<strong>可变借用</strong>，此时循环变量<code>v</code>是<code>&amp;mut i32</code>（可变引用）。</p><ul><li>修改元素时需用<code>*v</code>解引用（获取引用指向的实际值）。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> vec <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 可变借用：&amp;mut vec表示“临时借用vec的修改权”</span><span class="token keyword">for</span> v <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> vec <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token operator">*</span>v <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>        <span class="token operator">*</span>v <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// ✅ 解引用后修改：3 → 13</span>    <span class="token punctuation">&#125;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Current value: &#123;&#125;"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// v是&amp;mut i32，打印时自动解引用</span><span class="token punctuation">&#125;</span><span class="token comment">// ✅ 合法：所有权未转移，修改后的值已保留</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Vector after loop: &#123;:?&#125;"</span><span class="token punctuation">,</span> vec<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 [1, 2, 13, 4, 5]</span></code></pre><h5 id="3-实现Copy-trait的类型：所有权不转移（Copy语义）">3. 实现<code>Copy</code> trait的类型：所有权不转移（Copy语义）</h5><p>像整数、布尔值等<strong>基本数据类型</strong>，以及由它们组成的数组（<code>[i32; n]</code>），都<strong>实现了<code>Copy</code> trait</strong>。</p><ul><li>循环遍历这类类型时，会自动复制元素（而非转移所有权），原变量的所有权仍保留，循环后可正常使用。</li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 数组元素是i32（实现了Copy）</span><span class="token comment">// 遍历arr：会复制每个元素给v，而非转移所有权</span><span class="token keyword">for</span> v <span class="token keyword">in</span> arr <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Current value: &#123;&#125;"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// v是复制的i32值</span><span class="token punctuation">&#125;</span><span class="token comment">// ✅ 合法：arr的所有权未转移，可继续使用</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Array after loop: &#123;:?&#125;"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 [1, 2, 3, 4, 5]</span></code></pre><h5 id="核心区别总结">核心区别总结</h5><table><thead><tr><th>类型特征</th><th>循环方式</th><th>所有权状态</th><th>循环后能否使用原变量</th></tr></thead><tbody><tr><td>未实现<code>Copy</code>（如<code>Vec</code>）</td><td><code>for v in vec</code></td><td>所有权转移给v</td><td>不能（已被消耗）</td></tr><tr><td>未实现<code>Copy</code>（如<code>Vec</code>）</td><td><code>for v in &amp;vec</code></td><td>仅借出不可变引用</td><td>能（所有权仍保留）</td></tr><tr><td>未实现<code>Copy</code>（如<code>Vec</code>）</td><td><code>for v in &amp;mut vec</code></td><td>仅借出可变引用</td><td>能（所有权仍保留）</td></tr><tr><td>实现<code>Copy</code>（如<code>[i32; n]</code>）</td><td><code>for v in arr</code></td><td>元素被复制，所有权不转移</td><td>能（原变量未被修改）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础[part2]_变量和可变类型</title>
      <link href="/2025/07/10/Rust%E5%9F%BA%E7%A1%80-part2-%E5%8F%98%E9%87%8F%E5%92%8C%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B/"/>
      <url>/2025/07/10/Rust%E5%9F%BA%E7%A1%80-part2-%E5%8F%98%E9%87%8F%E5%92%8C%E5%8F%AF%E5%8F%98%E7%B1%BB%E5%9E%8B/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/image-20250710105710174.png</cover>
      <date>Thu Jul 10 2025 10:00:00 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust基础[part2]_变量和可变类型</h1><h2 id="可变变量与不可变变量">可变变量与不可变变量</h2><p>可以不指定数据类型</p><h3 id="可变变量——mutable">可变变量——mutable</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">immutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of x is: &#123;&#125;"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="不可变变量——immutable">不可变变量——immutable</h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">mutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of y is: &#123;&#125;"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The value of y is now: &#123;&#125;"</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="常量——constants">常量——constants</h2><ul><li><p>需要制定明确的数据类型，并且需要使用大写字母</p></li><li><p>需要使用常量表达式进行赋值</p></li><li><p>不支持重定义（遮蔽）<br><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250710101303874.png" alt="image-20250710101303874" style="zoom:33%;" /></p></li></ul><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">const</span> <span class="token constant">NUM</span><span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">THREE_HOURS</span><span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><h2 id="不可变量和常量的区别">不可变量和常量的区别</h2><ul><li>常量在编译期就就确定了值，不能在运行时进行改变； 不可变量知道运行期才能确认下来。</li><li>常量不可修改，不可变变量可以通过shadowing来进行修改</li><li>常量必须声明类型，不可变变量不需要声明类型。</li><li>常量必须使用大写字母。</li></ul><h2 id="静态变量——static">静态变量——static</h2><p>需要通过<code>mut</code>来指定可变， <code>unsafe</code> 块是必须的，因为静态变量在多线程环境中可能会引发数据竞争问题。</p><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">static</span> <span class="token keyword">mut</span> <span class="token constant">NUMBER</span><span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">static_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsafe</span> <span class="token punctuation">&#123;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"static NUMBER: &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token constant">NUMBER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 这里可以访问静态变量NUMBER </span><span class="token punctuation">&#125;</span></code></pre><h2 id="作用域scope和遮蔽shadowing">作用域scope和遮蔽shadowing</h2><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 绑定生存于main函数中</span>    <span class="token keyword">let</span> long_lived_binding <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 代码块， 比main函数拥有更小的作用域</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 绑定生存于代码块中</span>        <span class="token comment">// 这里的short_lived_binding只在这个代码块中有效</span>        <span class="token keyword">let</span> short_lived_binding <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"short_lived_binding: &#123;&#125;"</span><span class="token punctuation">,</span> short_lived_binding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遮蔽，在作用域中可以遮蔽成功</span>        <span class="token keyword">let</span> short_lived_binding <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"short_lived_binding after shadowing: &#123;&#125;"</span><span class="token punctuation">,</span> short_lived_binding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"long_lived_binding: &#123;&#125;"</span><span class="token punctuation">,</span> long_lived_binding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遮蔽长期绑定的变量</span>        <span class="token comment">// 这里的long_lived_binding会遮蔽外层的同名变量</span>        <span class="token keyword">let</span> long_lived_binding <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"long_lived_binding after shadowing: &#123;&#125;"</span><span class="token punctuation">,</span> long_lived_binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"long_lived_binding after block: &#123;&#125;"</span><span class="token punctuation">,</span> long_lived_binding<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// println!("short_lived_binding after block: &#123;&#125;", short_lived_binding); // 这里会报错，因为short_lived_binding在代码块外不可见</span>    <span class="token comment">// 遮蔽长期绑定的变量</span>    <span class="token keyword">let</span> long_lived_binding <span class="token operator">=</span> <span class="token number">5_f32</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"long_lived_binding after shadowing: &#123;&#125;"</span><span class="token punctuation">,</span> long_lived_binding<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust基础[part1]</title>
      <link href="/2025/07/08/Rust%E5%9F%BA%E7%A1%80-part1/"/>
      <url>/2025/07/08/Rust%E5%9F%BA%E7%A1%80-part1/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/image-20250708170114528.png</cover>
      <date>Tue Jul 08 2025 14:22:04 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Rust基础[part1]</h1><h2 id="安装">安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash">➜  rust <span class="token function">curl</span> <span class="token parameter variable">--proto</span> <span class="token string">'=https'</span> <span class="token parameter variable">--tlsv1.2</span> https://sh.rustup.rs <span class="token parameter variable">-sSf</span> <span class="token operator">|</span> <span class="token function">sh</span></code></pre><p>安装成功</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250708143222926.png" alt=""></p><h3 id="验证">验证</h3><pre class="language-bash" data-language="bash"><code class="language-bash">➜  rust rustc <span class="token parameter variable">--version</span>zsh: <span class="token builtin class-name">command</span> not found: rustc</code></pre><p>因为我是用的是zsh，所以zsh配置文件需要加入配置</p><pre class="language-bash" data-language="bash"><code class="language-bash">➜  rust <span class="token builtin class-name">echo</span> <span class="token string">'export PATH="$HOME/.cargo/bin:$PATH"'</span> <span class="token operator">>></span> ~/.zshrc➜  rust <span class="token builtin class-name">source</span> ~/.zshrc</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">➜  rust rustc <span class="token parameter variable">--version</span>rustc <span class="token number">1.88</span>.0 <span class="token punctuation">(</span>6b00bc388 <span class="token number">2025</span>-06-23<span class="token punctuation">)</span></code></pre><p>安装成功！</p><p>其他命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">➜  rust rustup update <span class="token comment"># 安装</span>➜  rust rustup self uninstall <span class="token comment"># 卸载</span></code></pre><h2 id="VsCode插件">VsCode插件</h2><p>rust语言支持：</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250708144849314.png" alt="image-20250708144849314"></p><p>rust包支持：</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250708145332281.png" alt="image-20250708145332281"></p><p>toml支持：</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250708145320438.png" alt="image-20250708145320438"></p><h2 id="rustc">rustc</h2><h3 id="创建目录">创建目录</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> hello-world<span class="token builtin class-name">cd</span> hello-world</code></pre><h3 id="创建源文件main-rs"><a href="http://xn--main-p85fp0o980al5l0yt.rs">创建源文件main.rs</a></h3><pre class="language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>终端输入 <code>rustc main.rs</code> 会得到一个二进制的文件<code>mian</code></p><p>执行mian 会得到输出</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250708154103948.png" alt="image-20250708154103948"></p><h2 id="cargo">cargo</h2><h3 id="初始化">初始化</h3><ul><li><p>初始化项目 <code>cargo new [项目名] </code></p></li><li><p>构建 <code>cargo build</code>并运行<code>./target/debug/hello_cargo </code>；或者直接使用<code>cargo run</code></p></li></ul><p>当项目最终准备好发布时，可通过以下命令对 Rust 项目进行<strong>优化编译</strong>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cargo</span> build <span class="token parameter variable">--release</span>  </code></pre><ul><li><strong>输出目录</strong>：编译产物会生成在 <code>target/release</code> 目录下（开发阶段默认的 <code>cargo build</code> 会输出到 <code>target/debug</code>）。</li><li><strong>优化特性</strong>：<code>--release</code> 会启用 Rust 编译器的性能优化（如代码内联、循环展开、冗余代码消除等），使最终程序的运行速度显著提升。</li></ul><h2 id="依赖">依赖</h2><p>crate是Rust的一个代码库，可以包含任意能被其他程序使用的代码，但是不能只执行。</p><p><code>cargo.toml</code>中 <code>[dependencies]</code>  增加配置</p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rand</span><span class="token punctuation">=</span><span class="token string">"0.8.5"</span></code></pre><p>重新构建执行<code>cargo build</code> 会从cargo.io拉到指定的依赖版本到<code>cargo.lock</code>中。</p><p>执行<code>cargo update</code>会忽略<code>cargo.lock</code> 的版本，从cargo.io拉到最新的依赖版本</p><h3 id="配置国内镜像">配置国内镜像</h3><pre class="language-bash" data-language="bash"><code class="language-bash">➜  hello_cargo git:<span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">touch</span> ~/.cargo/config.toml➜  hello_cargo git:<span class="token punctuation">(</span>main<span class="token punctuation">)</span> <span class="token function">vim</span> ~/.cargo/config.toml</code></pre><h5 id="第一种配置：">第一种配置：</h5><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">registries</span><span class="token punctuation">]</span><span class="token key property">ustc</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">index</span> <span class="token punctuation">=</span> <span class="token string">"sparse+https://mirrors.ustc.edu.cn/crates.io-index/"</span> <span class="token punctuation">&#125;</span></code></pre><p>前缀 <code>sparse+</code> 启用稀疏模式，比传统全量索引更快</p><p>Cargo.toml 指定镜像地址</p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span><span class="token key property">registry</span> <span class="token punctuation">=</span> <span class="token string">"ustc"</span><span class="token punctuation">,</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.8.5"</span><span class="token punctuation">&#125;</span></code></pre><h5 id="第二种配置">第二种配置</h5><p><a href="http://xn--cargo-3h8h707g8c6axhaz11o.io">直接覆盖原cargo.io</a> ，不用指定镜像地址了</p><pre class="language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">source.crates-io</span><span class="token punctuation">]</span><span class="token key property">replace-with</span> <span class="token punctuation">=</span> <span class="token string">"ustc"</span><span class="token punctuation">[</span><span class="token table class-name">source.ustc</span><span class="token punctuation">]</span><span class="token key property">registry</span> <span class="token punctuation">=</span> <span class="token string">"sparse+https://mirrors.ustc.edu.cn/crates.io-index/"</span></code></pre><p>重新build一遍</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB3-Day8—Foundry框架[part1]</title>
      <link href="/2025/07/06/WEB3-Day8%E2%80%94Foundry%E6%A1%86%E6%9E%B6-part1/"/>
      <url>/2025/07/06/WEB3-Day8%E2%80%94Foundry%E6%A1%86%E6%9E%B6-part1/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/image-20250707180402433.png</cover>
      <date>Sun Jul 06 2025 09:41:44 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>WEB3-Day8—Foundry框架[part1]</h1><h2 id="简介">简介</h2><h2 id="Foundry-Fundamentals">Foundry Fundamentals</h2><p>Foundry 是一个相对较新但发展迅猛的智能合约开发框架，以高效性和模块化设计著称。关于这个强大工具的最佳简介可查阅 <a href="https://book.getfoundry.sh/">《Foundry 官方手册》</a>：<br>Foundry 可管理项目依赖、编译工程、运行测试、部署合约，并支持通过命令行及 Solidity 脚本与区块链交互。</p><p>请务必收藏 <a href="https://book.getfoundry.sh/">《Foundry 官方手册》</a>—— 它是最全面的资源，可解答您的所有疑问，在学习过程中会持续提供帮助。</p><h4 id="Foundry-的核心优势包括：">Foundry 的核心优势包括：</h4><ul><li><strong>借助 Rust</strong> 进行编译，相比 Hardhat 或 Brownie 等框架，构建速度显著提升；</li><li>完全基于 <strong>Solidity</strong> 开发，无需学习其他编程语言；</li><li><strong>文档体系极为完善</strong>。</li></ul><h4 id="推荐代码编辑器：Visual-Studio-Code">推荐代码编辑器：Visual Studio Code</h4><p>在本课程中，我们将使用 Visual Studio Code 完成智能合约的 <strong>编写</strong>、<strong>测试</strong>、<strong>部署</strong> 及 <strong>交互</strong>。这款轻量级代码编辑器功能强大，支持 Windows、macOS 和 Linux 系统，其丰富的扩展生态系统使其成为智能合约开发的首选工具之一。</p><h2 id="安装Foundry">安装Foundry</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://foundry.paradigm.xyz <span class="token operator">|</span> <span class="token function">bash</span><span class="token builtin class-name">source</span> /Users/tinachan/.zshenvfoundryup</code></pre><h2 id="创建文件夹和初始化">创建文件夹和初始化</h2><h3 id="创建文件夹">创建文件夹</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> foundry-f23  <span class="token builtin class-name">cd</span> foundry-f23  </code></pre><p>现在输入以下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> foundry-simple-storage-f23  <span class="token builtin class-name">cd</span> foundry-simple-storage-f23  </code></pre><p><strong>技巧</strong>：输入目标路径的前几个字母后按 <code>Tab</code> 键可快速补全 <code>cd</code> 命令——<code>Tab</code> 键能自动补全大部分命令/路径。</p><p>若输入 <code>code .</code>，将打开新的 VS Code 实例，并默认以 <code>foundry-simple-storage-f23</code> 为工作路径。</p><p>可通过左侧边栏查看该文件夹内容。尝试执行以下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> randomFile.txt  </code></pre><p>这将创建一个 <code>randomFile.txt</code> 文件。</p><p>若需删除该文件，输入：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> randomFile.txt  </code></pre><p>终端在移动/打开/创建目录/文件、切换路径及运行程序方面非常便捷。若想提升操作效率，推荐阅读 <a href="https://ubuntu.com/tutorials/command-line-for-beginners#1-overview">此教程</a>。</p><h3 id="创建新项目">创建新项目</h3><p><a href="https://book.getfoundry.sh/projects/creating-a-new-project">创建新Foundry项目</a> 的方式是执行 <code>forge init</code> 命令，这将在当前工作目录生成一个新的Foundry项目。</p><p>若希望Foundry在新文件夹中创建项目，输入：<code>forge init 新文件夹名称</code>。</p><p><strong>注意</strong>：<code>forge init</code> 默认要求目标文件夹为空。若文件夹非空，需执行 <code>forge init --force .</code>。</p><p>若遇到Git配置相关错误，需先配置用户名和邮箱：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的邮箱@提供商.com"</span>  <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的用户名"</span>  </code></pre><p>完成后，文件夹结构应如下所示：<br><img src="https://img.soniachen.com/blog/posts/2025/07/Image1-20250707153950529.png" alt="Image1"></p><h4 id="各文件夹含义说明：">各文件夹含义说明：</h4><ul><li><p><strong>lib</strong>：存放所有依赖项，例如：</p><ul><li><code>forge-std</code>（用于测试和脚本的forge库）</li><li><code>openzeppelin-contracts</code>（经过大量实践验证的智能合约库）</li><li>其他按需安装的依赖</li></ul></li><li><p><strong>scripts</strong>：存放所有脚本文件</p></li><li><p><strong>src</strong>：存放所有智能合约源文件</p></li><li><p><strong>test</strong>：存放所有测试文件</p></li><li><p><strong>foundry.toml</strong>：Foundry的配置参数文件</p></li></ul><p>后续将详细介绍这些文件夹和文件。</p><p>现在请右键点击 <code>src</code> 文件夹，选择 <code>New File</code> 并命名为 <code>SimpleStorage.sol</code>。将 <a href="https://github.com/Cyfrin/foundry-simple-storage-f23/blob/main/src/SimpleStorage.sol">此链接</a> 中的代码复制到该文件中。</p><p><strong>最后一步</strong>：请删除 <code>Counter.s.sol</code>、<code>Counter.sol</code> 和 <code>Counter.t.sol</code>。这些是Foundry创建新项目时默认提供的基础智能合约文件。</p><h2 id="VSCode插件">VSCode插件</h2><p>刚开始编写代码时，界面可能只是一片单调、缺乏格式的白色文本。</p><p>通过安装 <code>Solidity</code> 扩展可轻松解决这个问题。在扩展选项卡（按 <code>CTRL/CMD + SHIFT + X</code>）中，以下几个 Solidity 扩展值得关注：</p><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=JuanBlanco.solidity">Solidity by Juan Blanco</a> —— 最常用的 Solidity 扩展。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=NomicFoundation.hardhat-solidity">Solidity by Nomic Foundation</a> —— Patrick 最推荐的 Solidity 扩展，本课程将使用此扩展演示。</li><li><a href="https://marketplace.visualstudio.com/items?itemName=tintinweb.solidity-visual-auditor">Solidity Visual Developer</a> —— 另一款热门选择。</li></ol><p><strong>注意</strong>：若安装扩展后代码仍无高亮，可按以下步骤解决：<br>按下 <code>Command + Shift + P</code>（macOS）或 <code>Control + Shift + P</code>（Windows）打开命令面板，输入“Settings”并选择 <strong>“Preferences: Open User Settings (JSON)”</strong>。</p><p>若文件为空，添加以下设置：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"NomicFoundation.hardhat"</span><span class="token punctuation">&#125;</span></code></pre><ul><li>若使用 <strong>Solidity Visual Developer</strong>，设置为：<br><code>&quot;editor.defaultFormatter&quot;: &quot;tintinweb.solidity-visual-auditor&quot;</code></li><li>若使用 <strong>Solidity by Juan Blanco</strong>，设置为：<br><code>&quot;editor.defaultFormatter&quot;: &quot;JuanBlanco.solidity&quot;</code></li></ul><h3 id="其他实用扩展">其他实用扩展</h3><p>上一课提到的 <code>foundry.toml</code> 配置文件也有对应的格式化扩展，推荐安装 <a href="https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml">Even Better TOML</a>，提升 TOML 文件的可读性。</p><p>另一款必备扩展是 <a href="https://marketplace.visualstudio.com/items?itemName=tintinweb.vscode-inline-bookmarks">Inline Bookmarks</a>，其功能如下：<br>该插件支持在代码中添加书签，适用于文档评审、安全审计、日志分析及记录开发笔记和待办事项。书签会随文件保存，可轻松与他人共享。</p><p>默认预设的触发标签/关键词如下：</p><ul><li><code>@todo</code>（蓝色）：常规待办事项标记</li><li><code>@note</code>（蓝色）：常规注释</li><li><code>@remind</code>（蓝色）：提醒事项</li><li><code>@follow-up</code>（蓝色）：待跟进事项</li><li><code>@audit</code>（红色）：潜在问题标记</li><li><code>@audit-info</code>（蓝色）：待后续处理的信息标记</li><li><code>@audit-ok</code>（绿色）：标记某行代码无问题（即使看似有问题）</li><li><code>@audit-issue</code>（紫色）：标记已记录问题的代码位置</li></ul><p><strong>提示</strong>：这些标签的颜色可完全自定义！它们在开发尤其是项目审计中非常实用，更多细节可查阅 <a href="https://github.com/tintinweb/vscode-inline-bookmarks">官方文档</a>。</p><h2 id="编译合约">编译合约</h2><p>复制之前Solidity基础课程中的 <code>SimpleStorage.sol</code>合约</p><p>然后打开新终端。输入 <code>forge build</code> 或 <code>forge compile</code> 来编译项目中的智能合约。</p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250707155154335.png" alt="image-20250707155154335" style="zoom:33%;" /><h2 id="部署合约">部署合约</h2><h3 id="Anvil">Anvil</h3><p>部署智能合约有多种方式和平台。使用Foundry框架开发时，最简单且现成的部署环境是Anvil。</p><p>Anvil是Foundry自带的本地测试网络节点，可用于从前端测试合约或通过RPC交互。在终端输入<code>anvil</code>即可运行：</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/Image1-20250707155614146-20250707155742952.png" alt="Image1"></p><p>此时会生成10个测试地址，每个地址预存10_000 ETH及对应的私钥。该测试节点默认监听<code>127.0.0.1:8545</code>，此地址将作为部署合约时的<code>RPC_URL</code>参数（后续会详细说明）。更多Anvil相关信息可查阅 <a href="https://book.getfoundry.sh/reference/anvil/">官方文档</a>。</p><p>如需关闭Anvil，按<code>Ctrl/CMD + C</code>即可。本课程将全程使用Anvil部署和测试合约，在此之前先了解一个中间步骤。</p><h4 id="Ganache">Ganache</h4><p><em>Ganache通常指糕点酱，由等量奶油和碎巧克力加热制成，先温热奶油再浇在巧克力上。</em></p><p>等等，这里说的不是糕点酱！另一个Ganache：<br>Ganache是用于快速开发以太坊和Filecoin分布式应用的个人区块链，可在整个开发生命周期中使用，支持在安全且确定的环境中开发、部署和测试dApp。</p><p>请从 <a href="https://archive.trufflesuite.com/ganache/">此处</a> 下载Ganache。</p><p>使用Windows WSL的用户请阅读 <a href="https://github.com/Cyfrin/foundry-simple-storage-f23?tab=readme-ov-file#windows-wsl--ganache">此文档</a>——在该环境中配置Ganache并非易事，且后续不会使用，因此配置失败无需担心。</p><p>点击<code>Quickstart Ethereum</code>，即可生成全新区块链，包含带余额的地址和私钥。</p><h4 id="配置MetaMask">配置MetaMask</h4><p>若需部署到自定义网络（如本地节点），需使用MetaMask——这是一款流行的加密货币钱包和浏览器扩展，支持与以太坊区块链及其生态交互。尚未安装者可从 <a href="https://metamask.io/download/">此处</a> 下载。</p><p>配置步骤如下：</p><ol><li>打开MetaMask，点击三点图标并选择<code>Expand View</code>；</li><li>进入<code>Settings</code>→<code>Networks</code>，查看网络列表及详情，重点关注RPC URL；<br><strong>RPC URL本质上是发送交易时调用API的端点</strong>，每次执行区块链交易都会向该地址发送API请求。</li></ol><p>添加自定义区块链网络的步骤：</p><ol><li>点击<code>Add a Network</code>，滚动至列表底部；</li><li>选择<code>Add a Network manually</code>，输入本地网络信息：<ul><li>网络名称：<code>Localhost</code></li><li>新RPC URL：Ganache为<code>http://127.0.0.1:7545</code>，Anvil为<code>http://127.0.0.1:8545</code>（需确保添加<code>http://</code>，具体URL以Ganache界面或Anvil终端显示为准）</li><li>链ID：Ganache通常为<code>5777</code>（或<code>1337</code>），Anvil为<code>31337</code>（具体ID以工具显示为准）</li><li>货币符号：ETH</li><li>区块浏览器URL：留空（本地区块链无区块浏览器，关闭VS Code/Ganache后数据通常会丢失）</li></ul></li></ol><p>配置完本地网络后，需将Ganache或Anvil中的账户导入MetaMask，步骤如下 <a href="https://support.metamask.io/hc/en-us/articles/360015489331-How-to-import-an-account#h_01G01W07NV7Q94M7P1EBD5BYM4">点击查看详情</a>：</p><ol><li>点击钱包顶部的账户选择器，点击<code>Add account or hardware wallet</code>；</li><li>选择<code>Import account</code>，粘贴Ganache/Anvil的私钥并点击<code>Import</code>。</li></ol><p><strong>重要提示：此账户仅限本地测试使用，切勿在主网或其他真实区块链中使用，所有人均可访问该账户！</strong></p><p>接下来将进一步讲解在MetaMask中添加新网络的细节。</p><h3 id="命令行部署">命令行部署</h3><pre class="language-bash" data-language="bash"><code class="language-bash">forge create SimpleStorage <span class="token parameter variable">--interactive</span></code></pre><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250707161734804.png" alt="image-20250707161734804"></p><h3 id="脚本部署">脚本部署</h3><p>通过脚本部署智能合约特别实用，因为它提供了一致且可重复的可靠部署方式，其特性还能增强对部署流程和代码本身的测试。</p><p>你可能喜欢命令行方式，但脚本会丰富整个部署流程，带来无可比拟的功能扩展和易用性。</p><p>Foundry基于Solidity开发，这意味着我们的部署脚本也将使用Solidity编写。必须明确区分作为合约语言的Solidity和作为脚本语言的Solidity——Foundry还整合了扩展功能，让Solidity的应用超出智能合约范畴。现在开始创建部署简单存储合约的脚本。</p><h4 id="在Foundry中，脚本存放在script文件夹下">在Foundry中，脚本存放在<code>script</code>文件夹下</h4><ol><li>创建新文件<code>DeploySimpleStorage.s.sol</code><ul><li><code>.s.sol</code>是Foundry脚本的命名规范，后续编写测试时会使用<code>.t.sol</code>后缀。</li><li>更多脚本最佳实践可查阅 <a href="https://book.getfoundry.sh/guides/best-practices#scripts">此处</a>。</li></ul></li></ol><h4 id="编写Solidity部署脚本">编写Solidity部署脚本</h4><ol><li><p>初始代码框架：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token number">0.8</span><span class="token number">.19</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">DeploySimpleStorage</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>前两行分别声明许可证和Solidity版本。</li></ul></li><li><p>导入依赖并继承<code>Script</code>：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token number">0.8</span><span class="token number">.19</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Script<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"forge-std/Script.sol"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>SimpleStorage<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../src/SimpleStorage.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">DeploySimpleStorage</span> <span class="token keyword">is</span> Script <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><strong>注</strong>：<code>forge-std</code>（Forge标准库）包含预写的Solidity合约，用于简化和增强Foundry中的脚本与测试。</li></ul></li><li><p>添加<code>run</code>主函数：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token number">0.8</span><span class="token number">.19</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Script<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"forge-std/Script.sol"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>SimpleStorage<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../src/SimpleStorage.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">DeploySimpleStorage</span> <span class="token keyword">is</span> Script <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span>SimpleStorage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vm<span class="token punctuation">.</span><span class="token function">startBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleStorage simpleStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vm<span class="token punctuation">.</span><span class="token function">stopBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleStorage<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><code>vm</code>是Foundry的“作弊码”（cheat codes），仅在Foundry环境中生效：<ul><li><code>vm.startBroadcast()</code>标记发送到RPC URL的交易开始；</li><li><code>vm.stopBroadcast()</code>标记交易结束；</li></ul></li><li><code>new SimpleStorage()</code>通过Solidity的<code>new</code>关键字创建合约实例。</li></ul></li></ol><h4 id="执行部署脚本">执行部署脚本</h4><ol><li><p>停止正在运行的Anvil（按<code>CTRL(CMD) + C</code>），运行：</p><pre class="language-bash" data-language="bash"><code class="language-bash">forge script script/DeploySimpleStorage.s.sol</code></pre><ul><li>若遇“文件中Solidity版本不兼容”错误，确保<code>SimpleStorage.sol</code>和部署脚本均使用<code>pragma solidity 0.8.19;</code>。</li></ul></li><li><p>典型输出：</p><pre class="language-text" data-language="text"><code class="language-text">[⠆] Compiling...[⠔] Compiling 2 files with 0.8.19[⠒] Solc 0.8.19 finished in 1.08sCompiler run successful!Script ran successfully.Gas used: 338569== Return ==0: contract SimpleStorage 0x90193C961A926261B756D1E5bb255e67ff9498A1</code></pre><ul><li><strong>关键问题</strong>：未指定RPC URL时，Foundry会自动启动并终止Anvil实例完成部署。</li></ul></li><li><p>指定RPC URL模拟部署：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先启动Anvil</span>anvil<span class="token comment"># 新开终端执行</span>forge script script/DeploySimpleStorage.s.sol --rpc-url http://127.0.0.1:8545</code></pre><ul><li>输出中的<code>SIMULATION COMPLETE</code>表示这是模拟部署，生成的<code>broadcast</code>文件夹记录脚本运行信息。</li></ul></li><li><p>广播部署（添加私钥）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">forge script script/DeploySimpleStorage.s.sol --rpc-url http://127.0.0.1:8545 <span class="token parameter variable">--broadcast</span> --private-key 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80</code></pre><ul><li>Anvil终端将显示成功部署的交易信息：<pre class="language-text" data-language="text"><code class="language-text">Transaction: 0x73eb9fb4ef7b159e03c50d669c42e2ec4eeaa9358bea0a710cb07168e5192570Contract created: 0x5fbdb2315678afecb367f032d93f642f64180aa3Gas used: 357088</code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Foundry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB3-Day7—Solidity基础[part6]</title>
      <link href="/2025/07/04/WEB3-Day7%E2%80%94Solidity%E5%9F%BA%E7%A1%80-part6/"/>
      <url>/2025/07/04/WEB3-Day7%E2%80%94Solidity%E5%9F%BA%E7%A1%80-part6/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/image-20250704160915402.png</cover>
      <date>Fri Jul 04 2025 11:01:12 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>WEB3-Day7—Solidity基础[part6]</h1><h2 id="变量优化">变量优化</h2><p>优化<strong>仅设置一次的变量</strong>的燃气消耗（gas usage）</p><p>变量 <code>owner</code> 和 <code>minimumUSD</code> 仅设置一次且永不改变：<code>owner</code> 在合约创建时赋值，<code>minimumUSD</code> 在合约初始化时设定。</p><h3 id="评估-FundMe-合约">评估 FundMe 合约</h3><p>我们可以通过部署合约并在终端中观察交易来评估创建合约所需的燃气量。在原始合约配置中，我们消耗了近 859,000 单位燃气。</p><h3 id="常量（Constant）">常量（Constant）</h3><p>为减少燃气消耗，我们可以使用 <code>constant</code> 和 <code>immutable</code> 关键字。这些关键字确保变量值保持不变。更多信息可参考 <a href="https://solidity.readthedocs.io/">Solidity 文档</a>。</p><p>对于仅赋值一次且永不改变的变量，我们可以应用这些关键字。</p><p>对于<strong>编译时已知</strong>的值，使用 <code>constant</code> 关键字。它会避免变量占用存储槽位，从而使读取更便宜、更快速。</p><p>使用 <code>constant</code> 关键字可节省约 19,000 单位燃气，这接近在两个账户之间发送 ETH 的成本。</p><blockquote><p>📝 <strong>注意</strong>：<br><code>constant</code> 变量的命名约定为全大写并以下划线分隔（例如 <code>MINIMUM_USD</code>）。</p></blockquote><blockquote><p>⚠️ <strong>警告</strong>：<br>将当前 ETH 燃气成本转换为美元时可见，当 ETH 价格为 3000 美元时，将 <code>MINIMUM_USD</code> 定义为常量需花费 9 美元，比其公开变量（public）的等效实现多近 1 美元。</p></blockquote><h3 id="不可变（Immutable）">不可变（Immutable）</h3><p><code>constant</code> 变量适用于编译时已知的值，而 <code>immutable</code> 适用于部署时设置且不再改变的变量。<code>immutable</code> 变量的命名约定是在变量名前添加前缀 <code>i_</code>（例如 <code>i_owner</code>）。</p><p>将 <code>owner</code> 设为 <code>immutable</code> 变量后，观察到其燃气节省效果与 <code>constant</code> 关键字类似。</p><blockquote><p>💡 <strong>提示</strong>：<br>在学习的早期阶段，不必过于关注燃气优化。先保证合约能够完整写出来先。</p></blockquote><h2 id="自定义错误">自定义错误</h2><h3 id="需求检查（Require）">需求检查（Require）</h3><p>提升燃气效率的一种方式是优化 <code>require</code> 语句。当前，<code>require</code> 语句强制我们存储字符串 <code>'sender is not an owner'</code>，该字符串中的每个字符都会单独存储，导致管理逻辑复杂且成本高昂。</p><h3 id="自定义错误（Custom-Errors）">自定义错误（Custom Errors）</h3><p>自 <strong>Solidity 0.8.4</strong> 版本引入的自定义错误可用于 <code>revert</code> 语句中。这些错误需在代码顶部声明，并在 <code>if</code> 语句中使用。相较于之前的错误消息字符串，调用更轻量的错误代码可降低燃气成本。</p><p>我们可以先创建一个自定义错误：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity">error <span class="token function">NotOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后用 <code>if</code> 语句替换 <code>require</code> 函数，并通过 <code>revert</code> 调用新创建的错误：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">!=</span> i_owner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">revert</span> <span class="token function">NotOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>通过实现自定义错误，我们既能降低燃气消耗，又能简化智能合约中的错误处理。</p><h3 id="结论">结论</h3><p>本节课中，我们学习了如何通过使用自定义错误替代传统含字符串的 require 语句，进一步优化 Solidity 合约的燃气效率。</p><h2 id="receive和fallback函数">receive和fallback函数</h2><p><code>receive</code>和<code>fallback</code>是特殊函数，当用户直接向合约发送以太币或调用不存在的函数时会触发。这些函数不返回任何值，且必须声明为<code>external</code>。</p><p>为了说明这一点，我们创建一个简单的合约：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.7</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">FallbackExample</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span> result<span class="token punctuation">;</span>    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在这个合约中，<code>result</code>初始化为0。当以太币发送到合约时，<code>receive</code>函数会被触发，将<code>result</code>设为1。如果交易包含数据但指定的函数不存在，则会触发<code>fallback</code>函数，将<code>result</code>设为2。</p><p>如需全面解释，请参考<a href="https://solidity-by-example.org/">SolidityByExample</a>。</p><h3 id="发送以太币的逻辑流程">发送以太币的逻辑流程</h3><pre class="language-none"><code class="language-none">向合约发送以太币        |        ↓    msg.data为空吗？      &#x2F;        \     是          否    &#x2F;            \  receive()存在？   fallback()    &#x2F;      \   是        否  &#x2F;          \receive()     fallback()</code></pre><h3 id="向fundMe合约发送以太币">向fundMe合约发送以太币</h3><p>当用户直接向<code>fundMe</code>合约发送以太币而不调用<code>fund</code>函数时，可以使用<code>receive</code>函数将交易重定向到<code>fund</code>函数：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>    <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>要测试此功能，可使用MetaMask向<code>fundMe</code>合约发送一些Sepolia测试网以太币。此时并未直接调用<code>fund</code>函数，但<code>receive</code>函数会触发它。确认交易后，检查<code>funders</code>数组，会发现其已更新，表明<code>receive</code>函数成功调用了<code>fund</code>函数。</p><p>这种方法确保所有交易按预期处理。尽管直接调用<code>fund</code>函数消耗的Gas更少，但此方法能确保用户的贡献被正确确认和记录。</p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB3-Day6—Solidity基础[part5]</title>
      <link href="/2025/07/03/WEB3-Day6%E2%80%94Solidity%E5%9F%BA%E7%A1%80-part5/"/>
      <url>/2025/07/03/WEB3-Day6%E2%80%94Solidity%E5%9F%BA%E7%A1%80-part5/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/image-20250703173726505.png</cover>
      <date>Thu Jul 03 2025 15:14:03 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>WEB3-Day6—Solidity基础[part5]</h1><blockquote><p>继续完善<code>fundMe</code>合约 的 fund() 和 withDraw()</p></blockquote><h2 id="转换ETH为USD">转换ETH为USD</h2><p>如果我们的最小交易值需要用美元为单位，我们该如何和msg.value进行比较？</p><p>新建一个变量：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token builtin">uint256</span> <span class="token keyword">public</span>  minimumUsd <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1e18</span><span class="token punctuation">;</span>  <span class="token comment">// 补全精度</span></code></pre><p>新建两个函数：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// Function to get the price of Ethereum in USD</span><span class="token keyword">function</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// Function to convert a value based on the price</span><span class="token keyword">function</span> <span class="token function">getConversionRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><strong>getPrice()</strong>:获取真实世界中以太坊当前的美元市场价格</li><li><strong>getConversionRate()</strong>：根据当前输入价格进行计算和转换</li></ul><h3 id="去中心化预言机">去中心化预言机</h3><p>以太坊等资产的美元价格无法仅通过区块链技术获取，而是由金融市场决定。为了获取正确的<strong>价格信息</strong>，必须在链下数据与链上数据之间建立连接，这一需求由<strong>去中心化预言机网络</strong>实现。</p><p>区块链存在这一局限性，是因为其<strong>确定性本质</strong>——它确保所有节点达成唯一共识。若尝试将外部数据引入区块链，将破坏这种共识，导致所谓的<strong>智能合约连接性问题</strong>或<strong>预言机问题</strong>。</p><p>若想让智能合约有效替代传统协议，它们必须具备与<strong>现实世界数据</strong>交互的能力。</p><p>依赖中心化预言机传输数据是不足的，因为这会重新引入潜在的单点故障风险。中心化数据源会削弱区块链功能所必需的信任前提。因此，中心化节点无法满足外部数据或计算需求。<strong>Chainlink</strong>通过提供去中心化预言机网络，解决了这些中心化挑战。</p><h4 id="ChainLink数据源">ChainLink数据源</h4><p><a href="https://docs.chain.link/data-feeds/using-data-feeds">Chainlink Data Feed documentation</a> 提供如何与数据源合约交互的文档</p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250703173726505.png" alt="image-20250703173726505" style="zoom: 33%;" /><p><code>AggregatorV3Interface</code>：是一个数据源地址作为输入的合约。保持ETH/USD价格实时更新。</p><p>合约中的<code>latestRoundData</code> 函数返回最新的以太坊价格。</p><p>为了使用合约，我们需要它的地址和ABI。该地址可在Chainlink文档中的 <a href="https://docs.chain.link/data-feeds/price-feeds/addresses">Price Feed Contract Addresses</a>部分找到。我们将使用ETH/USD。</p><p>首先导入该合约，可以通过github地址导入</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>AggregatorV3Interface<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol"</span><span class="token punctuation">;</span></code></pre><p>在chainLink找到ETH/USD地址，调用latestRoundData函数获取answer，不用的参数可以用<code>,</code>相隔，因为返回的answer是int类型需要转换uint</p><h3 id="完善getPrice">完善getPrice() :</h3><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span>  <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        AggregatorV3Interface addressToBeFetched <span class="token operator">=</span> <span class="token function">AggregatorV3Interface</span><span class="token punctuation">(</span><span class="token number">0x694AA1769357215DE4FAC081bf1f309aDC325306</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token builtin">int256</span> answer<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> addressToBeFetched<span class="token punctuation">.</span><span class="token function">latestRoundData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ( ,,,, , )  取出地址，值，错误码等</span>        <span class="token keyword">return</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span>answer <span class="token operator">*</span> <span class="token number">1e18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p><strong>msg.value</strong> 是一个具有 18 位小数精度的 uint256 值。</p><p><strong>answer</strong> 是一个具有 8 位小数精度的 int256 值（基于 USD 的交易对使用 8 位小数，而基于 ETH 的交易对使用 18 位小数）。</p><p>这意味着从我们的latestRoundData函数返回的价格与msg.value不直接兼容。为了匹配小数位数，我们将价格乘以1e10.</p><blockquote><p>⚠️ 始终先乘后除保持精度避免截断错误。</p></blockquote><h3 id="完善getConversionRate">完善getConversionRate():</h3><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">getConversionRate</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> ethAmmout<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token builtin">uint256</span> ethPrice <span class="token operator">=</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>ethPrice<span class="token operator">*</span>ethAmmout<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e18</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><blockquote><p>uint256 ethAmountInUsd = (ethPrice * ethAmount)</p><p>得到的结果精度为 1e18 * 1e18 = 1e36。为了将 ethAmountInUsd 的精度恢复到 1e18，我们需要将结果除以 1e18。</p></blockquote><h3 id="更改fund-：">更改fund()：</h3><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">getConversionRate</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">>=</span> MINIMUM_USD<span class="token punctuation">,</span> <span class="token string">"You need to spend more ETH!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>部署合约，调用getPrice函数获取当前以太坊价格。还可以向该合约发送资金，如果ETH金额低于5美元就一会报错。</p><p>完整代码：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.18</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>AggregatorV3Interface<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">FundMe</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span>  minimumUsd <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1e18</span><span class="token punctuation">;</span> <span class="token comment">// 补全精度</span>        <span class="token keyword">function</span> <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">getConversionRate</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">></span> minimumUsd<span class="token punctuation">,</span> <span class="token string">"Didn't send enough ETH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//if the condition is false, revert with the error message    &#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">withDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取当前的eth对应实际世界的美元价格</span>    <span class="token keyword">function</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        AggregatorV3Interface addressToBeFetched <span class="token operator">=</span> <span class="token function">AggregatorV3Interface</span><span class="token punctuation">(</span><span class="token number">0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token builtin">int256</span> answer<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span> addressToBeFetched<span class="token punctuation">.</span><span class="token function">latestRoundData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ( ,,,, , )  取出地址，值，错误码等</span>        <span class="token keyword">return</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span>answer <span class="token operator">*</span> <span class="token number">1e18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">getConversionRate</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> ethAmmout<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint256</span> ethPrice <span class="token operator">=</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ethPrice<span class="token operator">*</span>ethAmmout<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e18</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="追踪资金">追踪资金</h3><p>为了追踪向合约发送资金的地址，我们可以创建一个名为funders的地址array记录：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token builtin">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> funders<span class="token punctuation">;</span></code></pre><p>fund()函数中添加以下逻辑，每当有人向合约发送钱时，我们将使用push函数将他们的地址添加到数组中：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity">funders<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="库-Libraries">库[Libraries]</h3><p>当某个功能具有通用性的时候，我们可以创建一个library库来高效管理重复代码。</p><p>getPrice()函数和getConversionRate()这些方法可以被任何使用价格预言机的合约多次复用。</p><p>在Solidity示例网站 <a href="https://solidity-by-example.org/library/">Solidity by example</a>上可以找到优秀的库示例。Solidity的库与合约类似，但不允许声明任何状态变量，也不能接收ETH。</p><blockquote><p>📢 库中所有的函数都必须声明为internal，必须独立部署以后再链接到主合约。</p></blockquote><p>创建新文件<code>PriceConverter.sol</code>，将两个函数的逻辑剪切到这边，注意声明internal</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.18</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>AggregatorV3Interface<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol"</span><span class="token punctuation">;</span><span class="token keyword">library</span> <span class="token class-name">PriceConverter</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        AggregatorV3Interface priceFeed <span class="token operator">=</span> <span class="token function">AggregatorV3Interface</span><span class="token punctuation">(</span><span class="token number">0x694AA1769357215DE4FAC081bf1f309aDC325306</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token builtin">int256</span> answer<span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> priceFeed<span class="token punctuation">.</span><span class="token function">latestRoundData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token builtin">uint256</span><span class="token punctuation">(</span>answer <span class="token operator">*</span> <span class="token number">10000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">getConversionRate</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> ethAmount<span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint256</span> ethPrice <span class="token operator">=</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">uint256</span> ethAmountInUsd <span class="token operator">=</span> <span class="token punctuation">(</span>ethPrice <span class="token operator">*</span> ethAmount<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000000000000000</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ethAmountInUsd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>主合约<code>FundMe</code>修改为：</p><ul><li>import库</li><li>using PriceConvertor for uint256 ：表示所有uint256类型可以调用该library的函数</li><li>msg.value.getConversionRate() 直接调用</li></ul><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.18</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>PriceConvertor<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./PriceConvertor.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">FundMe</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 表示所有uint256类型可以调用该library的函数</span>    <span class="token keyword">using</span> <span class="token class-name">PriceConvertor</span> <span class="token keyword">for</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>    <span class="token builtin">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> funders<span class="token punctuation">;</span>     <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> funderAddress <span class="token operator">=></span> <span class="token builtin">uint256</span> funderAmount<span class="token punctuation">)</span> <span class="token keyword">public</span> funderAmountMap<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span>  minimumUsd <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1e18</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">getConversionRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> minimumUsd<span class="token punctuation">,</span> <span class="token string">"Didn't send enough ETH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//if the condition is false, revert with the error message    &#125;</span>        <span class="token comment">//记录追踪资金</span>        funders<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>        funderAmountMap<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">withDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="solidity-0-8后变更">solidity 0.8后变更</h3><p><code>safeMath</code> 作为0.8版本之前广泛被使用的库，曾是智能合约中的标配功能，为什么如今不再使用了呢？</p><p>可以调整到编译器版本为<code>0.6.0</code> ，新建一个合约<code>SafeMathTester</code></p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SafeMathTester.sol</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.6.0</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">SafeMathTester</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint8</span> <span class="token keyword">public</span> bigNumber <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        bigNumber <span class="token operator">=</span> bigNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>编译调用该函数，<strong>发现bigNumber值会被重置为0</strong>，这是因为0.8版本之前，有符号或者无符号的整数都是未检查的，意味着如果他们超过变量类型能够容纳的最大值，就会重置为下限值。</p><p>而<code>safeMath</code>会提供一个机制，达到最大限制时回滚交易，避免错误计算和漏洞。</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token builtin">uint</span> a<span class="token punctuation">,</span> <span class="token builtin">uint</span> b<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> a<span class="token punctuation">,</span> <span class="token string">"SafeMath: addition overflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>0.8.0</code>以后，solidity已经实现自动化溢出下溢检查，在新版本部署<code>SafeMathTester</code> 将会报错而不是重置为0；</p><p>同时，也引入unchecked结构来提高代码的gas效率：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token builtin">uint8</span> <span class="token keyword">public</span> bigNumber <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    unchecked <span class="token punctuation">&#123;</span>        bigNumber <span class="token operator">=</span> bigNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>被unchecked包裹的代码块将忽略溢出和下溢检查，如果超出限制，就会重置到0。</p><h2 id="从合约发送ETH">从合约发送ETH</h2><p>接下来进行资金的提取</p><h3 id="重置资金">重置资金</h3><p>募集资金了以后，合约中已经存储了所有募集的资金，所以在资金提取这一步，我们可以先清空追踪资金的数组和集合，这里需要用到循环：</p><p>首先将map置空，再将数组置空</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">withDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//  Reset the funder records</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> funderIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> funderIndex <span class="token operator">&lt;</span> funders<span class="token punctuation">.</span>length<span class="token punctuation">;</span> funderIndex <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">address</span> funder <span class="token operator">=</span> funders<span class="token punctuation">[</span>funderIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        funderAmountMap<span class="token punctuation">[</span>funder<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// reset the array</span>    funders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="构造函数">构造函数</h3><p>目前，任何人都可以调用提款函数并将所有资金从合约中提走。为了解决这个问题，我们需要将提款函数限制为仅合约所有者可以调用。</p><p>解决办法就是构造函数：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>构造函数会在合约部署期间自动调用，与部署合约的交易在同一笔交易中执行。</strong></p><p>在函数里，我们将状态变量所有者初始化为合约部署者的地址（msg.sender）。</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>更新withDraw函数：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">,</span> <span class="token string">"must be owner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// rest of the function here</span><span class="token punctuation">&#125;</span></code></pre><p>限制只有合约拥有者才可以进行提取。</p><h4 id="modify优化">modify优化</h4><p>Solidity 中的修饰器（Modifier）是一种强大的合约元编程工具，用于在执行函数前 / 后注入额外逻辑（如权限检查、状态验证等）。合理使用修饰器不仅能提高代码复用性，还能显著优化合约性能与安全性。</p><p>上述的权限检查可以单独拆出来作为modify函数</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">modifier</span> onlyOwner <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">,</span><span class="token string">"Must be the Owner!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>原函数添加<code>onlyOwner</code>：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="转账">转账</h3><h4 id="Transfer">Transfer</h4><p>是以太币转帐至接收地址的最简单方式</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">payable</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// the current contract sends the Ether amount to the msg.sender</span></code></pre><p>然而，transfer有一个显著的限制。它只能使用最多2300个gas，并且它会回滚任何超出这个限制的交易，正如《Solidity实例教程》 <a href="https://solidity-by-example.org/sending-ether/">Solidity by Example</a>所示。</p><blockquote><p>🧐 为什么需要<code>payable</code>关键字？</p><p>必须将接收者地址转换为可支付地址，以便它能够接收以太币。可以通过将msg.sender用可payable关键字包裹来实现。</p></blockquote><h4 id="Send">Send</h4><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token builtin">bool</span> success <span class="token operator">=</span> <span class="token keyword">payable</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> <span class="token string">"Send failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与transfer类似，send也有2300的gas限制。如果达到gas限制，它不会撤销交易，但会返回一个布尔值（true或false）以指示交易的成功或失败。处理失败是开发者的责任，如果send返回false，触发撤销条件是一种良好的实践。</p><h4 id="Call">Call</h4><p>call函数非常灵活和强大。它可以用来调用任何函数，而不需要它的ABI。它没有gas限制，并且像send一样，它返回一个布尔值，而不是像transfer那样回滚。</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">payable</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> <span class="token string">"Call failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>call函数返回两个变量(bool success, )：一个表示成功或失败的布尔值，以及一个存储返回数据的字节对象（如果有）。</p><blockquote><p>❗call是发送和接收以太坊或其他区块链原生代币的推荐方式。</p></blockquote><h2 id="完整代码">完整代码</h2><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.18</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>PriceConvertor<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./PriceConvertor.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">FundMe</span><span class="token punctuation">&#123;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> owner<span class="token punctuation">;</span>    <span class="token keyword">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        owner <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 表示所有uint256类型可以调用该library的函数</span>    <span class="token keyword">using</span> <span class="token class-name">PriceConvertor</span> <span class="token keyword">for</span> <span class="token builtin">uint256</span><span class="token punctuation">;</span>    <span class="token builtin">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> funders<span class="token punctuation">;</span>     <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> funderAddress <span class="token operator">=></span> <span class="token builtin">uint256</span> funderAmount<span class="token punctuation">)</span> <span class="token keyword">public</span> funderAmountMap<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span>  minimumUsd <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1e18</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">getConversionRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> minimumUsd<span class="token punctuation">,</span> <span class="token string">"Didn't send enough ETH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//if the condition is false, revert with the error message    &#125;</span>            funders<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span>        funderAmountMap<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">withDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner<span class="token punctuation">&#123;</span>        <span class="token comment">//  Reset the funder records</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> funderIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> funderIndex <span class="token operator">&lt;</span> funders<span class="token punctuation">.</span>length<span class="token punctuation">;</span> funderIndex <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token builtin">address</span> funder <span class="token operator">=</span> funders<span class="token punctuation">[</span>funderIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            funderAmountMap<span class="token punctuation">[</span>funder<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// reset the array</span>        funders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// send money to msg.sender[three ways]</span>        <span class="token comment">// transfer</span>            <span class="token comment">// payable(msg.sender).transfer(amount); // the current contract sends the Ether amount to the msg.sender</span>        <span class="token comment">// send</span>            <span class="token comment">// bool success = payable(msg.sender).send(address(this).balance); require(success, "Send failed");</span>        <span class="token comment">// call</span>        <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">payable</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span>value<span class="token punctuation">:</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> <span class="token string">"Call failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 任何由onlyOwner修饰都会先执行这部分代码，“_;”代表被修饰的函数的代码，放在require之前就是先执行完函数代码再执行modifier代码块中内容</span>    <span class="token keyword">modifier</span> onlyOwner <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">,</span><span class="token string">"Must be the Owner!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">_</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlockChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB3-Day5—Solidity基础[part4]</title>
      <link href="/2025/07/01/WEB3-Day5%E2%80%94Solidity%E5%9F%BA%E7%A1%80-part4/"/>
      <url>/2025/07/01/WEB3-Day5%E2%80%94Solidity%E5%9F%BA%E7%A1%80-part4/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/image-20250702172430218.png</cover>
      <date>Tue Jul 01 2025 18:15:52 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>WEB3-Day5—Solidity基础[part4]</h1><h2 id="通过函数发送ETH">通过函数发送ETH</h2><p>新建合约 <code>FundMe.sol</code>，在本合约中会通过<code>fund()</code>函数向智能合约转移以太币。该函数将要求最低数量的ETH确保交易正常。</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.18</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">FundMe</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>我们还需要一个Withdraw函数，这样合约的owner(拥有者)可以提取不同的funder 发送的资金。</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.18</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">FundMe</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">withDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>当交易被发送到区块链时，交易数据中始终包含一个value字段。该字段表示该交易中转账的原生加密货币数量。</p><p>要使fund函数可以接受ether，必须将其声明为payable。同时在remix界面中部署了可以看到，这个关键字会使函数显示为红色，表示它可以接受加密货币。</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span></code></pre><h3 id="msy-value-属性">msy.value 属性</h3><p>在solidity中，交易的数值可以通过这个属性进行访问，是全局对象msg的一部分，表示当前交易中传输的Wei的数量。【Wei是ETH的最小单位】</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="交易字段">交易字段</h3><p>以太坊上发送的每笔交易都包含一些必要字段，这些字段包括：</p><ul><li><strong>Nonce</strong>：这是发送地址的交易计数器。它确保交易按顺序执行，并防止重播攻击。</li><li><strong>Gas Price</strong>：这是发送者愿意支付的 gas 单价，以太坊网络会根据 gas price 和 gas limit 来计算手续费。</li><li><strong>Gas Limit</strong>：这是交易执行所需的最大 gas 数量。它决定了交易的复杂程度和成本。</li><li><strong>To</strong>：这是接收以太币或者调用智能合约的目标地址。</li><li><strong>Value</strong>：这是发送的以太币数量。</li><li><strong>Data</strong>：这是可选字段，用于向智能合约发送数据。</li><li><strong>v、r、s</strong>：这些字段用于交易的签名验证，确保交易的安全性和完整性。</li></ul><p>在转账的时候，我们可以填充其中一些字段，例如，gas limit中填充的21,000，data是空的，然后to是我们想要将交易发送到的地址，在函数调用的交易中，仍然可以以这种方式填写to，我们可以调用一个函数，并同时进行转账。</p><h4 id="Value">Value</h4><p>每当我们在任何一个兼容EVM的区块链上创建一笔交易时，这个value的值，代表我们将通过这笔交易发送多少ETH，当我们在不同账户间转移ETH时，实际上就是在value中填充不同的ETH数量。</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250702172430218.png" alt="image-20250702172430218"></p><h3 id="撤销交易-Reverting-Transactions">撤销交易[Reverting Transactions]</h3><p>我们可以使用<code>requires</code>关键字作为检查器，强制要求函数接收至少<code>value</code>个完整的以太币, 不满足就会回滚。</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.18</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">FundMe</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">></span> <span class="token number">1</span> ether<span class="token punctuation">,</span> <span class="token string">"Didn't send enough ETH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//if the condition is false, revert with the error message    &#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">withDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>msg.value &gt; 1 ether</code>等同于 <code>msg.value &gt; 1e18</code></p><blockquote><p>👀❗提示<br>1 Ether = 1e9 Gwei = 1e18 Wei</p><p>Gwei是Gas费用的单位。</p></blockquote><p>在线转换单位的工具 ：<a href="https://eth-converter.com/">Ethconverter</a></p><p>回滚操作会撤销之前的所有操作，并将剩余gas费返还给交易者，我们在fund函数中添加一些逻辑：</p><p><code>myvalue  += 2;</code></p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.18</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">FundMe</span><span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span>  myvalue <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">payable</span> <span class="token punctuation">&#123;</span>        myvalue  <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value <span class="token operator">></span> <span class="token number">1</span> ether<span class="token punctuation">,</span> <span class="token string">"Didn't send enough ETH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//if the condition is false, revert with the error message    &#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">withDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>部署合约，点击fund函数，报错信息成功返回：</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250702171556647.png" alt="image-20250702171556647"></p><blockquote><p>⚠️ 回滚以后交易消耗的gas费不会返回的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlockChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB3 Day4—Solidity基础[part3]</title>
      <link href="/2025/07/01/WEB3%20Day4%20%E2%80%94%20Solidity%E5%9F%BA%E7%A1%80%5Bpart3%5D/"/>
      <url>/2025/07/01/WEB3%20Day4%20%E2%80%94%20Solidity%E5%9F%BA%E7%A1%80%5Bpart3%5D/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/07/deploying2-20250701102829448.png</cover>
      <date>Tue Jul 01 2025 10:15:52 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>WEB3 Day4—Solidity基础[part3]</h1><h2 id="智能合约部署-Smart-Contracts-Deploying">智能合约部署 Smart Contracts Deploying</h2><h3 id="Sepolia-TestNet-deploying">Sepolia TestNet deploying</h3><p>我们可以通过进入部署选项卡，从本地虚拟环境（Remix VM）切换到注入的提供者 - MetaMask 来开始部署过程。这一操作将允许Remix发送请求并与您的MetaMask账户进行交互。</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/deploying2-20250701102829448.png" alt="img"></p><p>随后系统会提示你去选择一个账号。 在你成功连接到remix之后，你会看到账号已经成功链接到并且正在使用sepolia网络的信息。</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/deploying3.png" alt="img"></p><p>注意，需要你的测试网络里面必须有足够的 sepolia ETH，如果没有需要从水龙头获取，免费的水龙头我这边会集中收集一次，后续可点击这篇文章：【TODO 挖个坑】；</p><p>暂时可以去这里<a href="https://www.alchemy.com/faucets/ethereum-sepolia">faucet</a>， 但是还是需要主账户里面要有ether。</p><p>随后，MetaMask就会要求你在测试网站上签署发送：</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/deploying4.png" alt="img"></p><p>交易执行之后，合约地址会将交易详情一同显示在已部署的合约列表下面。这就是<a href="https://etherscan.io/">Eherscan</a>上部署交易的显示方式。</p><p><img src="https://updraft.cyfrin.io/solidity/remix/lesson-2/deploying/deploying6.png" alt="img"></p><h2 id="合约交互-Contract-interaction">合约交互 Contract interaction</h2><p>合约部署完成以后，我们可以与之交互并更新区块链。例如，如果想存储一个数字，可以通过点击store按钮实现；MetaMask会要求再次确认交易。然后更行您设置的数字。这些交易都可以通过部署地址在etherscan上面查询查看。</p><h2 id="Zksync部署">Zksync部署</h2><p>由于以太坊主网合约部署成本比较高昂，所以RollUp和Layer2网络等扩容解决方案更佳，需要掌握部署在Zksync的流程。</p><p>首先需要<strong>Zksync的测试网基金</strong>以及<strong>zkSync的跨链桥</strong></p><p>可参照之前的笔记 <a href="https://blog.soniachen.com/2025/06/17/WEB3%20Day2%20%E2%80%94%E2%80%94%20BlockChain%20Basic%202+Solidity%E5%9F%BA%E7%A1%80%5Bpart1%5D/">WEB3 Day2 —— BlockChain Basic 2</a></p><p>然后步骤和上面主网的测试网络部署相似，只不过需要跨链</p><ul><li>连接钱包</li><li>需要将Sepolia ETH跨链到zkSync，<a href="https://portal.zksync.io/bridge/">Zksync Bridge地址</a><ul><li>连接钱包，保证网络在sepolia</li><li>从sepolia测试网发送eth到zksync</li></ul></li></ul><p><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250701110433474.png" alt="image-20250701110433474"></p><p>​<img src="https://img.soniachen.com/blog/posts/2025/07/image-20250701110602186.png" alt="image-20250701110602186"></p><ul><li><p>有测试基金以后，需要将remixIDE 下载zksync的插件<br><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250701111034094.png" alt="image-20250701111034094" style="zoom:33%;" /></p></li><li><p>⚠️ zkSync部署版本要求 ‘0.8.24’，并且合约<code>*.sol</code>文件必须放在一个<code>contracts</code>文件夹中，不然Zksyn插件的deploy标签页可能会显示空白</p></li><li><p>编译——&gt;连接钱包——&gt; 部署</p><p><img src="https://img.soniachen.com/blog/posts/2025/07/wallet.png" alt="img"></p></li></ul><h2 id="合约之间如何相互部署以及交互">合约之间如何相互部署以及交互</h2><p>通过import进行导入另一个合约</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.18</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./SimpleStorage.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">StorageFacotory</span> <span class="token punctuation">&#123;</span>    SimpleStorage <span class="token keyword">public</span> simpleStorage<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">createSimpleStorageContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span>  <span class="token punctuation">&#123;</span>        simpleStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果导入文件有多个合约，一般import最好声明具体的名称，可以不用导入该文件的所有合约</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>SimpleStorage<span class="token punctuation">,</span> SimpleStorage2<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./SimpleStorage.sol"</span><span class="token punctuation">;</span></code></pre><h4 id="调用另外一个合约的ABI-application-binary-interface">调用另外一个合约的ABI[application binary interface]</h4><p>可以创造一个SimpleStorage的数组来存储所有创建的simpleStorage的地址，然后通过地址去调用特定的simplestorage的函数</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.19</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>SimpleStorage<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./SimpleStorage.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">StorageFacotory</span> <span class="token punctuation">&#123;</span>    SimpleStorage<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> listOfSimpleStorage<span class="token punctuation">;</span>    <span class="token comment">// 创建需要的SimpleStorage</span>    <span class="token keyword">function</span> <span class="token function">createSimpleStorageContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span>  <span class="token punctuation">&#123;</span>        SimpleStorage simpleStorage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listOfSimpleStorage<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>simpleStorage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调用simpleStorage的store函数</span>    <span class="token keyword">function</span> <span class="token function">sfStore</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _index<span class="token punctuation">,</span> <span class="token builtin">uint256</span> myFavoriteNumber<span class="token punctuation">)</span> <span class="token keyword">public</span><span class="token punctuation">&#123;</span>        listOfSimpleStorage<span class="token punctuation">[</span>_index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>myFavoriteNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调用simpleStorage里面的recive函数</span>    <span class="token keyword">function</span> <span class="token function">sfRecive</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> _index<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> listOfSimpleStorage<span class="token punctuation">[</span>_index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">recive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250701154154011.png" alt="image-20250701154154011" style="zoom:33%;" /><h2 id="继承和重写">继承和重写</h2><p>创建继承自 <code>SimpleStorage.sol</code> 的新合约 <code>AddFiveStorage.sol</code>，并通过重写函数实现功能扩展。</p><p><code>SimpleStorage.sol</code>代码</p><ul><li>virtual 表示原函数可以被继承</li></ul><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> favoriteNumber<span class="token punctuation">)</span> <span class="token keyword">public</span> virtual  <span class="token punctuation">&#123;</span><span class="token comment">// 存储</span>     myFavoriteNumber <span class="token operator">=</span> favoriteNumber<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p><code>AddFiveStorage.sol</code>代码</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier:MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.18</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>SimpleStorage<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./SimpleStorage.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">AddFiveStorage</span> <span class="token keyword">is</span> SimpleStorage <span class="token punctuation">&#123;</span>    <span class="token comment">// 需要override关键字 原函数需要加上virtual函数</span>   <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> favoriteNumber<span class="token punctuation">)</span> <span class="token keyword">public</span> override <span class="token punctuation">&#123;</span><span class="token comment">// 存储</span>        myFavoriteNumber <span class="token operator">=</span> favoriteNumber <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>is 表示继承</li><li>override 关键字表示重写</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB3 Day3-Solidity基础[part2]</title>
      <link href="/2025/06/26/WEB3%20Day3%20%E2%80%94%E2%80%94%20Solidity%E5%9F%BA%E7%A1%80%5Bpart2%5D/"/>
      <url>/2025/06/26/WEB3%20Day3%20%E2%80%94%E2%80%94%20Solidity%E5%9F%BA%E7%A1%80%5Bpart2%5D/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/06/calldata.png</cover>
      <date>Thu Jun 26 2025 16:16:49 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>WEB3 Day3 — Solidity基础[part2]</h1><h2 id="存储位置">存储位置</h2><p>solidity里面有六种存储位置。</p><ol><li>Calldata</li><li>Memory</li><li>Storage</li><li>Stack</li><li>Code</li><li>Logs</li></ol><p>calldata和memory是函数执行期间变量的临时存储位置，calldata只读，用于不可修改的函数输入。</p><p>相比之下，memory允许读写访问，使变量能在函数内部被修改。</p><p>要修改calldata变量，必须先讲它们加载到memory中。</p><h3 id="Calldata">Calldata</h3><p>只读的， 比storage更经济，主要用于输入。</p><p>下面函数中_name 用calldata关键字，就会收到错误提示，因为不可修改。</p><p><img src="https://img.soniachen.com/blog/posts/2025/06/calldata.png" alt="img"></p><h3 id="Memory">Memory</h3><p>可读可修改，大多数的变量默认自动使用memory，但是字符串不能默认，需要明确指定memory或者calldata</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token builtin">string</span> <span class="token keyword">memory</span> variableName <span class="token operator">=</span> <span class="token string">"someValue"</span><span class="token punctuation">;</span></code></pre><p>下面会讲到为什么会这么特殊</p><h3 id="storage">storage</h3><p>存储在storage的变量在区块链上是持久化的，其值在函数调用和交易之间保持不变。</p><p>比如下面这个变量 favoriteNumber ，声明在函数外部，会被隐式转换为存储变量。</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">MyContract</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> favoriteNumber<span class="token punctuation">;</span> <span class="token comment">// this is a storage variable</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><blockquote><p>⚠️ 同理，在函数内部也不能使用storage，因为函数中的变量都是临时存在。</p></blockquote><h2 id="字符串和基本类型的特殊存储">字符串和基本类型的特殊存储</h2><p>在Solidity中，string是字节数据，arrays of bytes，在上文中提过需要指定确切的存储位置；</p><p>另一方面，uint256基本类型有内置机制，用于规定它们的存储、访问和操作方式及位置。</p><p>所以，在函数给uint256指定关键字就会报错</p><p><img src="https://img.soniachen.com/blog/posts/2025/06/memory-err.png" alt="img"></p><h2 id="mapping类型">mapping类型</h2><p>遍历过于消耗资源，所以我们使用mapping结构</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">mapping</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">=></span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">public</span> nameToFavoriteNumber<span class="token punctuation">;</span></code></pre><h3 id="🧑‍💻-Test-yourself">🧑‍💻 Test yourself</h3><ol><li>📕 How does the Solidity compiler handle primitive types and strings in terms of memory management?</li><li>📕 Why can’t the storage keyword be used for variables inside a function?</li><li>🧑‍💻 Write a smart contract that uses storage, memory and calldata keywords for its variables.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twikoo评论系统的Cloudflare部署方案</title>
      <link href="/2025/06/17/Twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E7%9A%84Cloudflare%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/"/>
      <url>/2025/06/17/Twikoo%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E7%9A%84Cloudflare%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/06/image-20250617191350846.png</cover>
      <date>Tue Jun 17 2025 18:39:18 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>Twikoo评论系统的Cloudflare部署方案</h1><p>Twikoo是一款简洁、安全且免费的静态网站评论系统，在提升网站互动性方面表现出色。通常，Twikoo可部署在诸如腾讯云开发环境、Vercel等平台，但借助Cloudflare进行部署，能极大改善冷启动延迟问题，实现快速加载，为用户带来更流畅的评论体验，同时利用Cloudflare强大的全球网络提升访问速度。以下为详细的Cloudflare部署Twikoo评论系统的步骤与要点。</p><h2 id="一、前期准备">一、前期准备</h2><p>在开始部署前，需提前准备好相关工具与资源：</p><ol><li><strong>Cloudflare账户</strong>：若尚未注册，前往<a href="https://www.cloudflare.com/">Cloudflare官网</a>完成注册流程。</li><li><strong>Node.js环境</strong>：确保本地开发环境安装了Node.js，可通过<a href="https://nodejs.org/">Node.js官网</a>下载并安装对应系统的最新版本，安装完成后，在命令行输入<code>node -v</code>验证是否安装成功及查看版本号。</li><li><strong>文本编辑器</strong>：推荐使用Visual Studio Code、Sublime Text等，方便进行代码编辑与配置文件修改。</li></ol><h2 id="二、安装依赖包">二、安装依赖包</h2><ol><li>首先，创建一个新的项目目录，用于存放Twikoo相关代码与配置文件，在命令行中进入该目录，执行以下命令安装项目依赖：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre><ol start="2"><li>由于Cloudflare Workers的免费套餐对捆绑包大小有严格的1MiB限制，部分与Cloudflare Workers的Node.js兼容性存在问题的包即便安装了也无法使用，为控制捆绑包大小，需手动删除这些包，在命令行中依次执行：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">""</span> <span class="token operator">></span> node_modules/jsdom/lib/api.js<span class="token builtin class-name">echo</span> <span class="token string">""</span> <span class="token operator">></span> node_modules/tencentcloud-sdk-nodejs/tencentcloud/index.js<span class="token builtin class-name">echo</span> <span class="token string">""</span> <span class="token operator">></span> node_modules/nodemailer/lib/nodemailer.js</code></pre><p>上述命令会清空<code>jsdom</code>、<code>tencentcloud-sdk-nodejs</code>、<code>nodemailer</code>这三个包中特定文件的内容，使其不占用捆绑包空间，同时规避兼容性问题。</p><h2 id="三、登录Cloudflare账户">三、登录Cloudflare账户</h2><p>通过Wrangler工具登录Cloudflare账户，Wrangler是Cloudflare提供的用于管理Workers、D1数据库等资源的命令行工具，执行以下命令进行登录：</p><pre class="language-bash" data-language="bash"><code class="language-bash">npx wrangler login</code></pre><p>运行该命令后，系统会自动打开浏览器，跳转到Cloudflare的授权页面，按照提示完成授权操作，授权成功后，Wrangler便与你的Cloudflare账户建立连接，后续可通过它对Cloudflare资源进行操作。</p><h2 id="四、创建Cloudflare-D1数据库并设置架构">四、创建Cloudflare D1数据库并设置架构</h2><ol><li>使用Wrangler创建名为<code>twikoo</code>的D1数据库，在命令行执行：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">npx wrangler d1 create twikoo</code></pre><p>执行此命令后，终端会输出数据库的相关信息，其中<code>database_name</code>和<code>database_id</code>这两行信息至关重要，需将其复制下来，用于后续配置。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>  <span class="token string">"d1_databases"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"binding"</span><span class="token builtin class-name">:</span> <span class="token string">"DB"</span>,      <span class="token string">"database_name"</span><span class="token builtin class-name">:</span> <span class="token string">"twikoo"</span>,      <span class="token string">"database_id"</span><span class="token builtin class-name">:</span> <span class="token string">"56def18d-b46a-42c8-bc99-0214e58f9a54"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>打开项目目录下的<code>wrangler.toml</code>文件（若不存在，可手动创建），将刚刚复制的<code>database_name</code>和<code>database_id</code>粘贴进去，替换原有的对应值，使项目与创建的D1数据库建立关联。</li><li>为D1数据库设置架构，Twikoo项目中包含定义数据库表结构和初始数据的<code>schema.sql</code>文件，执行以下命令，将该架构应用到Cloudflare D1数据库：</li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">npx wrangler d1 execute twikoo <span class="token parameter variable">--remote</span> <span class="token parameter variable">--file</span><span class="token operator">=</span>./schema.sql</code></pre><p>此命令会远程连接到之前创建的<code>twikoo</code>数据库，并依据<code>schema.sql</code>文件的内容创建相应的表结构及可能的初始数据，确保数据库满足Twikoo评论系统的存储需求。</p><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617190614918.png" alt="image-20250617190614918" style="zoom:33%;" /><h2 id="五、创建Cloudflare-R2存储">五、创建Cloudflare R2存储</h2><p>Cloudflare R2可用于存储Twikoo评论系统相关的文件，如上传的图片等（尽管当前部署方案中对R2的使用存在一定限制，但创建步骤仍需完成），通过以下命令创建名为<code>twikoo</code>的R2存储桶：</p><pre class="language-bash" data-language="bash"><code class="language-bash">npx wrangler r2 bucket create twikoo</code></pre><p>创建完成后，找到<code>wrangler.toml</code>文件中<code>r2_public_url</code>字段，将其值更新为新创建的R2存储桶的域名，确保项目能正确访问R2存储资源。</p><p>[vars]<br>R2_PUBLIC_URL = “<a href="https://twikoo.soniachen.com">https://twikoo.soniachen.com</a>”</p><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617191350846.png" alt="image-20250617191350846" style="zoom:33%;" /><h2 id="六、部署Cloudflare-Worker">六、部署Cloudflare Worker</h2><p>完成上述配置后，即可将Twikoo评论系统部署到Cloudflare Workers，执行以下命令进行部署：</p><pre class="language-bash" data-language="bash"><code class="language-bash">npx wrangler deploy <span class="token parameter variable">--minify</span></code></pre><p><code>--minify</code>参数用于对代码进行压缩，以进一步减小捆绑包大小，提升部署效率与性能。部署过程可能需要一些时间，完成后，命令行中会输出类似<code>https://twikoo-cloudflare.&lt;your username&gt;.workers.dev</code>的访问地址。若部署成功，在浏览器中访问该地址，应能看到类似于<code>&#123;&quot;code&quot;: 100, &quot;message&quot;: &quot;twikoo云函数运行正常，请参考https://twikoo.js.org/frontend.html完成前端的配置&quot;, &quot;version&quot;: &quot;1.6.33&quot;&#125;</code>的提示信息，这表明Twikoo的后端服务已在Cloudflare上成功部署。</p><h2 id="七、前端配置">七、前端配置</h2><ol><li>在博客或网站的前端代码中，找到需要添加评论功能的页面。若使用Twikoo官方提供的前端初始化代码，需将其中的<code>envId</code>字段值设置为第六步中得到的Cloudflare Worker访问地址（包含<code>https://</code>前缀）。例如：</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript">twikoo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">envId</span><span class="token operator">:</span> <span class="token string">"https://twikoo-cloudflare.&lt;your username>.workers.dev"</span><span class="token punctuation">,</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#tcomment"</span><span class="token punctuation">,</span>    <span class="token comment">// region: 'ap-guangzhou', // 环境地域，默认为ap-shanghai，如果您的环境地域不是上海，需传此参数</span>    <span class="token comment">// path: 'window.location.pathname', // 用于区分不同文章的自定义js路径，如果您的文章路径不是location.pathname，需传此参数</span>    <span class="token comment">// lang: 'zh-CN', // 用于手动设定评论区语言，支持的语言列表https://github.com/imaegoo/twikoo/blob/dev/src/js/utils/i18n/index.js</span>    <span class="token comment">// onCommentLoaded: function () &#123;</span>    <span class="token comment">//     console.log("评论加载或评论成功");</span>    <span class="token comment">// &#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>确保前端页面包含用于显示评论区的HTML元素，其<code>id</code>需与上述代码中<code>el</code>字段指定的值一致（如<code>&lt;div id=&quot;tcomment&quot;&gt;&lt;/div&gt;</code>），这样Twikoo前端脚本才能正确渲染评论区。</li></ol><img src="https://img.soniachen.com/blog/posts/2025/07/image-20250617192932097.png" alt="image-20250617192932097" style="zoom:50%;" /><h2 id="八、配置邮件通知（可选）">八、配置邮件通知（可选）</h2><p>Twikoo支持在有新评论时发送邮件通知管理员，由于<code>nodemailer</code>包的兼容性问题，在Cloudflare Workers环境中，无法直接通过SMTP集成发送邮件，而是通过SendGrid的HTTPS API实现邮件通知功能，具体步骤如下：</p><ol><li>注册一个可用的SendGrid账户（SendGrid提供免费套餐，每天可发送多达100封邮件）或Mailchannels账户（每月免费3000封邮件），并在账户设置中创建一个API Key，用于后续验证身份。</li><li>在Twikoo的配置中设置相关邮件参数，找到配置文件中与邮件通知相关的部分，设置以下字段：</li></ol><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">sender_email</span><span class="token operator">:</span> <span class="token string">"发件人邮箱地址"</span><span class="token punctuation">,</span> <span class="token comment">// 需在SendGrid中进行验证</span><span class="token literal-property property">sender_name</span><span class="token operator">:</span> <span class="token string">"显示的发件人名称"</span><span class="token punctuation">,</span><span class="token literal-property property">smtp_service</span><span class="token operator">:</span> <span class="token string">"sendgrid"</span><span class="token punctuation">,</span><span class="token literal-property property">smtp_user</span><span class="token operator">:</span> <span class="token string">"提供任意非空值"</span><span class="token punctuation">,</span><span class="token literal-property property">smtp_pass</span><span class="token operator">:</span> <span class="token string">"之前创建的SendGrid API Key"</span><span class="token punctuation">,</span></code></pre><p>此外，还可根据需求设置其他配置值，以自定义通知邮件的外观和内容。完成设置后，在配置页面点击“发送测试邮件”按钮，检查邮件通知功能是否正常工作，同时需确保邮件提供商不会将收到的通知邮件归类为垃圾邮件。</p><h2 id="九、常见问题及解决方法">九、常见问题及解决方法</h2><ol><li><strong>捆绑包大小超限</strong>：若在部署时遇到捆绑包大小超过Cloudflare Workers免费套餐1MiB限制的问题，除了前文提到的删除特定包文件内容外，还可检查项目中是否引入了不必要的大型依赖，精简代码，减少不必要的资源加载。</li><li><strong>数据库连接问题</strong>：若出现无法连接到Cloudflare D1数据库的情况，首先确认<code>wrangler.toml</code>文件中<code>database_name</code>和<code>database_id</code>是否填写正确，其次检查网络连接是否正常，确保能访问Cloudflare的服务。</li><li><strong>前端评论区无法显示</strong>：前端评论区无法正常显示时，检查浏览器控制台是否有报错信息，可能是<code>envId</code>配置错误、前端脚本加载失败或HTML元素<code>id</code>不匹配等原因导致，根据具体错误提示进行排查修复。</li></ol><p>通过以上详细的Cloudflare部署方案，可将Twikoo评论系统高效地集成到网站中，利用Cloudflare的优质服务提升评论系统的性能与稳定性，为网站访客打造良好的互动交流环境。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CloudFlare </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB3 Day2—BlockChain Basic 2 + Solidity基础[part1]</title>
      <link href="/2025/06/17/WEB3%20Day2%20%E2%80%94%E2%80%94%20BlockChain%20Basic%202+Solidity%E5%9F%BA%E7%A1%80%5Bpart1%5D/"/>
      <url>/2025/06/17/WEB3%20Day2%20%E2%80%94%E2%80%94%20BlockChain%20Basic%202+Solidity%E5%9F%BA%E7%A1%80%5Bpart1%5D/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/06/image-20250617173555637.png</cover>
      <date>Tue Jun 17 2025 17:39:18 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>WEB3 Day2—BlockChain Basic 2 + Solidity基础[part1]</h1><h2 id="Layer1">Layer1</h2><p>​blockChain的base layer，例如bitcoin、BNB chain、Solana,and Avalanche.</p><h2 id="Layer2">Layer2</h2><p>构建在L1区块链外部但是也与之连接的任何应用application。有各种类型，比如for example ChainLink(去中心化预言机网络) ，以及像The Graph(事件索引网络)。</p><p>好的，我将为你优化这段区块链技术描述，提升专业性和清晰度：</p><h3 id="Rollup-技术：以太坊Layer2扩容的核心方案"><strong>Rollup 技术：以太坊Layer2扩容的核心方案</strong></h3><p>Rollup是Layer2（L2）扩容的主流解决方案，其核心原理是将多笔链下交易打包为一个<strong>聚合交易</strong>，仅将交易摘要（而非完整数据）提交至以太坊主链（Layer1），大幅提升交易吞吐量并降低Gas费用。根据验证机制不同，Rollup可分为两类：</p><h4 id="1-Optimistic-Rollups（乐观汇总）"><strong>1. Optimistic Rollups（乐观汇总）</strong></h4><ul><li><strong>工作机制</strong>：默认所有链下交易均为有效，运营商（Operator）定期向主链提交状态根（State Root）和交易哈希。若其他参与者发现欺诈交易，可在<strong>挑战期</strong>（通常7天）内提交<strong>欺诈证明</strong>（Fraud Proof）进行质疑。</li><li><strong>安全性</strong>：依赖经济惩罚机制（押金锁定）和链上验证合约，若运营商被证明欺诈，将损失押金并回滚状态。</li><li><strong>代表项目</strong>：Arbitrum、Optimism、Base。</li></ul><h4 id="2-Zero-Knowledge-Rollups（零知识汇总）"><strong>2. Zero-Knowledge Rollups（零知识汇总）</strong></h4><ul><li><strong>工作机制</strong>：通过<strong>零知识证明</strong>（ZK Proof）技术生成<strong>有效性证明</strong>（Validity Proof），证明交易批次的合法性。验证者只需检查证明，无需重放所有交易。</li><li><strong>核心优势</strong>：<ul><li><strong>即时确定性</strong>：无需挑战期，交易确认后不可逆转。</li><li><strong>更高安全性</strong>：数学证明保证状态正确性，无需依赖信任假设。</li><li><strong>更低Gas成本</strong>：数据压缩率可达1000:1，验证成本显著低于Optimistic方案。</li></ul></li><li><strong>代表项目</strong>：zkSync、StarkNet、Polygon zkEVM。</li></ul><h4 id="3-见证（Witness）与零知识证明"><strong>3. 见证（Witness）与零知识证明</strong></h4><ul><li><strong>见证（Witness）</strong>：是证明者（Prover）生成的一组中间值，用于证明输入数据满足特定数学关系（如哈希函数、椭圆曲线方程）。在ZK Rollups中，Witness包含交易数据、状态转换逻辑等信息，但不泄露具体内容。</li><li><strong>验证流程</strong>：<ol><li>证明者收集交易并生成状态转换。</li><li>基于Witness生成零知识证明（如SNARK或STARK）。</li><li>验证者（Verifier）通过智能合约检查证明，确认输出状态与预期一致。</li></ol></li><li><strong>技术特性</strong>：<ul><li><strong>简洁性</strong>：证明大小通常仅几十KB，验证时间极短（毫秒级）。</li><li><strong>非交互性</strong>：单个证明可独立验证，无需与证明者交互。</li></ul></li></ul><h3 id="对比与应用场景"><strong>对比与应用场景</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>Optimistic Rollups</strong></th><th><strong>ZK Rollups</strong></th></tr></thead><tbody><tr><td><strong>验证机制</strong></td><td>欺诈证明（默认有效，需挑战）</td><td>有效性证明（数学证明）</td></tr><tr><td><strong>最终确认时间</strong></td><td>7天挑战期后</td><td>几秒至几分钟（证明生成后）</td></tr><tr><td><strong>兼容性</strong></td><td>完全兼容EVM（支持所有Solidity合约）</td><td>部分兼容（需适配ZK-EVM）</td></tr><tr><td><strong>适用场景</strong></td><td>DeFi协议、复杂智能合约</td><td>NFT铸造、高频交易、隐私保护</td></tr></tbody></table><p>Rollup技术通过<strong>链下计算+链上验证</strong>的模式，将以太坊的理论TPS从15提升至2000+，Gas成本降低90%以上。Optimistic方案侧重兼容性，ZK方案侧重安全性与效率，两者共同推动区块链应用进入规模化阶段。随着ZK-EVM（如zkSync 2.0）的成熟，未来大多数应用可能转向零知识Rollup架构。</p><h3 id="RollUp-stage-Rollup-发展阶段">RollUp stage (Rollup 发展阶段)</h3><h4 id="Stage-0">Stage 0</h4><p>在这个初始的阶段，RollUp的治理主要由<strong>运营方和安全委员会</strong>掌控，确保关键决策并且有可信的团体去专门监督（中心化的），此阶段的用户拥有退出机制，可以在七天内离开rollup，但是通常需要实体和运营方的操作进行结合。</p><h4 id="Stage-1">Stage 1</h4><p>中心化的治理演化为智能合约管理，当然安全委员会<strong>同时</strong>发挥作用。</p><p><strong>证明系统</strong>完全开始运作，支持<strong>去中心化</strong>的有效证明。</p><p><strong>退出机制</strong>也得到改进，用户可独立退出而无需运营方协调。</p><h4 id="Stage-2">Stage 2</h4><p>通过<strong>完全</strong>由智能合约管理的治理机制实现<strong>完全去中心化</strong>。</p><p><strong>无需</strong>运营方和安全委员会干预。</p><p>证明系统是无许可的，退出机制也完全去中心化。</p><h4 id="ZKSync-Risk-Analysis-风险分析">ZKSync Risk Analysis[风险分析]</h4><p><a href="https://l2beat.com/scaling/summary">https://l2beat.com/scaling/summary</a>  L2Beat摘要中可以查看各Rollup所处的stage</p><p>Risks那一列的饼图可以体现当前阶段的一些风险，例如ZkSync Era专属页面中：</p><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617173334249.png" alt="image-20250617173334249" style="zoom:33%;" /><ul><li><p><strong>Data Availability</strong>: refers to the ability to reconstruct the L2 state from L1 data, ensuring that anyone can verify and rebuild the L2 state if necessary.</p><p>能够从L1的数据中重建L2状态</p></li><li><p><strong>State Validation</strong>: involves verifying the legitimacy of a set of bundled transactions. For ZK Sync, this is done using zero-knowledge proofs through an algorithm known as PLONK (Permutations over Lagrange-bases for Oecumenical Noninteractive arguments of Knowledge).</p><p>涉及验证一组打包交易的合法性。</p></li><li><p><strong>Sequencer Failure</strong>: describes the ability to process transactions even if the sequencer is down. In ZK Sync, transactions can still be submitted to L1, though not necessarily enforced immediately.</p><p>排序器故障，描述了即使排序器宕机还能够处理交易的能力，这里黄色区块表示，在ZKsync中，交易仍然可以提交到L1，但不一定能够强制执行。</p><blockquote><p>排序器：是负责对打包的用户交易进行排序的操作方（运营商）</p><p>The sequencer is the operator responsible for <em>ordering</em> user transactions and often <em>batching</em> them before committing them to Layer 1.</p></blockquote></li><li><p><strong>Proposer Failure</strong>: describes the ability to process transactions even if the proposer is down. In this case, ZK Sync will halt all withdrawals and transactions executions.</p><p>提议者宕机但是可以处理交易的能力。在Zksync中回暂停所有的提款和交易执行。</p></li><li><p><strong>Exit Window</strong>: In the current ZK Sync stage, there is no window for exit during unwanted upgrades.</p><p>红色区块表示Zksync在非预期的升级时不存在退出窗口期。</p></li></ul><h2 id="First-Transaction-On-ZKSync">First Transaction On ZKSync</h2><p>chainList 官网搜索ZKsync sepolia</p><p><a href="https://chainlist.org/?search=zksync+sepolia&amp;testnets=true">https://chainlist.org/?search=zksync+sepolia&amp;testnets=true</a></p><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617173444316.png" alt="image-20250617173444316" style="zoom:50%;" /><p>进行connect</p><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617173504740.png" alt="image-20250617173504740" style="zoom: 25%;" /><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617173525324.png" alt="image-20250617173525324" style="zoom:25%;" /><p>在<a href="https://explorer.zksync.io/">zkSync官网的block explorer</a> 中，可搜索到自己的账户，查看交易详情</p><h3 id="如何获取测试网络的基金？">如何获取测试网络的基金？</h3><blockquote><p>📒 NOTE</p><p>Network Fauncets</p></blockquote><p>这里可以通过brige桥接源链和目标链来进行，也有两种方式，一种是lock和unlock 另一种是烧毁和铸造；</p><p>可能会有安全问题，但是基于ZkSync使用过程的经验来说，是比较安全的。</p><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617173555637.png" alt="image-20250617173555637" style="zoom:50%;" /><p>了解原理之后，我们在<a href="https://cloud.google.com/application/web3/faucet/ethereum/sepolia">推荐的fauncet</a>里获取我们的fund</p><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617173615481.png" alt="image-20250617173615481" style="zoom: 33%;" /><p>这里我recive失败了，重新找了其他funsets ，可以用回tenderly试试看</p><h2 id="Solidity-基础-part1">Solidity 基础[part1]</h2><h3 id="Remix-IDE">Remix IDE</h3><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617173639681.png" alt="image-20250617173639681" style="zoom: 33%;" /><h3 id="函数">函数</h3><p>无返回体函数示例：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token number">0.8</span><span class="token number">.19</span><span class="token punctuation">;</span> <span class="token comment">// chose our solidity version </span><span class="token keyword">contract</span> <span class="token class-name">SimpleStorage</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span> myFavoriteNumber<span class="token punctuation">;</span> <span class="token comment">// 初始值就是0 而且是internal 也就是内部不可见的</span>    <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> favoriteNumber<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        myFavoriteNumber <span class="token operator">=</span> favoriteNumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>有返回体示例：</p><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">recive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> myFavoriteNumber<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="数组">数组</h3><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// 数组</span><span class="token builtin">uint256</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> myFavoriteNumbers<span class="token punctuation">;</span>Person <span class="token keyword">public</span> newPerson <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Person <span class="token keyword">public</span> myPerson<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> name<span class="token punctuation">,</span> <span class="token builtin">uint256</span> person_number<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>    myPersonArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Person</span><span class="token punctuation">(</span>person_number<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="结构">结构</h3><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// 结构</span>    <span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint256</span> personNumber<span class="token punctuation">;</span>        <span class="token builtin">string</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="数组加结构">数组加结构</h3><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// 数组加结构</span> Person<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> myPersonArray<span class="token punctuation">;</span></code></pre><h3 id="可见性">可见性</h3><p>函数和变量有四种可见性修饰符：</p><ul><li><code>public</code>：可从合约内部和外部合约访问</li><li><code>private</code>：仅限当前合约内部访问。不会隐藏值，仅限制其访问权限。</li><li><code>external</code>：仅适用于外部的合约访问。⚠️</li><li><code>internal</code>： 当前合约和派生的合约可以访问。</li></ul><p>如果没有指定，默认是internal</p><h3 id="view-、pure">view 、pure</h3><p>函数操作权限修饰符</p><h4 id="1-view-关键字">1. <code>view</code> 关键字</h4><ul><li><p><strong>功能</strong>：使用<code>view</code>关键字修饰的函数，承诺不会对区块链的状态进行修改。</p></li><li><p>可执行操作</p><ul><li>能够读取区块链上的数据（也就是状态变量）。</li><li>可以访问 msg.sender、block.number 等全局变量。</li><li>支持调用其他同样被标记为<code>view</code>或者<code>pure</code>的函数。</li></ul></li><li><p><strong>不可执行操作</strong>：禁止对状态变量进行写入操作。</p></li><li><p><strong>示例</strong>：</p></li></ul><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">ViewExample</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint</span> <span class="token keyword">public</span> balance<span class="token punctuation">;</span>    <span class="token comment">// 此函数仅读取状态变量，不会对其进行修改</span>    <span class="token keyword">function</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-pure-关键字">2. <code>pure</code> 关键字</h4><ul><li><p><strong>功能</strong>：被<code>pure</code>关键字修饰的函数，既不会读取也不会修改区块链的状态。</p></li><li><p>可执行操作</p><ul><li>可以使用函数内部定义的局部变量。</li><li>能够操作传入函数的参数。</li><li>支持进行数学运算。</li><li>可以调用其他<code>pure</code>函数。</li></ul></li><li><p>不可执行操作</p><ul><li>禁止访问状态变量。</li><li>不允许调用非<code>view</code>或<code>pure</code>的函数。</li></ul></li><li><p><strong>示例</strong>：</p></li></ul><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">contract</span> <span class="token class-name">PureExample</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 该函数不依赖任何状态变量，仅对输入参数进行计算</span>    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token builtin">uint</span> a<span class="token punctuation">,</span> <span class="token builtin">uint</span> b<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-关键区别">3. 关键区别</h4><table><thead><tr><th><strong>特性</strong></th><th><strong>view 函数</strong></th><th><strong>pure 函数</strong></th></tr></thead><tbody><tr><td>能否读取状态变量</td><td>可以</td><td>不可以</td></tr><tr><td>能否修改状态变量</td><td>不可以</td><td>不可以</td></tr><tr><td>是否消耗 Gas（外部调用时）</td><td>不消耗</td><td>不消耗</td></tr><tr><td>是否消耗 Gas（内部调用时）</td><td>消耗</td><td>消耗</td></tr></tbody></table><blockquote><p>⚠️ 一般调用这两个关键字都不会消耗gas费， 但是如果是内部调用，例如下面这个例子, store里面调用recive就会导致gas费产生。</p></blockquote><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> favoriteNumber<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span><span class="token comment">// 存储</span>       myFavoriteNumber <span class="token operator">=</span> favoriteNumber<span class="token punctuation">;</span>       <span class="token function">recive</span><span class="token punctuation">(</span>favoriteNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">recive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> myFavoriteNumber<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><h3 id="完整代码：">完整代码：</h3><pre class="language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: MIT</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token number">0.8</span><span class="token number">.19</span><span class="token punctuation">;</span> <span class="token comment">// stating our version </span><span class="token keyword">contract</span> <span class="token class-name">SimpleStorage</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span> myFavoriteNumber<span class="token punctuation">;</span> <span class="token comment">// 初始值就是0 而且是internal 也就是内部不可见的</span>    <span class="token comment">// 数组</span>    <span class="token builtin">uint256</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> myFavoriteNumbers<span class="token punctuation">;</span>    <span class="token comment">// 结构</span>    <span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>        <span class="token builtin">uint256</span> personNumber<span class="token punctuation">;</span>        <span class="token builtin">string</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Person <span class="token keyword">public</span> newPerson <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token keyword">public</span> myPerson<span class="token punctuation">;</span>    Person<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> myPersonArray<span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> name<span class="token punctuation">,</span> <span class="token builtin">uint256</span> person_number<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span>        myPerson <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span>person_number<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        myPersonArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>myPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> favoriteNumber<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">&#123;</span><span class="token comment">// 存储</span>        myFavoriteNumber <span class="token operator">=</span> favoriteNumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// view 可读不可写 pure 不可读不可写</span>    <span class="token keyword">function</span> <span class="token function">recive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> myFavoriteNumber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlockChain </tag>
            
            <tag> Solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1:用Git+CloudFlare+PicGo+Typora+Hexo搭建个人博客全流程</title>
      <link href="/2025/06/17/%E4%BB%8E0%E5%88%B01-%E7%94%A8Git-CloudFlare-PicGo-Typora-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/2025/06/17/%E4%BB%8E0%E5%88%B01-%E7%94%A8Git-CloudFlare-PicGo-Typora-Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=239184c2-f007-0f3f-5387-012902b7483c</cover>
      <date>Tue Jun 17 2025 16:16:23 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>从 0 到 1：用 Git、CloudFlare、PicGo、Typora、Hexo 搭建个人博客全流程</h1><h2 id="一、前言">一、前言</h2><p>22年，我用 Hexo + Next 主题搭起第一个个人博客。三年后，随着图床需求升级、对博客风格有了新想法，我决定重构 —— 替换图床工具、更换主题，用 Git、CloudFlare、PicGo、Typora 配合 Hexo 重新搭建。这篇文章复盘从旧版迭代到全新上线的全过程，既是对自己折腾经历的记录，也希望给想优化博客的朋友一份实操参考。</p><h2 id="二、环境准备与工具选型">二、环境准备与工具选型</h2><h3 id="（一）核心工具简介">（一）核心工具简介</h3><ol><li><strong>Git</strong>：分布式版本控制系统，负责博客代码的版本管理与远程仓库同步，让博客部署、内容更新更高效。</li><li><strong>CloudFlare</strong>：提供 CDN 加速、DNS 解析、安全防护等功能，让博客访问更快、更稳定，还能隐藏真实服务器 IP 。</li><li><strong>PicGo</strong>：图床上传工具，写博客时本地图片能一键上传到图床，解决文章中图片存储与引用问题。</li><li><strong>Typora</strong>：简洁高效的 Markdown 编辑器，实时预览、语法简洁，专注内容创作。</li><li><strong>Hexo</strong>：静态博客生成框架，基于 Node.js，支持 Markdown 写作，能快速生成美观博客站点，部署灵活。</li></ol><h3 id="（二）环境安装">（二）环境安装</h3><ol><li><strong>Git 安装</strong>：<br>官网（<a href="https://git-scm.com/">https://git-scm.com/</a> ）下载对应系统版本，安装后通过 <code>git --version</code> 验证，看到版本号即成功。<br>配置用户信息：<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"你的邮箱"</span></code></pre></li><li><strong>Node.js 与 Hexo 安装</strong>（Hexo 依赖 Node.js ）：<br>Node.js 官网（<a href="https://nodejs.org/">https://nodejs.org/</a> ）下载 LTS 版本，安装后用 <code>node -v</code>、<code>npm -v</code> 验证。<br>全局安装 Hexo：<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli</code></pre>验证 Hexo 安装：<code>hexo -v</code> 显示版本信息则成功。</li><li><strong>Typora 安装</strong>：官网（<a href="https://typora.io/">https://typora.io/</a> ）下载对应系统版本，按提示安装即可，简洁直观。</li><li><strong>PicGo 安装</strong>：官网（<a href="https://picgo.github.io/PicGo-Doc/">https://picgo.github.io/PicGo-Doc/</a> ）或应用商店下载，支持多平台，安装后配置图床（如 GitHub 图床、七牛云等，我用 GitHub 图床时需配置仓库、Token 等 ）。</li></ol><h2 id="三、Hexo-初始化与博客基础搭建">三、Hexo 初始化与博客基础搭建</h2><h3 id="（一）初始化-Hexo-项目">（一）初始化 Hexo 项目</h3><ol><li>创建博客目录（如 <code>my-blog</code> ），进入目录：<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> my-blog <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> my-blog</code></pre></li><li>初始化 Hexo：<pre class="language-bash" data-language="bash"><code class="language-bash">hexo init<span class="token function">npm</span> <span class="token function">install</span></code></pre>执行后，目录会生成 Hexo 基础文件结构，包含 <code>_config.yml</code>（配置文件 ）、<code>source</code>（存放文章、资源 ）、<code>themes</code>（主题目录 ）等。</li></ol><h3 id="（二）主题选择与配置">（二）主题选择与配置</h3><ol><li><strong>主题下载</strong>：Hexo 官网（<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> ）选心仪主题，比如我用的 <code>anzhiyu</code> 主题，克隆到 <code>themes</code> 目录：<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/Anzhiyu/hexo-theme-anzhiyu.git themes/anzhiyu</code></pre></li><li><strong>主题配置</strong>：复制主题目录下的 <code>_config.yml</code> 到博客根目录，重命名为 <code>_config.anzhiyu.yml</code> ，修改基础配置（如站点标题、描述、头像、导航菜单等 ），让博客符合需求。</li></ol><h3 id="（三）本地预览博客">（三）本地预览博客</h3><p>执行以下命令，启动本地服务器：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s</code></pre><ul><li><code>hexo clean</code>：清理之前生成的静态文件。</li><li><code>hexo g</code>（<code>hexo generate</code> ）：生成静态博客文件到 <code>public</code> 目录。</li><li><code>hexo s</code>（<code>hexo server</code> ）：启动本地服务器，浏览器访问 <code>http://localhost:4000</code> ，就能看到初始博客页面。</li></ul><h2 id="四、内容创作与管理（Typora-PicGo-S3插件-CloudFlareR2存储桶-）">四、内容创作与管理（Typora + PicGo [S3插件] + CloudFlareR2存储桶 ）</h2><h3 id="一、Cloudflare-R2-存储桶创建与基础配置">一、Cloudflare R2 存储桶创建与基础配置</h3><h4 id="（一）登录-Cloudflare-控制台">（一）登录 Cloudflare 控制台</h4><ol><li>访问 <a href="https://dash.cloudflare.com">Cloudflare Dashboard</a> 并登录账户（若无账户需先注册）。</li><li>点击左侧菜单中的 <strong>R2</strong> 选项（若未显示，点击“更多产品”查找）。</li></ol><h4 id="（二）创建存储桶">（二）创建存储桶</h4><ol><li><p>点击 <strong>创建存储桶</strong> 按钮，进入创建流程：</p><ul><li><strong>存储桶名称</strong>：自定义（如 <code>blog-images</code>），需全局唯一（建议包含个人标识）。</li><li><strong>区域</strong>：选择 <code>自动</code>（Auto）以获得最佳分布，或手动指定区域（如 <code>亚洲 - 新加坡</code>）。</li><li><strong>访问控制</strong>：勾选 <strong>公开访问</strong>（Public access），允许匿名读取图片（若仅个人使用可跳过）。</li><li><strong>加密</strong>：默认启用服务器端加密（SSE），无需修改。</li></ul></li><li><p>点击 <strong>创建存储桶</strong>，等待约 10 秒完成创建。</p></li></ol><h4 id="（三）获取-API-访问凭证">（三）获取 API 访问凭证</h4><ol><li><p>进入 <strong>存储桶详情页</strong> → <strong>权限</strong> 标签页：</p><ul><li>点击 <strong>创建访问密钥</strong> 按钮（若提示需要创建密钥对，点击“创建”）。</li><li>记录生成的 <strong>Access Key ID</strong> 和 <strong>Secret Access Key</strong>（仅显示一次，需立即保存到安全位置）。</li></ul></li><li><p>复制存储桶端点（Endpoint）：</p><ul><li>存储桶详情页 → <strong>概述</strong> 标签页，找到 <strong>外部访问</strong> 中的端点地址（格式为 <code>https://&lt;账户ID&gt;.r2.cloudflarestorage.com</code>）。</li></ul></li></ol><h3 id="二、PicGo-配置-S3-插件对接-R2">二、PicGo 配置 S3 插件对接 R2</h3><h4 id="（一）安装-S3-插件">（一）安装 S3 插件</h4><ol><li>打开 PicGo 软件 → <strong>插件管理</strong> → 搜索 <code>s3</code> 并安装 <strong>PicGo-S3-Plugin</strong>（若已安装可跳过）。</li></ol><h4 id="（二）配置插件参数">（二）配置插件参数</h4><ol><li><p>进入 PicGo <strong>图床设置</strong> → 选择 <strong>S3</strong> 插件：</p><ul><li><strong>Bucket</strong>：填写创建的存储桶名称（如 <code>blog-images</code>）。</li><li><strong>Region</strong>：填 <code>auto</code>（R2 不区分传统区域）。</li><li><strong>Access Key ID</strong>：粘贴 Cloudflare 生成的 Access Key。</li><li><strong>Secret Access Key</strong>：粘贴对应的 Secret Key。</li><li><strong>Endpoint</strong>：粘贴存储桶端点（如 <code>https://abc123.r2.cloudflarestorage.com</code>）。</li><li><strong>Path</strong>：自定义图片存储路径前缀（如 <code>blog/</code>，可留空）。</li><li><strong>Custom Domain</strong>：填写自定义域名（如 <code>img.soniachen.com</code>，后续配置）。</li><li><strong>SSL</strong>：勾选（启用 HTTPS 访问）。</li></ul></li><li><p>点击 <strong>设为默认图床</strong>，并点击 <strong>确定</strong> 保存配置。</p></li></ol><h4 id="（三）测试上传">（三）测试上传</h4><ol><li>在 PicGo 主界面点击 <strong>上传图片</strong>，选择本地图片：<ul><li>若上传成功，下方会显示图片 URL（如 <code>https://img.soniachen.com/blog/test.jpg</code>）。</li></ul></li></ol><h3 id="三、绑定自定义域名（CDN-加速）">三、绑定自定义域名（CDN 加速）</h3><h4 id="（一）添加域名到-Cloudflare">（一）添加域名到 Cloudflare</h4><ol><li>登录 Cloudflare 控制台 → <strong>域名</strong> → <strong>添加域名</strong>：<ul><li>输入自定义域名（如 <code>img.soniachen.com</code>），点击 <strong>继续</strong>。</li><li>等待 Cloudflare 扫描 DNS 记录（约 1 - 5 分钟）。</li></ul></li></ol><h4 id="（二）配置-DNS-解析">（二）配置 DNS 解析</h4><ol><li>在域名管理界面 → <strong>DNS</strong> 标签页：<ul><li>添加一条 <strong>CNAME</strong> 记录：<ul><li><strong>名称</strong>：填 <code>@</code> 或 <code>img</code>（根据域名结构）。</li><li><strong>目标</strong>：填存储桶端点（如 <code>abc123.r2.cloudflarestorage.com</code>）。</li><li><strong>代理状态</strong>：选择 <strong>DNS Only</strong>（仅解析，不启用 CDN）或 <strong>Proxied</strong>（启用 CDN 加速）。</li></ul></li></ul></li></ol><h4 id="（三）配置-R2-自定义域名">（三）配置 R2 自定义域名</h4><ol><li>回到 R2 存储桶 → <strong>域名</strong> 标签页：<ul><li>点击 <strong>添加自定义域名</strong>，输入已添加到 Cloudflare 的域名（如 <code>img.soniachen.com</code>）。</li><li>Cloudflare 会自动生成 SSL 证书（等待约 10 分钟生效）。</li></ul></li></ol><h3 id="四、Hexo-集成-R2-图床（可选）">四、Hexo 集成 R2 图床（可选）</h3><h4 id="（一）安装-Hexo-插件">（一）安装 Hexo 插件</h4><ol><li>在 Hexo 项目根目录执行：<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-s3-image <span class="token parameter variable">--save</span></code></pre></li></ol><h4 id="（二）配置插件">（二）配置插件</h4><ol><li>修改 <code>_config.yml</code> 添加以下配置：<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">s3_image</span><span class="token punctuation">:</span>  <span class="token key atrule">bucket</span><span class="token punctuation">:</span> blog<span class="token punctuation">-</span>images          <span class="token comment"># 存储桶名称</span>  <span class="token key atrule">region</span><span class="token punctuation">:</span> auto                 <span class="token comment"># 区域</span>  <span class="token key atrule">accessKeyId</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>access<span class="token punctuation">-</span>key <span class="token comment"># 替换为实际 Access Key</span>  <span class="token key atrule">secretAccessKey</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>secret<span class="token punctuation">-</span>key <span class="token comment"># 替换为实际 Secret Key</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//abc123.r2.cloudflarestorage.com <span class="token comment"># 端点</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> blog/                  <span class="token comment"># 存储路径</span>  <span class="token key atrule">customUrl</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//img.soniachen.com <span class="token comment"># 自定义域名</span>  <span class="token key atrule">public</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>                 <span class="token comment"># 公开访问</span></code></pre></li></ol><h4 id="（三）使用方式">（三）使用方式</h4><ol><li>在 Markdown 中插入图片时，直接使用本地路径：<pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">示例图片</span>](<span class="token url">/img/test.jpg</span>)</span></code></pre></li><li>Hexo 生成时会自动上传图片到 R2，并替换为在线链接。</li></ol><h3 id="五、常见问题与解决方案">五、常见问题与解决方案</h3><h4 id="（一）403-Forbidden-错误">（一）403 Forbidden 错误</h4><ul><li><strong>原因</strong>：存储桶未启用公开访问或访问密钥错误。</li><li><strong>解决</strong>：<ol><li>存储桶 → <strong>权限</strong> → 确保 <strong>公开访问</strong> 已启用。</li><li>重新核对 Access Key 和 Secret Key 是否正确。</li></ol></li></ul><h4 id="（二）图片链接返回-404">（二）图片链接返回 404</h4><ul><li><strong>原因</strong>：域名解析错误或路径配置错误。</li><li><strong>解决</strong>：<ol><li>检查 DNS 解析是否生效（可通过 <code>ping img.soniachen.com</code> 验证）。</li><li>确认 PicGo 中 <code>Custom Domain</code> 与 Cloudflare 域名一致。</li></ol></li></ul><h4 id="（三）上传失败（网络错误）">（三）上传失败（网络错误）</h4><ul><li><strong>原因</strong>：Endpoint 填写错误或网络阻断。</li><li><strong>解决</strong>：<ol><li>存储桶详情页复制端点，确保无多余字符（如末尾空格）。</li><li>尝试更换网络环境（如关闭 VPN）。</li></ol></li></ul><h3 id="六、进阶优化：缓存与安全">六、进阶优化：缓存与安全</h3><h4 id="（一）设置缓存策略">（一）设置缓存策略</h4><ol><li>Cloudflare 域名 → <strong>规则</strong> → <strong>页面规则</strong>：<ul><li>添加规则 <code>https://img.soniachen.com/*</code>，设置 <strong>缓存级别</strong> 为 <strong>缓存所有</strong>，<strong>TTL</strong> 为 1 天（根据需求调整）。</li></ul></li></ol><h4 id="（二）启用防盗链">（二）启用防盗链</h4><ol><li>存储桶 → <strong>权限</strong> → <strong>添加 Origin Access</strong>：<ul><li>配置允许访问的域名（如 <code>soniachen.com</code>），拒绝其他域名盗用图片。</li></ul></li></ol><pre class="language-bash" data-language="bash"><code class="language-bash">/opt/homebrew/bin/node /opt/homebrew/bin/picgo upload</code></pre><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617162011339.png" alt="image-20250617162011339" style="zoom:50%;" /><h2 id="五、博客部署（Git-GitHub-Pages-CloudFlare-）">五、博客部署（Git + GitHub Pages + CloudFlare ）</h2><h3 id="（一）GitHub-仓库准备">（一）GitHub 仓库准备</h3><ol><li>GitHub 新建仓库，命名规则：若为用户/组织页，仓库名填 <code>你的GitHub用户名.github.io</code>（如 <code>soniachan33.github.io</code> ）；若为项目页，仓库名自定义（后续需配置路径 ）。</li><li>仓库创建后，复制仓库的 Git 地址（SSH 或 HTTPS 形式 ）。</li></ol><h3 id="（二）Hexo-部署配置">（二）Hexo 部署配置</h3><p>修改博客根目录 <code>_config.yml</code> 的 <code>deploy</code> 配置：</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>你的GitHub用户名/你的仓库名.git  <span class="token comment"># 替换为实际仓库地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main  <span class="token comment"># 部署分支，GitHub Pages 常用 main 或 gh-pages</span></code></pre><p>安装 <code>hexo-deployer-git</code> 插件：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span></code></pre><h3 id="（三）部署到-GitHub-Pages">（三）部署到 GitHub Pages</h3><p>执行部署命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d</code></pre><p>Hexo 会把生成的静态文件（<code>public</code> 目录内容 ）推送到 GitHub 仓库对应分支，稍等片刻，访问 <code>https://你的GitHub用户名.github.io</code>（或项目页地址 ），能看到线上博客。</p><h3 id="（四）CloudFlare-加速与配置">（四）CloudFlare 加速与配置</h3><ol><li><strong>添加站点</strong>：CloudFlare 官网（<a href="https://www.cloudflare.com/">https://www.cloudflare.com/</a> ）注册登录，添加站点（输入博客域名，若用 GitHub Pages 默认域名可跳过，若自定义域名需提前备案、解析 ）。</li><li><strong>DNS 解析设置</strong>：添加 DNS 记录，将域名解析到 GitHub Pages 对应的 IP（或直接解析到 <code>你的GitHub用户名.github.io</code>  ），让 CloudFlare 接管 DNS 解析。</li><li><strong>CDN 与安全配置</strong>：开启 CDN 加速，优化缓存、压缩等设置；启用安全防护（如 DDoS 防护、防火墙规则 ），提升博客访问速度与安全性。</li><li><strong>自定义域名（可选）</strong>：若用自定义域名（如 <code>soniachen.com</code>  ），在 GitHub Pages 仓库设置中填自定义域名，同时在 CloudFlare 配置域名解析、SSL 证书（推荐开启 Full 或 Strict 模式 ），确保 <code>HTTPS</code> 访问正常。</li></ol><h2 id="六、博客优化与维护">六、博客优化与维护</h2><h3 id="（一）SEO-优化">（一）SEO 优化</h3><ol><li><strong>站点地图（Sitemap ）</strong>：安装 <code>hexo-generator-sitemap</code> 插件，生成站点地图：<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap <span class="token parameter variable">--save</span></code></pre>修改 <code>_config.yml</code> 配置：<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml</code></pre>部署后，通过 <code>https://你的域名/sitemap.xml</code> 访问，提交给百度、必应、谷歌等搜索引擎，助力收录。</li><li><strong>Meta 标签与关键词</strong>：在主题配置或文章 Front-matter 中，设置标题、描述、关键词，让搜索引擎更好理解内容，提升搜索排名。</li></ol><h3 id="（二）持续更新与备份">（二）持续更新与备份</h3><ol><li><strong>内容更新</strong>：用 Typora 写新文章，存到 <code>source/_posts</code> 目录，执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code> 部署，持续输出优质内容。</li><li><strong>版本备份</strong>：借助 Git，定期提交代码到 GitHub 仓库，记录博客配置、文章修改历史，方便回退与协同。</li></ol><h2 id="七、遇到的问题与解决（结合之前的疑问）">七、遇到的问题与解决（结合之前的疑问）</h2><h3 id="（一）GitHub-Pages-部署后-404">（一）GitHub Pages 部署后 404</h3><ul><li><strong>原因</strong>：部署分支与 GitHub Pages 设置不一致、<code>root</code> 配置错误、<code>CNAME</code> 文件丢失等。</li><li><strong>解决</strong>：确保 <code>_config.yml</code> 中 <code>deploy</code> 分支正确，用户页 <code>root</code> 设为 <code>/</code> ；在 Hexo 项目 <code>source</code> 目录添加 <code>CNAME</code> 文件（填自定义域名 ），重新部署。</li></ul><h3 id="（二）CloudFlare-部署后域名配置清空">（二）CloudFlare 部署后域名配置清空</h3><ul><li><strong>原因</strong>：Hexo 部署覆盖 GitHub Pages 分支内容，<code>CNAME</code> 文件未同步。</li><li><strong>解决</strong>：在 Hexo 项目 <code>source</code> 目录添加 <code>CNAME</code> 文件，内容填自定义域名，部署时同步到 GitHub 仓库，CloudFlare 配置就会保留。</li></ul><h3 id="（三）必应收录验证问题">（三）必应收录验证问题</h3><ul><li><strong>方法</strong>：通过 XML 文件（下载 <code>BingSiteAuth.xml</code> 放 Hexo <code>source</code> 目录，部署后验证 ）、HTML Meta 标记（添加到博客首页 <code>&lt;head&gt;</code>  ）、DNS CNAME 记录（域名解析后台添加 ）完成验证，提交站点地图，让博客在必应搜索可见。</li></ul><h2 id="八、总结">八、总结</h2><p>从工具安装、Hexo 初始化，到内容创作、部署上线，再到用 CloudFlare 加速、优化 SEO ，整个流程虽有波折，但一步步搭建出专属博客，成就感满满。这五个工具相互配合，让博客从本地走向公网，成为展示自我的窗口。未来，继续用它们更新内容、优化体验，让博客持续生长～</p><p><strong>附录</strong>：关键命令与配置汇总，方便速查：</p><ul><li>Hexo 常用命令：<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>、<code>hexo d</code> 。</li><li>Git 配置与部署：<code>git config</code>、<code>hexo-deployer-git</code> 插件配置。</li><li>CloudFlare 核心操作：DNS 解析、CDN 加速、SSL 配置。</li><li>PicGo + Typora 图床写作：Typora 上传图片设置、PicGo 图床配置。</li></ul><p>希望这篇复盘能帮到想搭建博客的你，一起用技术记录生活、分享世界～</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> CloudFlare </tag>
            
            <tag> Typora </tag>
            
            <tag> hexo </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB3 Day1—BlockChain Basic 1</title>
      <link href="/2025/06/17/WEB3%20Day1%20%E2%80%94%E2%80%94%20BlockChain%20Basic%201/"/>
      <url>/2025/06/17/WEB3%20Day1%20%E2%80%94%E2%80%94%20BlockChain%20Basic%201/</url>
      <cover>https://img.soniachen.com/blog/posts/2025/06/image-20250617143925337-20250617172413705.png</cover>
      <date>Tue Jun 17 2025 14:26:18 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>WEB3 Day1—BlockChain Basic 1</h1><h2 id="转型方向">转型方向</h2><p>从 Java 开发转型至智能合约开发。</p><h2 id="学习资源">学习资源</h2><h3 id="学习视频">学习视频</h3><p>推荐 patrick collins 【Cyfrin】的<a href="https://www.youtube.com/watch?v=M576WGiDBdQ&amp;t=1231s">教学视频</a> 。</p><p>同时，<a href="https://updraft.cyfrin.io/courses/blockchain-basics/basics/l1s-l2s-and-rollups">Cyfrin Updraft 官网</a>提供了文字笔记和视频课程。不过，某些翻译插件的双语字幕不支持该网站，因此我选择在 YouTube 上观看完整视频，并且将两者结合起来学习。</p><h3 id="翻译插件推荐">翻译插件推荐</h3><p>这里推荐一款翻译插件——<a href="https://immersivetranslate.com/zh-Hans/">沉浸式翻译</a></p><h2 id="创建自己的钱包">创建自己的钱包</h2><h3 id="安装-MetaMask-插件">安装 MetaMask 插件</h3><p>首先，进入 <a href="https://metamask.io/">MetaMask 官网</a>，将其作为 Chrome 浏览器插件添加到浏览器中。</p><h3 id="创建钱包">创建钱包</h3><p>创建自己的钱包后，会得到三个关键信息：私钥（private key）、助记词（Mnemonic Key）和公钥地址（public Address）。其中，私钥和助记词极其重要，务必安全保存！因为拥有私钥就可以直接访问你的钱包账户，所以千万不能有侥幸心理。建议将助记词记录在纸上，而不是存储在电脑里，如果能记在大脑中（如使用记忆宫殿的方法）则是最安全的。三者的重要性排序为：【Mnemonic &gt; Private Key &gt; public Address】。</p><p>相关图示如下：<br><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617143925337-20250617172413705.png" alt="image-20250617143925337" style="zoom: 33%;" /><br><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617143938391-20250617172413858.png" alt="image-20250617143938391" style="zoom:25%;" /></p><h3 id="模拟交易">模拟交易</h3><h4 id="创建虚拟测试网络">创建虚拟测试网络</h4><p>登录 Tenderly 测试网站（<a href="https://tenderly.co/?mtm_campaign=partner&amp;mtm_kwd=cyfrin">https://tenderly.co/?mtm_campaign=partner&amp;mtm_kwd=cyfrin</a> ），通过该链接注册并创建账户是免费的。在网站左侧点击“virtual TestNets”，创建虚拟测试网络。<br><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617143945197-20250617172414056.png" alt="image-20250617143945197" style="zoom:33%;" /></p><h4 id="网络设置">网络设置</h4><p>进行简单设置，无特定要求。设置完成后，会创建一个模拟区块链，接下来可以将其添加到 MetaMask 中。<br><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617143952962-20250617172414269.png" alt="image-20250617143952962" style="zoom:50%;" /></p><h4 id="手动添加网络问题处理">手动添加网络问题处理</h4><p>在连接后，可能会遇到 MetaMask 中未显示创建的虚拟网络的问题，此时需要手动添加。注意，原系统默认的 chainId（11155111）无法修改，因此需要重新创建一个链，并在创建时在“custom”处修改自己的 ID。<br><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617144007052-20250617172414606.png" alt="image-20250617144007052" style="zoom: 33%;" /><br>有其他开发者也遇到了同样的问题，可参考：<a href="https://github.com/Cyfrin/foundry-full-course-cu/discussions/4066?sort=old">https://github.com/Cyfrin/foundry-full-course-cu/discussions/4066?sort=old</a></p><h4 id="注资操作">注资操作</h4><p>完成上述步骤后，进行注资。<br><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617144013149-20250617172414727.png" alt="image-20250617144013149" style="zoom:33%;" /></p><h4 id="查看注资结果">查看注资结果</h4><p>注资完成后，等待几分钟，就可以在自定义虚拟网络中看到资金到账啦，仿佛瞬间“暴富”（当然这只是模拟）。<br><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617144019117-20250617172414877.png" alt="image-20250617144019117" style="zoom:33%;" /></p><h4 id="账户间转账">账户间转账</h4><p>在模拟网络中，从一个账户向另一个账户转账非常简单，直接进行发送操作即可。<br><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617144024781-20250617172415010.png" alt="image-20250617144024781" style="zoom:33%;" /><br><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617144053479-20250617172415108.png" alt="image-20250617144053479" style="zoom:33%;" /></p><p>另外，Tenderly 与 Cypher 有合作，账户可以续期。<br><img src="https://img.soniachen.com/blog/posts/2025/06/image-20250617144034552-20250617172415354.png" alt="image-20250617144034552" style="zoom:33%;" /></p><h2 id="区块链数据结构">区块链数据结构</h2><p>可以通过 BlockChain Demo 网站（<a href="https://andersbrownworth.com/blockchain/block">https://andersbrownworth.com/blockchain/block</a> ）来帮助理解区块链的底层数据结构。</p><h2 id="交易费用相关概念">交易费用相关概念</h2><h3 id="交易费用（Transaction-Fee）">交易费用（Transaction Fee）</h3><p>交易费用是支付给区块生产者处理交易的奖励金额，通常通过以太币或者 Gwei 支付。</p><h3 id="燃气价格（Gas-Price）">燃气价格（Gas Price）</h3><p>同样以以太币或者 Gwei 来定义，燃气价格是交易中指定的每单位燃气（Gas）的成本。价格越高，交易被打包进区块的机会就越大，它用于设定交易中每单位燃气的成本。</p><h3 id="燃气（Gas）">燃气（Gas）</h3><p>不要将燃气与燃气价格混淆。燃气指的是执行交易所需要的工作量，而燃气价格则是每单位工作量的成本。</p><p>交易费用的计算公式为：</p><pre class="language-latex" data-language="latex"><code class="language-latex">Transaction fee =  gasPrice * gasUsed</code></pre><p>简单来说，当大量用户进行交易时，特定区块的空间竞争会变得激烈，此时提高燃气价格可以在拥堵时限制交易，并优先处理部分交易。</p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BlockChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法高频题总结</title>
      <link href="/2022/02/23/%E7%AE%97%E6%B3%95%E9%AB%98%E9%A2%91%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2022/02/23/%E7%AE%97%E6%B3%95%E9%AB%98%E9%A2%91%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <cover>https://img.soniachen.com/IMG_5493.jpg?_r_=1ebd09f5-67b6-b417-adeb-ab216893e51e</cover>
      <date>Wed Feb 23 2022 10:24:18 GMT+0800</date>
      
        <content type="html"><![CDATA[<h1>高频题</h1><h2 id="三数之和">三数之和</h2><p><a href="##%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C##">两数之和</a>为基础</p><blockquote><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 1 先将数组排序</span>  <span class="token comment">// 2 从后往前遍历最后一个数 找对应的二元组：二元组 + arr[i] = 0</span>  <span class="token comment">// 2.1 保证不重复</span>  <span class="token comment">// 2.2 找出前面部分满足条件的二元组</span>  <span class="token comment">// 2.3 遍历将arr[i]添加在后面</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 1</span>      <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 2</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 三元组最后一个数，是arr[i]   之前....二元组 + arr[i]</span>          <span class="token comment">// 2.1</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 2.2</span>              <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> nexts <span class="token operator">=</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 2.3</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> cur <span class="token operator">:</span> nexts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  cur<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> ans<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// nums[0...end]这个范围上，有多少个不同二元组，相加==target，全返回</span>  <span class="token comment">// &#123;-1,5&#125;     K = 4</span>  <span class="token comment">// &#123;1, 3&#125;</span>  <span class="token comment">// 1 两个指针</span>  <span class="token comment">// 2 两数相加大于目标值就右缩;小于就左缩;等于就添加在结果集里面（先加左再加右）</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> end<span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">R</span><span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// nums[L] + nums[R] == target</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  cur<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  cur<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> ans<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h2 id="两数之和">两数之和</h2><blockquote><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p></blockquote><p>1 使用hashmap 结构 map.put(nums[i], i)</p><p>2 遍历一遍 如果查询到map里面有与解 就返回i和mapget的value</p><p>3 最后如果没有找到就返回new int[0]</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="搜索旋转排序数组（面试）">搜索旋转排序数组（面试）</h2><p><strong>使用二分查找</strong></p><blockquote><p>整数数组nums按升序排列，数组中的值互不相同。</p><p>arr，原本是有序数组，旋转过，而且左部分长度不知道.(以某一个下标为轴旋转 例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code> 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。)</p><p>题目需要在arr里面找到target</p></blockquote><p><strong>思路</strong>：</p><ol><li><code>L = M = R</code> 是最差的情况 不知道断点</li><li><code>L != M == R</code>/ <code>L == M != R</code>/ <code>L != M != R</code> 只要三个数不全部一样就可以进行<strong>二分</strong></li></ol><img src="算法高频题总结/image-20220508120620575.png" alt="image-20220508120620575" style="zoom: 33%;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">M</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// nums[M] != target</span><span class="token comment">// 1 左 中 右 相等 -- 》不能二分</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 左中一直相等 L ++</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">!=</span> <span class="token class-name">M</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1.1 左中直到重合都相等</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">M</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">// 回到循环开始重新来</span><span class="token punctuation">&#125;</span><span class="token comment">// 1.2 或者是 到不相等地方 继续2</span><span class="token punctuation">&#125;</span><span class="token comment">// 2 左中右不都相等 --> 代表可以二分</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 2.1 [L] != [M] ?= [R]</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 2.1.1 L &lt; M 左边一定有序</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 2.1.2 L > M 左边一定有断点 右边有序</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 2.2 [L] ?= [M] != [R]</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 2.2.1 M &lt; R</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 2.1.2 M > R</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="合并两个有序数组">合并两个有序数组</h2><blockquote><p>给你两个有序数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的<code>元素数目</code>。进行合并。</p><p>注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>m <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 相等的时候先拷贝长数组的  尽可能让空间早释放</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> nums2<span class="token punctuation">[</span>n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                nums1<span class="token punctuation">[</span><span class="token operator">--</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span><span class="token operator">--</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                nums1<span class="token punctuation">[</span><span class="token operator">--</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span><span class="token operator">--</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// m都被填完 就把nums2剩下的n填进nums1</span>            nums1<span class="token punctuation">[</span><span class="token operator">--</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span><span class="token operator">--</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="螺旋矩阵">螺旋矩阵</h2><blockquote><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p></blockquote><img src="算法高频题总结/image-20220508120715738.png" alt="image-20220508120715738" style="zoom:50%;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>matrix <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> order<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 易错点一：注意right和bottom别写反了。</span><span class="token keyword">int</span> right <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> bottom <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 上层：从左到右，行不变，列变。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>order<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 右层：从上到下，行变，列不变。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>order<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 易错点二：注意针对行列不相等时，下面两个循环要满足right > left &amp;&amp; bottom > top条件 ⚠️</span><span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">></span> left <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">></span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 下层：从右向左，行不变，列变。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>order<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 左层：从下到上，行变，列不变。</span><span class="token comment">// 易错点三：此处只需要 i>top, i不能=top</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> bottom <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> top<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>order<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>left<span class="token operator">++</span><span class="token punctuation">;</span>top<span class="token operator">++</span><span class="token punctuation">;</span>right<span class="token operator">--</span><span class="token punctuation">;</span>bottom<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> order<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="字符串相加">字符串相加</h2><blockquote><p>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和并同样以字符串形式返回。</p><p>你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addStrings2</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> add <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> add <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> add<span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>result <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>add <span class="token operator">=</span> result <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 计算完以后的答案需要翻转过来</span>ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="二分查找">二分查找</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// ⚠️ 没有相等</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">L</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="在排序数组中找到元素第一个和最后一个位置">在排序数组中找到元素第一个和最后一个位置</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 在排序数组中查找元素的第一个和最后一个位置 * @author chs * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fre_044_FindFirstAndLastPositionOfElementInSortedArray</span> <span class="token punctuation">&#123;</span><span class="token comment">// 借助二分 《找到数组中比它小的最右的数 (lessMostRight</span><span class="token comment">// 如果该位置右边!=target说明数组没有这个数</span><span class="token comment">// 如果是 那么左边界找到 右边界就是《找到比ta+1小的最右的数》 (lessMostRight</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token function">lessMostRight</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length <span class="token operator">||</span> nums<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token function">lessMostRight</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 利用二分 </span><span class="token comment">// 1 一个指针 M</span><span class="token comment">// 2 ans存放结果</span><span class="token comment">// 3 arr[M] 小于就去右边找 大于就去左边找</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lessMostRight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 2 </span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">M</span> <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> <span class="token class-name">M</span><span class="token punctuation">;</span><span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="字符串转化整数">字符串转化整数</h2><p>注意有很多特殊情况</p><blockquote><p>1.需要删除无用的前导空格</p><p>2.检查下一个字符为正还是负</p><p>3.只读一开始是数字的部分</p><img src="算法高频题总结/image-20220212174954825.png" alt="image-20220212174954825" style="zoom:50%;" /><img src="算法高频题总结/image-20220212174938284.png" alt="image-20220212174938284" style="zoom:50%;" /><p>4.超出范围的数字返回边界</p></blockquote><pre class="language-none"><code class="language-none">1. 主函数myAtoi():     1 除去空格和后面非数字的部分( 前后都要判空)【removeHeadZero()】     2 判断该部分是否是有效数字【isValid()】     3 转为负数形式（转回不会溢出，负数范围大些） posi(标志正负)     4 res是最负的情况 (用了负数就只用可以装下，如果用整数转，最小就没法装)2. removeHeadZero():     1 是否有符号     2 s标志第一个不是零的位置     3 e标志数字部分后面的非数字部分的开头     4 返回截取的带符号整数部分3. isVaild():    判断带符号整数部分是否有效     1 开头在remove部分没有判断，只要开头不是数字和符号都返回无效     2 只有符号也无效     3 夹杂着非数字字符也无效</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fre_072_StringToInteger</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1 除去空格和后面不是数字的部分</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ⚠️</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        s <span class="token operator">=</span> <span class="token function">removeHeadZero</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2 判断这部分是不是有效数字</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValid</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3 转为负数形式 为了防止溢出 posi(标志正负) ⚠️不要搞反了</span>        <span class="token keyword">boolean</span> posi <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">// 后面会有*10的操作 需要先判断会不会溢出</span>        <span class="token keyword">int</span> minq <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minp <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> <span class="token char">'0'</span> <span class="token operator">-</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 转为负数</span>            <span class="token comment">// 在乘十之前判断是否会溢出</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> minq <span class="token operator">||</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> minq <span class="token operator">&amp;&amp;</span> cur <span class="token operator">&lt;</span> minp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> posi <span class="token operator">?</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 4 res是最负情况（也就是本来是最大的+1）</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>posi <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> <span class="token comment">// 返回边界</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> posi <span class="token operator">?</span> <span class="token operator">-</span>res <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">removeHeadZero</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 1 是否有符号</span>        <span class="token keyword">boolean</span> r <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️ 不能用charat</span>        <span class="token comment">// 2 标志第一个不是零的位置</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> r <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> start<span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> start<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3 找到数字部分后面的非数组部分开头 倒着遍历</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token punctuation">(</span>r <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token char">'0'</span>  <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token char">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 4 返回截取的带符号的整数部分</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>r <span class="token operator">?</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> e <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断是否是有效的数字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1 如果开头不是数组</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'-'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'+'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token char">'0'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2 只有符号也无效</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3 夹杂着非数字字符 无效</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token char">'0'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="下一个排列">下一个排列</h2><blockquote><p>给你一个整数数组 nums ，找出 nums 的字典序中的下一个排列。</p><p>例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。<br>类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。<br>而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。</p><p>必须 原地 修改，只允许使用额外常数空间。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment">// 1 倒着找升序对 [ i , i+ 1]</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           i<span class="token operator">--</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">// 2 从end -> i+1 倒着找比i大的数</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               j<span class="token operator">--</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">// 3 将数组i+1以后的反转</span>       <span class="token comment">// 因为有两种情况：1） i&lt; 0 说明本身就是字典序最大，直接翻转 2）[i+1, end]是降序需要翻转</span>       <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> left <span class="token operator">=</span> i<span class="token punctuation">;</span>       <span class="token keyword">int</span> right <span class="token operator">=</span>  nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>           left<span class="token operator">++</span><span class="token punctuation">;</span>           right<span class="token operator">--</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>       nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h2 id="合并区间">合并区间</h2><blockquote><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。</p></blockquote><ol><li>s 和 e 记录上一个区间的边界</li><li>然后复用interval数组来存储，最后复制数组size部分</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 先按照区间的左边界来排序</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> s <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> e <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// </span><span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 然后复用interval数组来存储，最后复制数组size部分</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果当前左边界大于e 说明没有覆盖 </span>intervals<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">// 可以更新size部分的s和e 然后size++</span>intervals<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>s <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>e <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// s e 更新为当前的左右边界</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>e <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果当前左边界小于或者等于 说明两个区间可以覆盖 先将e更新为这两个区间的最大右区间</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>intervals<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">// 最后还有一次size处的更新</span>intervals<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="x的平方根">x的平方根</h2><p>==二分查找==</p><blockquote><p>给你一个非负整数 x ，计算并返回 x 的 算术平方根 。</p><p>由于返回类型是整数，结果只保留 整数部分 ，小数部分将被 舍去 。</p><p>注意：不允许使用任何内置指数函数和算符，例如 pow(x, 0.5) 或者 x ** 0.5 。</p></blockquote><pre class="language-none"><code class="language-none">1. 使用 二分 &lt;&#x3D;就更新ans和L 到右边就更新R2. 注意数据类型时long主要是为了两个整型相乘不会溢出</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// x一定非负，输入可以保证</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// x >= 3</span>        <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token class-name">R</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">// 因为两个整数相乘可能会溢出</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">M</span> <span class="token operator">*</span> <span class="token class-name">M</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> <span class="token class-name">M</span><span class="token punctuation">;</span>                <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><p>扩展：求出小数点后k位 其实思路与一样 只是换成double类型并且需要转换数格式</p><h2 id="缺失的正数">缺失的正数</h2><blockquote><p>给你一个未排序的整数数组，请你找出没有出现的最小的正整数 时间复杂度o(n)</p></blockquote><p>除了打标记以外，我们还可以使用置换的方法，将给定的数组「恢复」成下面的形式：</p><pre><code>如果数组中包含 x∈[1,N]x \in [1, N]x∈[1,N]，那么恢复后，数组的第 x−1x - 1x−1 个元素为 xxx。</code></pre><p>在恢复后，数组应当有 [1, 2, …, N] 的形式，但其中有若干个位置上的数是错误的，每一个错误的位置就代表了一个缺失的正数。以题目中的示例二 [3, 4, -1, 1] 为例，恢复后的数组应当为 [1, -1, 3, 4]，我们就可以知道缺失的数为 2。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstMissingPositive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// ⚠️交换的条件---nums[i]∈[1,N] 且 nums[i]和本来应该在的位置的值nums[nums[i]-1]不相等</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="用rand7-生成rand10">用rand7()生成rand10()</h2><blockquote><p>用一个不等概率返回0和1的函数, 怎么加工一个函数0和1等概率返回</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rand10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> ans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">do</span><span class="token punctuation">&#123;</span>           ans <span class="token operator">=</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>ans <span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> ans <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> ans<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">do</span><span class="token punctuation">&#123;</span>           ans <span class="token operator">=</span> <span class="token function">rand7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> ans <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 0000~1111 0~15</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h2 id="找到两个有序数组的中位数-⚠️-两个有序数组第k小">找到两个有序数组的中位数(⚠️)/两个有序数组第k小</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这里就主要处理 两个为空 一个为空 全不为空的三个情况</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length <span class="token operator">+</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> e <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> nums2<span class="token punctuation">[</span>size<span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                               <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums2<span class="token punctuation">[</span>size <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> nums1<span class="token punctuation">[</span>size<span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>size <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums1<span class="token punctuation">[</span>size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">findKthNum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> size <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">findKthNum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> size<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">findKthNum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> size<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2D</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//原型</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getUpMedian</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span> s1<span class="token punctuation">,</span><span class="token keyword">int</span> e1<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">,</span> <span class="token keyword">int</span> s2<span class="token punctuation">,</span> <span class="token keyword">int</span> e2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s1 <span class="token operator">&lt;</span> e1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//mid</span>            mid1 <span class="token operator">=</span> <span class="token punctuation">(</span>e1 <span class="token operator">+</span> s1<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            mid2 <span class="token operator">=</span> <span class="token punctuation">(</span>e2 <span class="token operator">+</span> s2<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>mid1<span class="token punctuation">]</span> <span class="token operator">==</span> arr2<span class="token punctuation">[</span>mid2<span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> arr1<span class="token punctuation">[</span>mid1<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//奇数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1 <span class="token operator">-</span> s1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>mid1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>mid2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>mid1<span class="token punctuation">]</span> <span class="token operator">>=</span> arr2<span class="token punctuation">[</span>mid2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr1<span class="token punctuation">[</span>mid1<span class="token punctuation">]</span><span class="token punctuation">;</span>                    s1 <span class="token operator">=</span> mid1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    e2 <span class="token operator">=</span> mid2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>mid2<span class="token punctuation">]</span> <span class="token operator">>=</span> arr1<span class="token punctuation">[</span>mid1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr2<span class="token punctuation">[</span>mid2<span class="token punctuation">]</span><span class="token punctuation">;</span>                    s2 <span class="token operator">=</span> mid2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    e1 <span class="token operator">=</span> mid1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//偶数</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>mid1<span class="token punctuation">]</span> <span class="token operator">></span> arr2<span class="token punctuation">[</span>mid2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    e1 <span class="token operator">=</span> mid1<span class="token punctuation">;</span>                    s2 <span class="token operator">=</span> mid2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    e2 <span class="token operator">=</span> mid2<span class="token punctuation">;</span>                    s1 <span class="token operator">=</span> mid1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最后跳出循环 都只剩一个数</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token punctuation">,</span> arr2<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理长度不同 返回Kth的情况</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findKthNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> longs <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length <span class="token operator">>=</span> arr2<span class="token punctuation">.</span>length <span class="token operator">?</span> arr1 <span class="token operator">:</span> arr2<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shorts <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length <span class="token operator">?</span> arr1 <span class="token operator">:</span> arr2<span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> longs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> shorts<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">//1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">getUpMedian</span><span class="token punctuation">(</span>longs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> shorts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">></span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>longs<span class="token punctuation">[</span>k <span class="token operator">-</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> shorts<span class="token punctuation">[</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> longs<span class="token punctuation">[</span>k <span class="token operator">-</span> s <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>shorts<span class="token punctuation">[</span>k <span class="token operator">-</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> longs<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> shorts<span class="token punctuation">[</span>k <span class="token operator">-</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token function">getUpMedian</span><span class="token punctuation">(</span>longs<span class="token punctuation">,</span> k <span class="token operator">-</span> s<span class="token punctuation">,</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> shorts<span class="token punctuation">,</span> k <span class="token operator">-</span> l<span class="token punctuation">,</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>longs<span class="token punctuation">[</span>k <span class="token operator">-</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> shorts<span class="token punctuation">[</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> longs<span class="token punctuation">[</span>k <span class="token operator">-</span> s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">getUpMedian</span><span class="token punctuation">(</span>longs<span class="token punctuation">,</span> k <span class="token operator">-</span> s<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>shorts<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="翻转字符串中的单词">翻转字符串中的单词</h2><blockquote><p>给你一个字符串 s ，逐个翻转字符串中的所有 单词 。</p><p>单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。</p><p>请你返回一个翻转 s 中单词顺序并用单个空格相连的字符串。</p><p>说明：</p><p>输入字符串 s 可以在前面、后面或者单词间包含多余的空格。<br>翻转后单词间应当仅用一个空格分隔。<br>翻转后的字符串中不应包含额外的空格。</p><p>示例 1：</p><p>输入：s = “the sky is blue”<br>输出：“blue is sky the”</p><p>示例 2：</p><p>输入：s = &quot;  hello world  &quot;<br>输出：“world hello”<br>解释：输入字符串可以在前面或者后面包含多余的空格，但是翻转后的字符不能包括。</p></blockquote><h3 id="思路">思路:</h3><ol><li><strong>去除多余的空白：</strong><br><strong>(1去掉字符串开头的空白字符</strong><br><strong>(2去掉字符串末尾的空白字符</strong><br><strong>(3将字符串间多余的空白字符去除</strong></li><li><strong>翻转字符串：</strong></li><li><strong>翻转每一个单词：</strong><br><strong>(1 遍历sb 使用start 和 end来抓单词</strong><br><strong>(2 翻转单词</strong><br><strong>(3 更新start，去找下一个单词</strong></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 1 去除多余的空白</span>    <span class="token comment">// 2 翻转字符串</span>    <span class="token comment">// 3 翻转每一个单词</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token function">trimSpaces</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3</span>        <span class="token function">reverseEachWord</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 1 去掉字符串开头的空白字符</span>    <span class="token comment">// 2 去掉字符串末尾的空白字符</span>    <span class="token comment">// 3 将字符串间多余的空白字符去除</span>    <span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">trimSpaces</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 1 </span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token operator">++</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token operator">--</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">++</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 翻转任意字符</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> tmp <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>left<span class="token operator">++</span><span class="token punctuation">,</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>right<span class="token operator">--</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseEachWord</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 1 遍历sb 使用start 和 end来抓单词</span>        <span class="token comment">// 2 翻转单词</span>        <span class="token comment">// 3 更新start，去找下一个单词</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">++</span>end<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 2</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3</span>            start <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">++</span>end<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="字符串相乘">字符串相乘</h2><blockquote><p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。</p><p>注意：不能使用任何内置的 BigInteger 库或直接将输入转换为整数。</p><p>示例 1:</p><p>输入: num1 = “2”, num2 = “3”<br>输出: “6”</p><p>示例 2:</p><p>输入: num1 = “123”, num2 = “456”<br>输出: “56088”</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">||</span> num2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ansArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> y <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>                ansArr<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ansArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ansArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>            ansArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> ansArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> m <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ansArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="删除数组中的重复项">删除数组中的重复项</h2><p>任何删除重复的都可以用快慢指针</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 删除有序数组中的重复项 * @author chs * 任何删除重复的都可以用快慢指针 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fre_017_RemoveDuplicatesFromSortedArray</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> done <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>done<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span><span class="token operator">++</span>done<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> done <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="去除重复字母">去除重复字母</h2><p>贪心➕单调栈？</p><blockquote><p>给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。</p><p>示例 1：</p><p>输入：s = “bcabc”<br>输出：“abc”</p><p>示例 2：</p><p>输入：s = “cbacdcbc”<br>输出：“acdb”</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           num<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                       vis<span class="token punctuation">[</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                       sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                       <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>               vis<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>               sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           num<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h2 id="单词搜索">单词搜索</h2><blockquote><p>给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。</p><img src="算法高频题总结/image-20220228230315689.png" alt="image-20220228230315689" style="zoom:33%;" /></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">rotateEdge</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> a<span class="token operator">++</span><span class="token punctuation">,</span> b<span class="token operator">++</span><span class="token punctuation">,</span> c<span class="token operator">--</span><span class="token punctuation">,</span> d<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rotateEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> d <span class="token operator">-</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> m<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>            m<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>c <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>            m<span class="token punctuation">[</span>c <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>d <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>            m<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>d <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">[</span>a <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>            m<span class="token punctuation">[</span>a <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="多数元素">多数元素</h2><blockquote><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p><strong>是一个超级水王问题</strong></p><pre class="language-none"><code class="language-none">1遍历 使用 candidate和HP 来一次删除两个不同的数2到最后 HP 不为0 则说明可能有水王 是当前的candidate3再遍历一次找candi 如果 HP&gt; n&#x2F;2 说明就是水王 </code></pre><img src="算法高频题总结/image-20220228231911847.png" alt="image-20220228231911847" style="zoom:50%;" /></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> candi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token constant">HP</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">HP</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                candi <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token constant">HP</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> candi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token constant">HP</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token constant">HP</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">HP</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token constant">HP</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> candi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token constant">HP</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">HP</span> <span class="token operator">></span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> candi<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1>1 链表</h1><h2 id="1-反转链表">1 反转链表</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">ListNode</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>          cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>          pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>          cur <span class="token operator">=</span> next<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token comment">// ！返回的是pre</span>  <span class="token punctuation">&#125;</span></code></pre><h3 id="反转链表二">反转链表二</h3><blockquote><p>就是反转链表中间一截</p></blockquote><p>// 第 1 步：从虚拟头节点走 left - 1 步，来到 left 节点的前一个节点</p><p>// 第 2 步：从 pre 再走 right - left + 1 步，来到 right 节点</p><p>// 第 3 步：切断出一个子链表（截取链表）先标记再切断</p><p>// 第 4 步：[同反转链表](##1 反转链表##)，反转链表的子区间</p><p>// 第 5 步：接回到原来的链表中</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1 需要一个虚拟头</span>        <span class="token class-name">ListNode</span> dummyNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dummyNode<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//2 先找到反转部分的left前面pre</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> dummyNode<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2 从pre再走right - left + 1步 来到right节点</span>        <span class="token class-name">ListNode</span> rNode <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            rNode <span class="token operator">=</span> rNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3 切断这部分的链表</span>        <span class="token class-name">ListNode</span> lNode <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> end <span class="token operator">=</span> rNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        rNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//4 反转区间内的链表</span>        <span class="token function">reverseLinkedList</span><span class="token punctuation">(</span>lNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5 接回去</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> rNode<span class="token punctuation">;</span><span class="token comment">// ⚠️接回去的时候已经是反过来了</span>        lNode<span class="token punctuation">.</span>next <span class="token operator">=</span> end<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverseLinkedList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ListNode</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="2-LRU缓存机制">2 LRU缓存机制</h2><blockquote><p>请你设计并实现一个满足  LRU (最近最少使用) 缓存 约束的数据结构。<br>实现 LRUCache 类：</p><p>LRUCache(int capacity) 以 正整数 作为容量 capacity 初始化 LRU 缓存<br>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。<br>void put(int key, int value) 如果关键字 key 已经存在，则变更其数据值 value ；如果不存在，则向缓存中插入该组 key-value 。如果插入操作导致关键字数量超过 capacity ，则应该 逐出 最久未使用的关键字。</p><p>函数 get 和 put 必0须以 O(1) 的平均时间复杂度运行。</p></blockquote><img src="算法高频题总结/image-20220508120449144.png" alt="image-20220508120449144" style="zoom:50%;" /><h4 id="1-总的缓存结构-和方法调用">1) 总的缓存结构 和方法调用</h4><h5 id="构造方法">构造方法</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">MyCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> cache<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Fre_278_LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="1-get">1 get()</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Integer</span> ans <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ans <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="2-put">2 put()</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2）MyCache">2）MyCache</h4><h5 id="构造方法-2"><strong>构造方法</strong></h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> keyNodeMap<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">NodeDoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> nodeList<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>keyNodeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeDoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>capacity <span class="token operator">=</span> cap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="1-V-get-K-key-通过key返回value-需要将node放到尾部">1 V get(K key) 通过key返回value 需要将node放到尾部</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> keyNodeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>nodeList<span class="token punctuation">.</span><span class="token function">moveNodeToTail</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="2-void-set-K-key-V-value-更新与新增：放到尾部，超出内存就删除最长时间没有操作的">2  void set(K key, V value) 更新与新增：放到尾部，超出内存就删除最长时间没有操作的</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> keyNodeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>nodeList<span class="token punctuation">.</span><span class="token function">moveNodeToTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>nodeList<span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">removeMostUnusedCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="3-void-removeMostUnusedCache-删去最长时间没有操作的缓存-；在两个结构里面都删除">3 void removeMostUnusedCache() 删去最长时间没有操作的缓存 ；在两个结构里面都删除</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeMostUnusedCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> removeNode <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">removeHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>keyNodeMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>removeNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-双向链表结构">3) 双向链表结构</h4><p><strong>基于LRU机制的双向链表结构</strong><br>private Node&lt;K, V&gt; head;<br>private Node&lt;K, V&gt; tail;</p><p><strong>构造方法</strong>：将头尾置为空</p><pre class="language-none"><code class="language-none">public NodeDoubleLinkedList()&#123;head &#x3D; null;tail &#x3D; null;&#125;</code></pre><h5 id="1-addNode-来新节点，挂到尾巴上">1 addNode() : 来新节点，挂到尾巴上</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> newNode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>newNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span>  <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>newNode<span class="token punctuation">.</span>last <span class="token operator">=</span> tail<span class="token punctuation">;</span>tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="2-moveToTail-（修改过的节点，要保证node在表中）更新到尾部">2 moveToTail() : （修改过的节点，要保证node在表中）更新到尾部</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveNodeToTail</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span></code></pre><h5 id="3-removeHead-将头节点移走，返回新的头节点">3 removeHead() : 将头节点移走，返回新的头节点</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NodeDoubleLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">removeHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>head <span class="token operator">=</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>res<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>head<span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="3-K个一组翻转链表">3 K个一组翻转链表</h2><p>1 先将第一组k凑齐 并且反转<br>2 再记录上一组的结尾节点<br>3 循环（当结尾.next != null)</p><p>(1)更新start   (2)更新end <strong>注意判空！！</strong></p><p>（3） 反转 ：end 变头</p><p>(4） 上一组结尾连接到现在的开头end (5)更新lastEnd</p><img src="算法高频题总结/image-20220107164908659.png" alt="image-20220107164908659" style="zoom:33%;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 1</span>       <span class="token class-name">ListNode</span> start <span class="token operator">=</span> head<span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> end <span class="token operator">=</span> <span class="token function">getKEnd</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> head<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       head <span class="token operator">=</span> end<span class="token punctuation">;</span>       <span class="token function">reverse</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 2</span>       <span class="token class-name">ListNode</span> lastEnd <span class="token operator">=</span> start<span class="token punctuation">;</span>       <span class="token comment">// 3</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>lastEnd<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token comment">// 1)</span>           start <span class="token operator">=</span> lastEnd<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token comment">// 2)</span>           end <span class="token operator">=</span> <span class="token function">getKEnd</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ⚠️(注意判空！！！)</span>               <span class="token keyword">return</span> head<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token comment">// 3)</span>           <span class="token function">reverse</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 4)</span>           lastEnd<span class="token punctuation">.</span>next <span class="token operator">=</span> end<span class="token punctuation">;</span>           <span class="token comment">// 5)</span>           lastEnd <span class="token operator">=</span> start<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> head<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">private</span> <span class="token class-name">ListNode</span> <span class="token function">getKEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>k <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           start <span class="token operator">=</span> start<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> start<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 反转 </span>   <span class="token comment">// 1 end 往后移</span>   <span class="token comment">// 2 三个指针进行反转</span>   <span class="token comment">// 3 start反转后是结尾要连接到end</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> start<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// TODO Auto-generated method stub</span>       end <span class="token operator">=</span> end<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//⚠️(注意要移动end指针)</span>       <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> start<span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>           pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>           cur <span class="token operator">=</span> next<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       start<span class="token punctuation">.</span>next <span class="token operator">=</span> end<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h2 id="4-合并两个有序链表">4 合并两个有序链表</h2><ol><li>先抓小头head</li><li>cur2抓大头 cur1 = head.next pre = head</li><li>比较 c1 c2 谁小pre的next就指向谁 并且cur pre 后移</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2 <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> l1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> l2 <span class="token operator">:</span> l1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//抓大头</span>        <span class="token class-name">ListNode</span> head <span class="token operator">=</span> l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val <span class="token operator">?</span> l1 <span class="token operator">:</span> l2<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur1 <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">//抓小头</span>        <span class="token class-name">ListNode</span> cur2 <span class="token operator">=</span> head <span class="token operator">==</span> l1 <span class="token operator">?</span> l2 <span class="token operator">:</span> l1<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> cur2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur1<span class="token punctuation">;</span>                cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur2<span class="token punctuation">;</span>                cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> cur1 <span class="token operator">:</span>cur2<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="合并k个链表">合并k个链表</h3><blockquote><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><img src="算法高频题总结/image-20220216171223838.png" alt="image-20220216171223838" style="zoom:50%; float:left;"/></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LianBiao_MergeMoreList</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//对数器 ⚠️</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ListNodeComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> arg0<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> arg1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// TODO Auto-generated method stub</span><span class="token keyword">return</span> arg0<span class="token punctuation">.</span>val <span class="token operator">-</span> arg1<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lists <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1 定义一个对数器的小根堆</span><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">></span></span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListNodeComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2 将每一条的head放在堆中</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// !!! </span>heap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// ⚠️</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 3 抓出head 将该条后面一个节点放入堆</span><span class="token class-name">ListNode</span> head <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// !!!</span>heap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ListNode</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">// 指针</span><span class="token comment">// 4 重复弹出连接结果表 再见弹出的下一个放入堆中</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ListNode</span> cur <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>pre <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// !!!</span>heap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="5-相交链表">5 相交链表</h2><p>需要分有环和无环两种情况 [如何辨别有无环](##6 环形链表##)</p><h3 id="无环链表相交">无环链表相交</h3><img src="算法高频题总结/image-20220206111837413.png" alt="image-20220206111837413" style="zoom:50%;" /><blockquote><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回 <code>null</code> 。</p></blockquote><ol><li>需要两个指针；</li><li>先用n记录两个链表长度大小以便分清楚谁长谁短，n长度差记得取绝对值；</li><li>长的走n步到和短的一样长的起点；</li><li>两个指针一起走到相等的地方 就是交点 返回；</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span> <span class="token function">getNoLoop</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>headA <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> headB <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">ListNode</span> cur1 <span class="token operator">=</span> headA<span class="token punctuation">;</span>  <span class="token class-name">ListNode</span> cur2 <span class="token operator">=</span> headB<span class="token punctuation">;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  n<span class="token operator">++</span><span class="token punctuation">;</span>  cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cur2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  n<span class="token operator">--</span><span class="token punctuation">;</span>  cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  cur1 <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> headA <span class="token operator">:</span> headB<span class="token punctuation">;</span><span class="token comment">//cur1指向长的头</span>  cur2 <span class="token operator">=</span> <span class="token punctuation">(</span>cur1 <span class="token operator">==</span> headA<span class="token punctuation">)</span> <span class="token operator">?</span> headB <span class="token operator">:</span> headA<span class="token punctuation">;</span><span class="token comment">//cur2指向短头</span>  <span class="token comment">//将两个链表长度差取绝对值</span>  n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将指向长链表的指针cur1往下移动n,到达和短链表cur2指针与相交点相同距离的位置</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  n<span class="token operator">--</span><span class="token punctuation">;</span>  cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//两个指针向下 相遇点便是相交点</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> cur1<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span></code></pre><h3 id="有环链表相交">有环链表相交</h3><p>有环的链表比较复杂 有三种情况</p><p>1 两个入环节点相同 即相交在入环前 (loop1 =loop2)</p><p>2 两个相交在环内相交 有两个相交点</p><p>3 两个不相交</p><img src="算法高频题总结/image-20220207095236631.png" alt="image-20220207095236631" style="zoom:50%;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span> <span class="token function">bothLoop</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> headA<span class="token punctuation">,</span><span class="token class-name">ListNode</span> loop1<span class="token punctuation">,</span><span class="token class-name">ListNode</span> headB<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> loop2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">ListNode</span> cur1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ListNode</span> cur2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>loop1 <span class="token operator">==</span> loop2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//2 </span><span class="token comment">//方法与两个无环链表方法一样只不过把loop1/2看作结尾</span>cur1 <span class="token operator">=</span> headA<span class="token punctuation">;</span>cur2 <span class="token operator">=</span> headB<span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> loop1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  n<span class="token operator">++</span><span class="token punctuation">;</span>  cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cur2 <span class="token operator">!=</span> loop2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  n<span class="token operator">--</span><span class="token punctuation">;</span>  cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  cur1 <span class="token operator">=</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> headA <span class="token operator">:</span> headB<span class="token punctuation">;</span>  cur2 <span class="token operator">=</span> <span class="token punctuation">(</span>cur1 <span class="token operator">==</span> headA<span class="token punctuation">)</span> <span class="token operator">?</span> headB <span class="token operator">:</span> headA<span class="token punctuation">;</span>  n <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  n<span class="token operator">--</span><span class="token punctuation">;</span>  cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> cur2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  cur1 <span class="token operator">=</span> cur1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  cur2 <span class="token operator">=</span> cur2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> cur1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//loop1往后移动 如果在遇到自己之前遇到了loop2就是情况3</span>cur1 <span class="token operator">=</span> loop1<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>cur1 <span class="token operator">!=</span> loop1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cur1 <span class="token operator">==</span> loop2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> loop1<span class="token punctuation">;</span><span class="token comment">//3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="6-环形链表">6 环形链表</h2><blockquote><p>返回入环节点，没有环就返回null；</p></blockquote><p>1.先将从头节点快慢指针开始往后，如果两个指针相遇那一定有环，期间如果快指针到null，可以直接判断无环。</p><p>2.如果要找到入环节点，就将fast指针指向head，slow不动，然后让两个指针都只移动一步，最后一定会在入环处相遇。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">==</span>  <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="7-重排链表">7 重排链表</h2><blockquote><p>给定一个单链表 L 的头节点 head ，单链表 L 表示为：</p><p>L0 → L1 → … → Ln - 1 → Ln</p><p>请将其重新排列后变为：</p><p>L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …</p><p>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p></blockquote><ol><li>找到原表的中点<ol><li>快慢指针从head开走</li><li>fast.next == null || fast.next.next = null 返回慢指针</li></ol></li><li>将右半端反转：[反转链表](##1 反转链表##)</li><li>将左右端合并</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reorderList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reorderList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ⚠️判空</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> mid <span class="token operator">=</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> l1 <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> l2 <span class="token operator">=</span> mid<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        mid<span class="token punctuation">.</span>next <span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️分离</span>        l2 <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeList</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">middleNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ListNode</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span> <span class="token comment">// ⚠️返回的是pre</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 合并过程就是使用两个指针来标志两个的下一个</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> l1_next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> l2_next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            l1_next <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l2_next <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l1<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1_next<span class="token punctuation">;</span>            l2<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2_next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="8-删除链表重复节点">8 删除链表重复节点</h2><p>设置虚拟节点</p><p>往后遍历  （条件：cur的下一个和下下个都是空）<br>2.1如果当前两个节点值相等就将当前cur.next的值保存在x;</p><p>​循环（第一个节点后面的节点是否有重复的）cur.next指向不等于该x值的节点<br>​    2.2 不相等就直接next</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 当前节点下一个和下下个不为空</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 两个节点相等</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                 <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 遍历第一个节点后面的节点是否有重复的 </span>                    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">// 有就直接讲指针指向下下个</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 两个节点不相等 指针后移</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="9-排序链表">9 排序链表</h2><blockquote><p>就是给链表排序</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span> <span class="token function">sortList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 遍历一遍链表的长度</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token operator">++</span><span class="token punctuation">;</span>cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2 len是每次分组节点数 一直乘二</span><span class="token class-name">ListNode</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token class-name">ListNode</span> teamFirst <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>teamFirst <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 3 F就是将五个参数处理返回方便利用</span><span class="token comment">// 左组从哪到哪   ls le</span><span class="token comment">// 右组从哪到哪   rs re</span><span class="token comment">// 左 右  next</span><span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f1 <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>teamFirst<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ls...le  rs...re -> merge去</span><span class="token comment">// 整体的头、整体的尾</span><span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f2 <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>f1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> teamFirst<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>h <span class="token operator">=</span> f2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>pre <span class="token operator">=</span> f2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> f2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>pre <span class="token operator">=</span> f2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>teamFirst <span class="token operator">=</span> f1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// next</span><span class="token punctuation">&#125;</span>teamFirst <span class="token operator">=</span> h<span class="token punctuation">;</span>pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> teamFirst<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 返回五个参数</span><span class="token class-name">ListNode</span> ls <span class="token operator">=</span> teamFirst<span class="token punctuation">;</span><span class="token class-name">ListNode</span> le <span class="token operator">=</span> teamFirst<span class="token punctuation">;</span><span class="token class-name">ListNode</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ListNode</span> re <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ListNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">int</span> pass <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>teamFirst <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pass<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pass <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>le <span class="token operator">=</span> teamFirst<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pass <span class="token operator">==</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>rs <span class="token operator">=</span> teamFirst<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pass <span class="token operator">></span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>re <span class="token operator">=</span> teamFirst<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pass <span class="token operator">==</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>teamFirst <span class="token operator">=</span> teamFirst<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 左边结尾断开</span>le<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 记录右边结尾的next并断开结尾断开 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>re <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>next <span class="token operator">=</span> re<span class="token punctuation">.</span>next<span class="token punctuation">;</span>re<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> ls<span class="token punctuation">,</span> le<span class="token punctuation">,</span> rs<span class="token punctuation">,</span> re<span class="token punctuation">,</span> next <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> ls<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> le<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> rs<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> re<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> ls<span class="token punctuation">,</span> le <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ListNode</span> head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ListNode</span> cur <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ListNode</span> tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>ls <span class="token operator">!=</span> le<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> rs <span class="token operator">!=</span> re<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ls<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> rs<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cur <span class="token operator">=</span> ls<span class="token punctuation">;</span>ls <span class="token operator">=</span> ls<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>cur <span class="token operator">=</span> rs<span class="token punctuation">;</span>rs <span class="token operator">=</span> rs<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>head <span class="token operator">=</span> cur<span class="token punctuation">;</span>pre <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>pre <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ls <span class="token operator">!=</span> le<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>ls <span class="token operator">!=</span> le<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> ls<span class="token punctuation">;</span>pre <span class="token operator">=</span> ls<span class="token punctuation">;</span>tail <span class="token operator">=</span> ls<span class="token punctuation">;</span>ls <span class="token operator">=</span> ls<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>rs <span class="token operator">!=</span> re<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> rs<span class="token punctuation">;</span>pre <span class="token operator">=</span> rs<span class="token punctuation">;</span>tail <span class="token operator">=</span> rs<span class="token punctuation">;</span>rs <span class="token operator">=</span> rs<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> head<span class="token punctuation">,</span> tail <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="10-两数相加">10 两数相加</h2><blockquote><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//两个链表分长短</span><span class="token comment">//分为三个阶段 ：1 长短都还有节点 2 短没有节点 长有节点 3 长也走到没节点</span><span class="token class-name">ListNode</span> l <span class="token operator">=</span> <span class="token function">listLength</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">listLength</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span> <span class="token operator">?</span> l1 <span class="token operator">:</span> l2<span class="token punctuation">;</span><span class="token class-name">ListNode</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> l1<span class="token punctuation">)</span> <span class="token operator">?</span> l2 <span class="token operator">:</span> l1<span class="token punctuation">;</span><span class="token class-name">ListNode</span> curl <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token class-name">ListNode</span> curs <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> curNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">ListNode</span> last <span class="token operator">=</span> curl<span class="token punctuation">;</span><span class="token comment">//1 </span><span class="token keyword">while</span><span class="token punctuation">(</span>curs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>curNum <span class="token operator">=</span> curs<span class="token punctuation">.</span>val <span class="token operator">+</span> curl<span class="token punctuation">.</span>val <span class="token operator">+</span> carry<span class="token punctuation">;</span>carry <span class="token operator">=</span> curNum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>curl<span class="token punctuation">.</span>val <span class="token operator">=</span> curNum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>last <span class="token operator">=</span> curl<span class="token punctuation">;</span><span class="token comment">//last一直在抓住最后一个节点</span>curl <span class="token operator">=</span> curl<span class="token punctuation">.</span>next<span class="token punctuation">;</span>curs <span class="token operator">=</span> curs<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//2 </span><span class="token keyword">while</span><span class="token punctuation">(</span>curl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>curNum <span class="token operator">=</span>  curl<span class="token punctuation">.</span>val <span class="token operator">+</span> carry<span class="token punctuation">;</span>carry <span class="token operator">=</span> curNum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>curl<span class="token punctuation">.</span>val <span class="token operator">=</span> curNum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>last <span class="token operator">=</span> curl<span class="token punctuation">;</span><span class="token comment">//last一直在抓住最后一个节点</span>curl <span class="token operator">=</span> curl<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//3 到</span><span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>last<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">listLength</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>length<span class="token operator">++</span><span class="token punctuation">;</span>l <span class="token operator">=</span> l<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="11-链表中倒数第k个节点">11 链表中倒数第k个节点</h2><blockquote><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p><p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code> 的节点。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fre_070_removeNthFromEnd</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">getKthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            k<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="12-删除链表倒数第k个节点">12 删除链表倒数第k个节点</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment">// 1 用两个指针截出n+1长度</span>       <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> dummy<span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>n<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token comment">// 2 两个指针一直往后直到fast到结尾</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>  <span class="token comment">// 3 slow在目标的前面一位 直接将next指针指向下下位 </span>       slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">// 使用虚拟节点以防删除的是头节点</span>   <span class="token punctuation">&#125;</span></code></pre><h2 id="13-回文链表">13 回文链表</h2><p>需要convert 和 然后判断对称 然后再convert恢复回去</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 1 现在slow就走到了中间（偶数是上中）</span>        <span class="token comment">// 2 将后半部分convert</span>        <span class="token class-name">ListNode</span> l1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//pre</span>        <span class="token class-name">ListNode</span> l2 <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> l3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            l3 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l2<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l3<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 3 后面部分已经翻转 现在对比两部分是否对称</span>        <span class="token keyword">boolean</span> ans <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        l2 <span class="token operator">=</span> head<span class="token punctuation">;</span>        l3 <span class="token operator">=</span> l1<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l3 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>val <span class="token operator">!=</span> l3<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// ⚠️比较val</span>                ans <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l3 <span class="token operator">=</span> l3<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 4 把后半部分又恢复原样</span>        l2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// pre</span>        l3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// next</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            l3 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            l1<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l3<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="14-删除排序链表中的重复元素">14 删除排序链表中的重复元素</h2><blockquote><p>给定一个已排序的链表的头 <code>head</code> ， <em>删除所有重复的元素，使每个元素只出现一次</em> 。返回 <em>已排序的链表</em> 。</p></blockquote><p>删除重复元素 留下一个<br>直接快慢指针</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">ListNode</span> ans <span class="token operator">=</span> head<span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> left <span class="token operator">=</span> head<span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> right <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span> right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">ListNode</span> next <span class="token operator">=</span> right<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">==</span> right<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               left<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>               right<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>               left <span class="token operator">=</span>  right<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           right <span class="token operator">=</span> next<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> ans<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h2 id="15-复制带有随机指针的链表">15 复制带有随机指针的链表</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 深度复制带有rand的链表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiaoBiao_copyListWithRandom</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Node</span> rand<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>value <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 最优解：人工构造关系 * 1 每一个节点后面加一个克隆节点 * 2 遍历关系 （同时复制rand * 3 遍历分离（同时复制next */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">copyListWithRandom</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 1</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> curCopy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 2</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    curCopy <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    curCopy<span class="token punctuation">.</span>rand <span class="token operator">=</span> cur<span class="token punctuation">.</span>rand <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> cur<span class="token punctuation">.</span>rand<span class="token punctuation">.</span>next <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token class-name">Node</span> res <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token comment">// 3</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    curCopy <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    curCopy<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 使用hashMap一一对应关系     * 1 遍历第一遍一一对应     * 2 遍历第二遍复制关系     * @param head     * @return     */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">copyListWithRandom2</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">// 1 </span><span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">.</span>rand <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>rand<span class="token punctuation">)</span><span class="token punctuation">;</span>cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1>2 动态规划</h1><p>具体步骤 可以参考[零钱兑换](###2 返回凑齐的所有方法数)</p><h2 id="基础问题-背包问题">基础问题 背包问题</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 传入货物的重量和价值 不能超过bag背包容量，返回最大价值 *  * @author chs * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DP2_knapsack</span> <span class="token punctuation">&#123;</span><span class="token comment">/** * 暴力递归 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> bag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> v <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> w<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> w<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 加上i</span><span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> v<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 没加</span><span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> v<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p1 <span class="token operator">+=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/** * 动态规划版 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> bag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> v <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> w<span class="token punctuation">.</span>length <span class="token operator">!=</span> v<span class="token punctuation">.</span>length <span class="token operator">||</span> w<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> w<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>bag <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> bag<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>bag<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="1-最大子数组和">1. 最大子数组和</h2><h3 id="用贪心">用贪心</h3><p>只需要一个pre反复更新记录以i为底的最大累加和，然后max存最大的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//用两个变量存</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubArray4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pre <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pre <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="如果需要返回该子数组">如果需要返回该子数组</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>l <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>r <span class="token operator">=</span> i<span class="token punctuation">;</span>res <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-买卖股票的最佳时机-maxProfit">2. 买卖股票的最佳时机 maxProfit</h2><h3 id="1-从头至尾买一次一股-返回最大利润">(1) 从头至尾买一次一股 返回最大利润:</h3><p>遍历一遍 min标记， max最大利润更新 就是找到最低点和最高点</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span> prices<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minprice <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxprofit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minprice<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                minprice <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minprice <span class="token operator">></span> maxprofit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                maxprofit <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minprice<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxprofit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-买一股但是可以买无限次">(2) 买一股但是可以买无限次</h3><p>遍历累加所有的爬坡</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 一股随便买</span><span class="token comment">// 相当于在每次爬坡前后买卖 将所有爬坡累加就行</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxProfit2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>prices <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> prices<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="3-最长回文子串">3. 最长回文子串</h2><h3 id="1-动态规划O-N-2">(1) 动态规划O(N^2)</h3><img src="算法高频题总结/image-20220114215749989.png" alt="image-20220114215749989" style="zoom: 33%;" /><img src="算法高频题总结/image-20220114215821577.png" alt="image-20220114215821577" style="zoom: 33%;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 自己改动态规划    * @param s    * @return    */</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestPalindrome33</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> s<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//边填dp 边抓最长和该最长开始节点</span>       <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">//按对角线遍历 </span>      <span class="token comment">// 最外循环不是dp的坐标</span>      <span class="token comment">// i代表了n - len 每个循环行是不变的 </span>      <span class="token comment">// j是横坐标L</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token class-name">L</span> <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token class-name">N</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       dp<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                       dp<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   max <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                   index <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h3 id="2-Manacher">(2) Manacher!</h3><p>面试讲一讲</p><p>假设字符串str长度为N，想返回最长回文子串的长度</p><p>时间复杂度O(N)</p><h4 id="Manacher算法核心">Manacher算法核心</h4><p>1）理解回文半径数组<br>2）理解所有中心的回文最右边界R，和取得R时的中心点C<br>3）理解 L…(i’)…C…(i)…R 的结构，以及根据i’回文长度进行的状况划分<br>4）每一种情况划分，都可以加速求解i回文半径的过程</p><p>最长回文子串就是我知道可以进行。</p><h3 id="最长回文子序列">最长回文子序列</h3><p>子序列就是三种情况 L+1 ~R 和 L ~ R-1 和 L +1 ~ R - 1</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//对角线遍历</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token class-name">L</span> <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token class-name">N</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>           dp<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             dp<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   </code></pre><h2 id="4-最长递增子序列">4. 最长递增子序列</h2><h3 id="DP版-O-n-2">DP版  O(n^2)</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>      dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> maxans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>          maxans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> maxans<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h3 id="二分查找-贪心-O-nlogn">二分查找+贪心  O(nlogn)</h3><p>维护一个end数组存储</p><ol><li><p>end[i] 代表  i+1 长度下子序列的最后下标</p></li><li><p>len = 递增子序列的长 度 - 1（end数组的下标 ）</p></li></ol><p>设当前已求出的最长上升子序列的长度为 len（初始时为1），从前往后遍历数组nums，在遍历到 nums[i] 时：</p><ul><li>如果 nums[i] &gt;[len] ，则[++len] = nums[i]；</li><li>否则，在end数组中[0 ~ len-1]二分查找，找到第一个比 nums[i] 小的数 end[k] ，并更新 end[k+1]=nums[i]。</li></ul><p><strong>代码</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// end[i]存储 第i+1长度下子序列的最后下标</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//!!!</span><span class="token comment">// end数组的下标 = 递增子序列的长度 - 1</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 二分查找的下标</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> end<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>end<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 在end里面二分查找 &lt; num[i] 的数</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//因为如果没有比他小的 说明都比他大 就更新的是end[0]</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">+</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pos <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//抓住当前小于numi的数的后面一位 后面会更新</span><span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>end<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="5-接雨水">5. 接雨水</h2><ul><li>左右两个指针 left right</li><li>左右两个变量存储左右最大的值</li><li>每次更新左右任意一边靠着lmax或者rmax的指针的雨水大小</li><li>相当于是把每一下标积的水累加。</li></ul><p>相当于是从左右两边来进行更新 哪边的max最大就比较那一边的L/R与max大小 累加并且更新最大值</p><p>最后返回累加和</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> leftMax <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> rightMax <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>z<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ！！！！ &lt;=</span><span class="token keyword">if</span><span class="token punctuation">(</span>leftMax <span class="token operator">&lt;=</span> rightMax<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> leftMax <span class="token operator">-</span> arr<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>leftMax <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>ans <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rightMax <span class="token operator">-</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rightMax <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rightMax<span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="6-最长上升子序列">6. 最长上升子序列</h2><p>设当前已求出的最长上升子序列的长度为 len（初始时为1），从前往后遍历数组nums，在遍历到 nums[i] 时：</p><ul><li>如果 nums[i] d[len] ，则直接加入到 ddd 数组末尾，并更新 len= len+1；</li><li>否则，在 d数组中二分查找，找到第一个比 nums[i] 小的数 d[k] ，并更新 d[k+1]=nums[i].</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 这道题要用 二分查找和贪心 * 暴力递归XXX不用了老子  * @param nums * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// end[i]存储 第i+1长度下子序列的最后下标</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// end数组的下标 = 递增子序列的长度 - 1</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 二分查找的下标</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//</span><span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> end<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>end<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 在end里面二分查找 &lt; num[i] 的数</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//因为如果没有比他小的 说明都比他大 就更新的是end[0]</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">+</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pos <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//抓住当前小于numi的数的后面一位 后面会更新</span><span class="token class-name">L</span> <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">R</span> <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>end<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="7-爬楼梯">7. 爬楼梯</h2><h3 id="递归-笔试">递归 笔试</h3><p><strong>状态转移方程</strong> f(n) = f(n - 1) + f(n - 2); ----&gt; 可以看出就是斐波拉契数列</p><p>用三个常量所以空间复杂度为O(1)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            p <span class="token operator">=</span> q<span class="token punctuation">;</span>             q <span class="token operator">=</span> r<span class="token punctuation">;</span>             r <span class="token operator">=</span> p <span class="token operator">+</span> q<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token operator">+</span><span class="token punctuation">&#125;</span></code></pre><h3 id="矩阵快速幂-o-logn">矩阵快速幂 o(logn)</h3><img src="算法高频题总结/image-20220124114518863.png" alt="image-20220124114518863" style="zoom: 33%;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code4_ClimbStairs</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// [ 1 ,1 ]</span><span class="token comment">// [ 1, 0 ]</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> base <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token function">matrixPower</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 如果是斐波拉契数列 就要从1 1 2 3 5 </span>    <span class="token comment">// 返回的就是res[0][0]+res[0][1]</span><span class="token punctuation">&#125;</span>  <span class="token comment">/*  快速幂 方法就是将指数循环 每次循环内矩阵平方 然后指数右移一位  */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">matrixPower</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// res初始化为单位1</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// m ---> 一次方</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ！！！先乘一次方 注意是不等于0 </span>res <span class="token operator">=</span> <span class="token function">muliMatrix</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>tmp <span class="token operator">=</span> <span class="token function">muliMatrix</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">muliMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>m2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> m1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> m2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// k = m1的列 = m2的行</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>主要就是注意快速幂里面要先进行 一次方的判断</p><h2 id="8-编辑距离-dp3">8. 编辑距离(dp3)</h2><h3 id="DP-样本对应模型：往往用最后的位置来判断可能性">DP 样本对应模型：往往用最后的位置来判断可能性</h3><p>给两个单词，返回第一个单词转换为第二个单词最少的操作数， 有增删改三种操作</p><p>（扩展：可以增加a d c分别代表增删改的代价）</p><p>根据最后一个位置有四种可能</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DP3_EditDistance</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>word1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> word2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str1 <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str2 <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> str1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>         <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> str2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 1 处理边界：其中有字符串是空的情况 全是增加操作</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">M</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2 普通情况 从最后位置比较word1该如何处理</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token class-name">M</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 2.1 最后一个位置修改或者保留</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ！！！ 注意</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 2.2 最后一个位置删除</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 2.3 最后一个位置增加 </span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>⚠️ 因为有为0的情况 所以总的就是[0, N] 所以循环范围需要是[0,N]  并且<strong>str下标</strong> 对应 <strong>dp下标</strong>减一</p><img src="算法高频题总结/image-20220124222730796.png" alt="image-20220124222730796" style="zoom:33%;" /><h2 id="9-最长公共子序列-dp3">9. 最长公共子序列(dp3)</h2><img src="算法高频题总结/image-20220125165947341.png" alt="image-20220125165947341" style="zoom:50%;" /><p>⚠️填边界的时候先将<code>dp[0][0]</code>填了 防止 i - 1 越界</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span><span class="token class-name">String</span> text1<span class="token punctuation">,</span> <span class="token class-name">String</span> text2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>text1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> text2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str1 <span class="token operator">=</span> text1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str2 <span class="token operator">=</span> text2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>str1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>str2<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 1 填完第一行和第一列</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> str1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// !!!</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2 按每行没列填</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> str2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 1 不看当前的情况 比较[i - 1]和[j ]或者[ i]和[j - 1]</span>                <span class="token keyword">int</span> p1 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> p2 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">// 2 将这个位置的情况纳入 比较 [i]和 [j]</span>                <span class="token keyword">int</span> p3 <span class="token operator">=</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>str1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>str2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="10-最小路径和">10 最小路径和</h2><blockquote><p>m ✖️n 的网格 从左下角走到右下角 怎么走路径最短</p></blockquote><p>⚠️[1, 1] 开始填表</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minPathSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>grid <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> grid<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// !!! 注意别写反了</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="扩展">扩展</h4><p>记录路径也可以开一个字典，应该知道了每个 [i,j] 上一个来源坐标 last， path[(i,j)] = (lasti,lastj)，最后用一个死循环输出所有path，当 (i,j) == (0,0 ) 时候退出 然后最后进行一个死循环 就可以将循环打出来了</p><h3 id="不同路径">不同路径</h3><blockquote><p>m ✖️n 的网格 从左下角走到右下角 有多少种走法 （方法数）</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="11-最长公共子数组-最长重复子数组">11  最长公共子数组(最长重复子数组)</h2><blockquote><p>注意的还是<strong>边界</strong>； 应为需要最开始的状态来依赖 所以要不选择dp外围加一圈 要不就是dp内围循环从1开始</p></blockquote><img src="算法高频题总结/image-20220125205333273.png" alt="image-20220125205333273" style="zoom: 33%;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">B</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">B</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums1<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nums2<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//！！！</span>               ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> ans<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h2 id="12-零钱兑换问题-完全背包-dp4-难">12 零钱兑换问题 &lt;完全背包&gt;(dp4) 难</h2><p>关于背包问题 <a href="https://leetcode-cn.com/problems/coin-change/solution/yi-pian-wen-zhang-chi-tou-bei-bao-wen-ti-sq9n/">吃透背包所有问题</a></p><p><strong>从左向右的尝试模型</strong></p><blockquote><p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。</p></blockquote><h3 id="1-返回需要最少的硬币个数">1 返回需要最少的硬币个数</h3><blockquote><p>计算并返回可以凑成总金额所需的 <strong>最少</strong>硬币个数 。</p><p>每个硬币都可以说使用无限次。</p></blockquote><h4 id="动态规划">动态规划</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>aim <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 下边</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 最小值 相当于（ 左边+1）与（下边 ）进行比较</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 无解情况返回-1</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="2-返回凑齐的所有方法数">2 返回凑齐的所有方法数</h3><blockquote><p>返回硬币或者货币可以凑齐钱的所有方法数</p></blockquote><h4 id="暴力递归的尝试">暴力递归的尝试</h4><img src="算法高频题总结/image-20220126121822867.png" alt="image-20220126121822867" style="zoom:50%;float:left;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">coinsWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> aim<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// arr[index....] 所有的面值，每一个面值都可以任意选择张数，组成正好rest这么多钱，方法数多少？</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没钱了</span><span class="token keyword">return</span> rest <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> ways <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> zhang <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> zhang <span class="token operator">*</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rest<span class="token punctuation">;</span> zhang<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> ways <span class="token operator">+=</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token punctuation">(</span>zhang <span class="token operator">*</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ways<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><img src="算法高频题总结/image-20220126122746347.png" alt="image-20220126122746347" style="zoom: 50%;float:left" /><p><strong>说明是有重复解的</strong>,所以可以进一步进行记忆化搜索</p><h4 id="记忆化搜索">记忆化搜索</h4><p>就是用一个结构存储f(i, rest)结果 后面就不会重复解</p><img src="算法高频题总结/image-20220126124736980.png" alt="image-20220126124736980" style="zoom:50%; float: left;" /><p>如果该题没有枚举行为那么傻缓存的方法和严格表结构（动态规划）的方法就是一样的。</p><p><strong>严格的表结构</strong>： 就是在记忆化搜索的基础上，进一步梳理了依赖关系，从简单位置算出复杂位置，严格规定好了计算顺序</p><p>有枚举行为：需要搞出严格的表结构进行继续优化。</p><h4 id="动态规划-2">动态规划</h4><p>第一版dp:有枚举行为，和上面记忆化搜索的方法是等效的</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">dp1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> aim <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> ways <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> zhang <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> zhang <span class="token operator">*</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rest<span class="token punctuation">;</span> zhang<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ways <span class="token operator">+=</span> dp<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> <span class="token punctuation">(</span>zhang <span class="token operator">*</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> ways<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>第二版：将枚举行为的规律找出来，利用<strong>严格的表结构</strong></p><img src="算法高频题总结/image-20220126140549709.png" alt="image-20220126140549709" style="zoom:50%;float:left" /><img src="算法高频题总结/image-20220126141740242.png" alt="image-20220126141740242" style="zoom:50%;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>coins <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> coins<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> amount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">-</span> coins<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> coins<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-最终代码">3 最终代码</h3><h4 id="零钱兑换1">零钱兑换1</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>aim <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> aim<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 最小值判断</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>aim<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 无解情况返回-1</span>    <span class="token punctuation">&#125;</span><span class="token comment">/** 一维 难理解*/</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">></span> amount <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="零钱兑换2">零钱兑换2</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>coins <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> coins<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> amount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rest <span class="token operator">-</span> coins<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> coins<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** 一维 不是很好理解怕写错*/</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> coin <span class="token operator">:</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> coin<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coin<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="13-最长有效括号">13 最长有效括号</h2><blockquote><p>给你一个只包含 <code>'('</code> 和 <code>')'</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p></blockquote><pre class="language-txt" data-language="txt"><code class="language-txt">思路：    是子串类型，看以i结尾1 如果当前是‘）’ 就找可以和他配对的最前左括号pre下标   pre = i - dp[i - 1] - 1;            （dp[i - 1] 前一个已经配好对的长度 2 如果pre是左括号(注意pre>= 0 防止越界)      更新dp[i] == 2 + dp [i - 1]+ (pre > 0? dp [pre - 1] : 0);</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">int</span> pre <span class="token operator">=</span> i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> pre <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'('</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// !! pre >= 0在前 pre </span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>pre <span class="token operator">></span> <span class="token number">0</span><span class="token operator">?</span> dp<span class="token punctuation">[</span>pre <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//!!! pre -1 </span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="14-打家劫舍">14 打家劫舍</h2><blockquote><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。<br>链接：<a href="https://leetcode-cn.com/problems/house-robber">https://leetcode-cn.com/problems/house-robber</a></p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ！！！ </span>           <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>       dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ！！!注意要将[0][1] 先填 i从2开始</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> p1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> p2 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> p3 <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><h2 id="打家劫舍Ⅱ">打家劫舍Ⅱ</h2><blockquote><p>这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。</p></blockquote><p>是滚动数组，可以分成两个数组来判断[0]-[N-2] 和 [1]-[N-1]</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> p1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> p2 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> p3 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans1 <span class="token operator">=</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> p1 <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> p2 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> p3 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>p2<span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans2 <span class="token operator">=</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans1<span class="token punctuation">,</span> ans2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span></code></pre><h2 id="15-矩阵的递增路径">15 矩阵的递增路径</h2><blockquote><p>给定一个 m x n 整数矩阵 matrix ，找出其中 最长递增路径 的长度。</p><p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你 不能 在 对角线 方向上移动或移动到 边界外（即不允许环绕）。</p><img src="算法高频题总结/image-20220228231209380.png" alt="image-20220228231209380" style="zoom:33%;" /></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">longestIncreasingPath</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">M</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">process1</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//存了数就不用再算了</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 上下左右四个方向</span><span class="token keyword">int</span> up <span class="token operator">=</span> i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token function">process1</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> dp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> down <span class="token operator">=</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token function">process1</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> dp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> left <span class="token operator">=</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token function">process1</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> right <span class="token operator">=</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token function">process1</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span> down<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="16-机器人walk">16 机器人walk</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 机器人在n长度的数组中，位置在M，要走k步到p，有多少种方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DP_RobortWalk</span> <span class="token punctuation">&#123;</span><span class="token comment">/* 1 * 暴力递归尝试 * 每次走一步： 1. rest - 1 ；2. 位置cur更新 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">way1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">M</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">P</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token class-name">M</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token class-name">M</span> <span class="token operator">></span> <span class="token class-name">N</span> <span class="token operator">||</span> <span class="token class-name">P</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token class-name">P</span> <span class="token operator">></span> <span class="token class-name">N</span> <span class="token operator">||</span> <span class="token class-name">K</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">process1</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 1 当剩下0步 ：到了aim 返回1;没到 返回0</span><span class="token comment">// 2 两个边界条件</span><span class="token comment">// 3 返回递归结果</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">,</span> <span class="token keyword">int</span> aim<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 1 </span><span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// base case</span><span class="token keyword">return</span> cur <span class="token operator">==</span> aim <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2</span><span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">process1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> aim<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">process1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> aim<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3</span><span class="token keyword">return</span> <span class="token function">process1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> aim<span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token function">process1</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> aim<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * DP:直接使用矩阵来替代递归的过程 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">way3</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">M</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">P</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token class-name">M</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token class-name">M</span> <span class="token operator">></span> <span class="token class-name">N</span> <span class="token operator">||</span> <span class="token class-name">P</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token class-name">P</span> <span class="token operator">></span> <span class="token class-name">N</span> <span class="token operator">||</span> <span class="token class-name">K</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">K</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 1</span>dp<span class="token punctuation">[</span><span class="token class-name">P</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//base case </span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> rest <span class="token operator">&lt;=</span> <span class="token class-name">K</span><span class="token punctuation">;</span> rest<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 2</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>dp<span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> cur <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> cur<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">[</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>cur <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token class-name">M</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">K</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">way1</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">way3</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="17-纸牌博弈">17 纸牌博弈</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* 纸牌博弈问题 * 两个会预判的人 从左右选卡片 返回胜利的人的分数 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DP1_TwoSmartManPeekCard</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">win1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>arr<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// f() 在i~j范围 先拿</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//纸牌被聪明人先拿，获得的分数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//拿走一张（i或者j）后，聪明人成了后拿的人，在两种决策中选最优</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">s</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// g() 在i~j范围 后拿</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//纸牌被聪明人后拿，获得的分数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//对方拿走一张（i或者j）后，聪明人成了先拿的人，对方也是聪明人，会留下最差的情况</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">f</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*     * DP     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">win2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//先处理L == R （gmap在初始化就是0，不用管</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//按着对角线来一步步求！！！</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> startCol <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> startCol <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> startCol<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> startCol<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmap<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">+</span> gmap<span class="token punctuation">[</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">+</span> gmap<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gmap<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>fmap<span class="token punctuation">[</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fmap<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">R</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>fmap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> gmap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1>3 排序</h1><h2 id="快速排序">-快速排序-</h2><h4 id="1-0-partition">1.0 partition</h4><blockquote><p>partition 以arr[R] 为界分为 &lt;=arr[R]   arr[R]    &gt;arr[R] 三个部分</p><p>每次可以找到一个位置的数</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">></span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">L</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> lessEqual <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">++</span>lessEqual<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">++</span>lessEqual<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lessEqual<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">>=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// L..R partition arr[R]  [   &lt;=arr[R]   arr[R]    >arr[R]  ]</span>    <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-0-荷兰国旗">2.0 荷兰国旗</h4><blockquote><p>在[l, r]上以arr[R]为界 将数组分为&lt; = &gt; 三个部分</p><p>每次可以找到中间等等于那部分的数</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">netherlandsFlag</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">></span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> less <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> more <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// !!! index &lt; more</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 == 情况 index++</span>      index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 2 &lt; 情况 交换index和less的右边 然后index++</span>      <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">++</span>less<span class="token punctuation">)</span><span class="token punctuation">;</span>      index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">// 3 > 情况 交换index和more左边  不用index++！</span>      <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">--</span>more<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> more<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>less<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> more<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// ！！！</span><span class="token punctuation">&#125;</span></code></pre><h5 id="随机快排">随机快排</h5><blockquote><p>在荷兰国旗基础上 将数组的arr[R]进行随机交换 然后递归将数组所有部分都排完</p><p>最终期望求出来的复杂度就是O(logN*N)</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">proces</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">></span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 随机交换</span>  <span class="token keyword">int</span> random <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> area <span class="token operator">=</span> <span class="token function">netherlandsFlag</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> area<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> area<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h5 id="递归版本">递归版本</h5><blockquote><p>迭代，自己压栈，把任务做了然后再放出来</p><p>最开始做一次递归里做的 然后在迭代过程中再做递归里做的</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义任务</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Op</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Op</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">L</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token class-name">R</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 压栈：开始是从[0,N - 1]</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 随机交换 分界</span>  <span class="token keyword">int</span> random <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> area <span class="token operator">=</span> <span class="token function">netherlandsFlag</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Op</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Op</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> area<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Op</span><span class="token punctuation">(</span>area<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Op</span> op <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">op<span class="token punctuation">.</span></span>L</span> <span class="token operator">&lt;</span> <span class="token class-name"><span class="token namespace">op<span class="token punctuation">.</span></span>R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 随机交换和分界</span>      random <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">op<span class="token punctuation">.</span></span>L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">op<span class="token punctuation">.</span></span>R</span> <span class="token operator">-</span> <span class="token class-name"><span class="token namespace">op<span class="token punctuation">.</span></span>L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">op<span class="token punctuation">.</span></span>R</span><span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span>      area <span class="token operator">=</span> <span class="token function">netherlandsFlag</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">op<span class="token punctuation">.</span></span>L</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">op<span class="token punctuation">.</span></span>R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Op</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">op<span class="token punctuation">.</span></span>L</span><span class="token punctuation">,</span> area<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Op</span><span class="token punctuation">(</span>area<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">op<span class="token punctuation">.</span></span>R</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h4 id="随机快排的时间复杂度分析">&lt;随机快排的时间复杂度分析&gt;</h4><p>1）通过分析知道，划分值越靠近中间，性能越好；越靠近两边，性能越差<br>2）随机选一个数进行划分的目的就是让好情况和差情况都变成概率事件<br>3）把每一种情况都列出来，会有每种情况下的时间复杂度，但概率都是1/N<br>4）那么所有情况都考虑，时间复杂度就是这种概率模型下的长期期望！</p><p><em><em>时间复杂度O(N</em> logN)，额外空间复杂度O(logN)都是这么来的。</em>*</p><h3 id="找到数组中的第k个最大元素">!!! ==找到数组中的第k个最大元素==</h3><p>⚠️是k大还是k小</p><h4 id="改写快速排序">改写<a href="###-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-">快速排序</a></h4><p><strong>时间复杂度O(N)</strong></p><p>1 原先数组不能改变 复制一个新数组<br>2 随机选一个数来分区<br>3 分区: 返回两个边界 partition<br>4 如果分区中间=部分包含k 就找到了<br>没有就根据k与边界大小比较大小去其中一部分去找</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 1 原来的数组不好更改</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token function">copyArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token function">process2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// k 小的话就 k - 1</span>   <span class="token punctuation">&#125;</span>      <span class="token comment">// 2 partition分区返回两个边界 分区中间等于部分包含k 就是找到了</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">int</span> random <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> area <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>random<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> area<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> area<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> area<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 没有找到就到另外两个部分继续找</span>           <span class="token keyword">return</span> <span class="token function">process2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> area<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token function">process2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> area<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><p>注意这里的partition</p><blockquote><p>因为是使用num来分区 所以边界注意⚠️对比快排用arr[R]来分区</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> less <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> more <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//！！</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> more<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">++</span>less<span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">--</span>more<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">// 快排还需要交换more和R</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>less <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> more <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//！！！ 返回的右边界是more - 1 快排是more</span><span class="token punctuation">&#125;</span></code></pre><h4 id="BFPRT-面试聊">BFPRT(面试聊)</h4><p><strong>俗称&quot;中位数之中位数算法&quot;。依靠一种精心设计的 pivot 选取方法，该算法从理论上保证了最坏情形下的线性时间复杂度，打败了平均线性、最坏 O(n^2) 复杂度的传统算法</strong></p><blockquote><p>bfprt算法</p><ul><li><p>改进部分就是将快排中随机选数的过程改为五个一组 分组组中排好序</p></li><li><p>找出每一段的中位数 组成m[]</p></li><li><p>找到m的中位数返回</p></li><li><p>medianOfMedian():<br>// 1 arr[L…R] 五个数一组<br>// 2 每个小组内部排序，找到中位数领出来，组成m<br>// 3 m[]中，找到中位数 反调bfprt</p></li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 改进部分：随机部分改成一个方法</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">medianOfMedian</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span> <span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> range <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> range<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> range<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> range<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span> <span class="token punctuation">,</span> range<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> range<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1 arr[L...R] 五个数一组 </span><span class="token comment">// 2 每个小组内部排序，找到中位数领出来，组成m </span><span class="token comment">// 3 m[]中，找到中位数 反调bfprt</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">medianOfMedian</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 1</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> size <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token operator">/</span><span class="token number">5</span> <span class="token operator">+</span> offset<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 2</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>        m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sortAndMedian</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> first<span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">,</span> first <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 3</span>    <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sortAndMedian</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// SORT</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token class-name">L</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// MEDIAN</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">+</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="堆排序">-堆排序-</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 1 从下至上让整个数组变为大根堆 并将堆顶(max)与结尾交换 再去重新调整     * 2 遍历调整 直到heapSize = 0     * @param arr     */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> heapSize <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>heapSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">--</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 从下到上将整个数组变为大根堆结构</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//先找到左孩子 如果有孩子 将最大的找到并与根比较 谁大放在上面</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> largest <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> heapSize <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> left<span class="token punctuation">;</span>            largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> largest <span class="token operator">:</span> i<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>largest <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> largest<span class="token punctuation">;</span>            left <span class="token operator">=</span> <span class="token number">432</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> largest<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO Auto-generated method stub</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="归并排序">-归并排序-</h2><hr><p>1）整体是递归，左边排好序+右边排好序+merge让整体有序<br>2）让其整体有序的过程里用了排外序方法<br>3）利用master公式来求解时间复杂度<br>4）当然可以用非递归实现</p><hr><h3 id="递归版本-2">递归版本</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 递归方法实现</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// arr[L...R]范围上，变成有序的</span><span class="token comment">// L...R    N    T(N) = 2*T(N/2) + O(N)  -></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">==</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// base case</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> mid<span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">M</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> <span class="token class-name">M</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 要么p1越界了，要么p2越界了</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> <span class="token class-name">M</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        help<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> help<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span><span class="token class-name">L</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="非递归版本">非递归版本</h3><p>流程就在于折腾  步长 这个概念<br>步长 = 1 开始, 步长的变化一定是2的某次方<br>最后一组: 凑不齐左组就不管了, 右组有多少算多少<br>步长一旦超过总长度, 说明搞完了, 停止就行了</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>step <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">>=</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">M</span> <span class="token operator">==</span> <span class="token class-name">N</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token class-name">M</span> <span class="token operator">>=</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">M</span> <span class="token operator">+</span> step<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">==</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">></span> <span class="token class-name">N</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        step <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意最后一组左组: L + step - 1 可能越界</p><p>从右往左合并就不用考虑越界问题了</p><pre class="language-none"><code class="language-none">if (step &gt; N &#x2F; 2) &#123;    break;&#125;</code></pre><p>此处不用等号的原因:<br>如果17个数, 最后一个调整是步长为16的时候的调整:<br>前16个数做左组, 后一个数做右组<br>而 N/2 是向下取整的, 17/2 =8 , 所以 mergeSize &gt;= N / 2,<br>在等于的时候就停止的话, 最后一个步长是8, 不会有最后一个步长为16的时候, 导致你出错了</p><h3 id="优化后的最终版本">优化后的最终版本</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 非递归方法实现</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> mergeSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 当前有序的，左组长度</span>    <span class="token comment">// 一组是2倍的mergeSize</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mergeSize <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// log N</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 0.... </span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// L...M  左组（mergeSize）</span>            <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token class-name">L</span> <span class="token operator">+</span> mergeSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">M</span> <span class="token operator">>=</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 当前组凑不齐,只有左边, 肯定有序</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">// 预防越界风险</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//  L...M   M+1...R(mergeSize)</span>            <span class="token comment">// 有可能最后一组右组数目不够</span>            <span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">M</span> <span class="token operator">+</span> mergeSize<span class="token punctuation">,</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token class-name">M</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 下一次左组</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 防止溢出, INT_MAX</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mergeSize <span class="token operator">></span> <span class="token class-name">N</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        mergeSize <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="复杂度">复杂度</h4><p>一共执行次数  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">log_2N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>, merge 一次的复杂度 O(N)<br>总的复杂度: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N*logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p><h2 id="前缀树">-前缀树-</h2><p>1）单个字符串中，字符从前到后的加到一棵多叉树上<br>2）字符放在路上，节点上有专属的数据项（常见的是pass和end值）<br>3）所有样本都这样添加，如果没有路就新建，如有路就复用<br>4）沿途节点的pass值增加1，每个字符串结束时来-到的节点end值增加1</p><p>可以完成前缀相关的查询</p><h3 id="例子">例子</h3><p>设计一种结构。用户可以：</p><pre class="language-markup" data-language="markup"><code class="language-markup">1）void insert(String str)            添加某个字符串，可以重复添加，每次算1个2）int search(String str)             查询某个字符串在结构中还有几个3) void delete(String str)           删掉某个字符串，可以重复删除，每次算1个4）int prefixNumber(String str)       查询有多少个字符串，是以str做前缀的</code></pre><h3 id="前缀树的实现方式">前缀树的实现方式</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> pass<span class="token punctuation">;</span><span class="token comment">// 经过几次</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span><span class="token comment">// 作为end几次</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nexts<span class="token punctuation">;</span> <span class="token comment">// 后面的数组</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pass <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            nexts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 一条最长就26 所以这个方式不适合很多类型的节点</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Trie1</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span><span class="token comment">// 头节点</span>        <span class="token comment">// 构造方法</span>        <span class="token keyword">public</span> <span class="token class-name">Trie1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*         * insert()         */</span>        <span class="token comment">// 1 先抓住头节点  pass ++ </span>        <span class="token comment">// 2 从左向右遍历字符，next[path]== null则新建节点 pass++</span>        <span class="token comment">// 3 最后end++</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>word <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>pass<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                path <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span>pass<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            node<span class="token punctuation">.</span>end<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*         * search():查找word出现了几次         */</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>word <span class="token operator">==</span>  <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">int</span> path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                path <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>end<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*         * delete() 内存泄漏问题jvm可以解决的         */</span>        <span class="token comment">// 1 先search是否存在</span>        <span class="token comment">// 2 遍历经过要把pass-- 且当pass==0时将next[path]置空，后面的节点JVM自动会清除</span>        <span class="token comment">// 3 end --</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Node</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>                node<span class="token punctuation">.</span>pass<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    path <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">.</span>pass <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                node<span class="token punctuation">.</span>end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*         * prefixNode:有几个是以pre作为前缀的字符         *          */</span>        <span class="token comment">//和search步骤差不多 最后return的是pass</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">prefixNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> pre<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">int</span> path <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> pre<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                path <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>nexts<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> node<span class="token punctuation">.</span>pass<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="（桶排序）不基于比较的">-（桶排序）不基于比较的-</h2><p>桶排序思想下的排序：计数排序 &amp; 基数排序</p><p>1)桶排序思想下的排序都是不基于比较的排序</p><p>2)时间复杂度为O(N)，额外空间负载度O(M)</p><p>3)应用范围有限，需要样本的数据状况满足桶的划分</p><h3 id="计数排序和基数排序">计数排序和基数排序</h3><h4 id="题目3-计数排序">题目3: <a href="app://obsidian.md/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F">计数排序</a></h4><p>计数排序要求，样本是整数，且范围比较窄</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// only for 0~200 value</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">countSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bucket<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="题目4-基数排序代码">题目4: <a href="app://obsidian.md/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E4%BB%A3%E7%A0%81">基数排序代码</a></h4><p>一般来讲，基数排序要求，样本是10进制的正整数</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// only for no-negative value</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">maxbits</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxbits</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token operator">++</span><span class="token punctuation">;</span>        max <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// arr[l..r]排序  ,  digit</span><span class="token comment">// l..r    3 56 17 100    3</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">,</span> <span class="token keyword">int</span> digit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> radix <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 有多少个数准备多少个辅助空间</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> d <span class="token operator">&lt;=</span> digit<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 有多少位就进出几次</span>        <span class="token comment">// 10个空间</span>        <span class="token comment">// count[0] 当前位(d位)是0的数字有多少个</span>        <span class="token comment">// count[1] 当前位(d位)是(0和1)的数字有多少个</span>        <span class="token comment">// count[2] 当前位(d位)是(0、1和2)的数字有多少个</span>        <span class="token comment">// count[i] 当前位(d位)是(0~i)的数字有多少个</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>radix<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// count[0..9]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 103  1   3</span>            <span class="token comment">// 209  1   9</span>            j <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> radix<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> count<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token class-name">L</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            j <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            help<span class="token punctuation">[</span>count<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">R</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> help<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>1）一般来讲，计数排序要求，样本是整数，且范围比较窄</strong></p><p><strong>2）一般来讲，基数排序要求，样本是10进制的正整数</strong></p><p><strong>一旦要求稍有升级，改写代价增加是显而易见的</strong></p><h2 id="排序算法的稳定性">排序算法的稳定性</h2><p>稳定性是指同样大小的样本再排序之后不会改变相对次序</p><p>对基础类型来说，稳定性毫无意义</p><p>对非基础类型来说，稳定性有重要意义</p><p>有些排序算法可以实现成稳定的，而有些排序算法无论如何都实现不成稳定的</p><h2 id="排序算法总结">排序算法总结</h2><table><thead><tr><th></th><th>时间复杂度</th><th>额外空间复杂度</th><th>稳定性</th></tr></thead><tbody><tr><td>选择排序</td><td>O(N^2)</td><td>O(1)</td><td>无</td></tr><tr><td>冒泡排序</td><td>O(N^2)</td><td>O(1)</td><td>有</td></tr><tr><td>插入排序</td><td>O(N^2)</td><td>O(1)</td><td>有</td></tr><tr><td>归并排序</td><td>O(N* logN)</td><td>O(N)</td><td>有</td></tr><tr><td>随机快排</td><td>O(N* logN)</td><td>O(logN)</td><td>无</td></tr><tr><td>堆排序</td><td>O(N* logN)</td><td>O(1)</td><td>无</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>计数排序</td><td>O(N)</td><td>O(M)</td><td>有</td></tr><tr><td>基数排序</td><td>O(N)</td><td>O(N)</td><td>有</td></tr></tbody></table><p>1）不基于比较的排序，对样本数据有严格要求，不易改写<br>2）基于比较的排序，只要规定好两个样本怎么比大小就可以直接复用<br>3）基于比较的排序，时间复杂度的极限是O(N∗logN)<br>4）时间复杂度O(N∗logN)、额外空间复杂度低于O(N)、且稳定的基于比较的排序是不存 在的。<br>5）为了绝对的速度选快排、为了省空间选堆排、为了稳定性选归并</p><h1>4 滑动窗口</h1><p>滑动窗口更新结构</p><h2 id="1-无重复数组的最长子串">1 无重复数组的最长子串</h2><blockquote><p>给定一个字符串 找出里面没有重复的最长子串</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 1 使用窗口 因为不重复 可以用hashset来存储 结果集是char[] str</span><span class="token comment">// 2 遍历数组 L 向右</span><span class="token comment">// 2.1 R向右遍历:更新表</span><span class="token comment">// 2.2 更新max、更新set:删除头</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s <span class="token operator">==</span>  <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 2.1</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// !!! 注意是不包含</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">R</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2.2</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="动态规划版">动态规划版</h3><p>使用256数组进行存储 先都初始化为-1 下标是字符串值</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring2</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>map<span class="token punctuation">[</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pre <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">-</span> map<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pre <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-最小覆盖子串">2 最小覆盖子串</h2><blockquote><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">  <span class="token comment">// 1 使用map[256]来记录 t中需要的每种字符的数量;</span><span class="token comment">//all来记录所有字符剩下没找到的数量；start记录最小子串开头下标</span><span class="token comment">// 2 遍历字符集  L = 0 遍历 R 向右 </span><span class="token comment">// 2.1 右边界扩大 同时map相应-- 并且没有减到0的话all--</span><span class="token comment">// 2.2 当all还完之后 要将左边界缩小 </span><span class="token comment">// 2.2.1 map对应的str[L] 左边界有可能有重复值 对应map小于0 要缩到不能缩的地方</span><span class="token comment">// 2.2.2 更新minLen 和开头start </span><span class="token comment">// 2.2.3 左边界L++、map对应++、 all++</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">minLength2</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// map[37] = 4  37  4次</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> str2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>map<span class="token punctuation">[</span>str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> all <span class="token operator">=</span> str2<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// [L,R)  -> [0,0)</span><span class="token keyword">int</span> minLen <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 记录最小子串开头下标 </span><span class="token comment">// 2</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">!=</span> str1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 2.1</span>map<span class="token punctuation">[</span>str1<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>str1<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>all<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2.2</span><span class="token keyword">if</span> <span class="token punctuation">(</span>all <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 还完了 就是一个解</span><span class="token comment">// 2.2.1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>str1<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ！！！左边界有可能有重复值 对应的map就是小于0的 我们要避免 所以缩到没有重复的地方才开始记录minlen</span>map<span class="token punctuation">[</span>str1<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2.2.2</span><span class="token keyword">if</span><span class="token punctuation">(</span>minLen <span class="token operator">></span> <span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> minLen <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>start <span class="token operator">=</span> <span class="token class-name">L</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2.2.3</span>all<span class="token operator">++</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span>str1<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">R</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> minLen <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> minLen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>就是all还完之前r++往右展开 all==0 就要l++ 往左边缩</strong></p><h2 id=""></h2><h2 id="3-滑动窗口的最大值">3 滑动窗口的最大值</h2><blockquote><p>假设一个固定大小为W的窗口;依次划过arr 返回每一次滑出状况的最大值</p></blockquote><p>定义一个队列来作为窗口，里面放的是下标</p><p>循环遍历数组： L R边界</p><p>\1) 当窗口不为空&amp;窗口结尾小于当前R 结尾弹出（window是单调递减）<br>\2) 添加arr[R]<br>\3) 当队首元素已经不再滑动窗口内，将其从队首移除<br>\4) 当窗口右边界right+1大于等于窗口大小k时窗口形成。此时，队首元素就是该窗口内的最大值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span> arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> w <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 1</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 2</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token class-name">R</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token class-name">R</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 1)</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            window<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 2)</span>        window<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">-</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 3)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">L</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            window<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 4)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">>=</span> w <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span><span class="token class-name">L</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>window<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></code></pre><h2 id="4-满足绝对值差达标的子数组数量">4 满足绝对值差达标的子数组数量</h2><blockquote><p>给定一个整型数组arr, 和一个整数num 某一个arr中的子数组sub 如果想达标必须满足 sub中最大值 - sub中国最小值 &lt;= num 返回arr中达标子数组的数量</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SW_AllLessNumSubArray</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 需要两个双端队列来存储max和min</span><span class="token comment">// 2 遍历数组每一个数都做一次L开头</span><span class="token comment">// 2.1 往右R直到当前窗口内子数组不达标</span><span class="token comment">// 2.1.1 滑动窗口比较弹出末尾添加当前值</span><span class="token comment">// 2.1.2 不达标要break</span><span class="token comment">// 2.2 到达了不达标的位置 就可以结束当前L开头的收集 并弹出开头</span><span class="token comment">// 2.2.1 更新res:对收集达标的数组个数 进行累加</span><span class="token comment">// 2.2.2 更新窗口:弹出L开头</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">allLessNumSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> arr <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1 </span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> qmin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> qmax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 2 </span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">L</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 2.1</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">R</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 2.1.1</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>qmax<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>qmax<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>qmax<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>qmax<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>qmin<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>qmin<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">>=</span> arr<span class="token punctuation">[</span><span class="token class-name">R</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>qmin<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>qmin<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.1.2</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>qmax<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>qmin<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">R</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2.2</span><span class="token comment">// 2.2.1</span>res <span class="token operator">+=</span> <span class="token class-name">R</span> <span class="token operator">-</span> <span class="token class-name">L</span><span class="token punctuation">;</span><span class="token comment">// 2.2.2</span><span class="token keyword">if</span> <span class="token punctuation">(</span>qmax<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>qmax<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>qmin<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">L</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>qmin<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">L</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h1>5 二叉树</h1><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="1-二叉树先、中、后序遍历-DFS">1 二叉树先、中、后序遍历(DFS)</h2><h3 id="递归">递归</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 前</span>  <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中</span>  <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 后</span><span class="token punctuation">&#125;</span></code></pre><h3 id="非递归-压栈">非递归(压栈)</h3><ul><li>先： 先压右再压左 输出—》头左右</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">front</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印 </span>    <span class="token function">sysout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// !!! 判空</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// !!! 判空</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li>后：用两个栈 1）先压左再压右 同时答应弹出改为压入另一个栈 输出—》 头右左 2）最后输出的时候就是左右头  头左右</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 前序打印行为改成压栈</span>    stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 左</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 右</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 栈2 弹出打印</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印</span>    <span class="token function">sysout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ul><li><p>中： 1）先将左边界压入栈 2）直到null，弹出并打印进入右树</p><img src="算法高频题总结/image-20220222171852618.png" alt="image-20220222171852618" style="zoom:50%;" /></li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ⚠️一开始不用塞head</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>left<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span> <span class="token comment">// 空了 就弹出打印 进入右边</span>        head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sysout</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>二叉搜索树也可以用这个</p><h2 id="2-二叉树的层序遍历-BFS）">2 二叉树的层序遍历(BFS）</h2><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）</p> <img src="算法高频题总结/25617_oW1zq2BOkhrT7ERQ.png" alt="image" style="zoom:50%;" /><h3 id="1-打印每一层">1) 打印每一层</h3><blockquote><p>给你二叉树的根节点root， 返回其节点值的层序遍历，就是逐层打印</p></blockquote><p>1.先定义结果集res 和判空操作</p><p>2.定义<strong>队列容器</strong>，head放入队列中。</p><p>3.定义结果集元素list 即每一层。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// size !!!</span><span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="二叉树的锯齿形遍历">二叉树的锯齿形遍历</h4><blockquote><p>就是在层序遍历基础上 使用flag来判断打印的顺序 ⚠️list.add(0, root.val) 就是添加到开头</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> res<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span> queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             root <span class="token operator">=</span>  queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//通过flag判断打印顺序</span>                 list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                 list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ！！！</span>             <span class="token punctuation">&#125;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span><span class="token comment">//这里易错</span>         res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><h3 id="2）返回节点最多的那一层">2）返回节点最多的那一层</h3><ol><li>需要curEnd记录是否当前到层的结尾 需要nextEnd记录下一层的最后节点</li><li>将上面层序遍历添加每层元素的过程改为记录层的curSize</li><li>当cur == curEnd 时 更新 ans (maxWidth</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxWidth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">int</span> curSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h3 id="3）二叉树的右视图">3）二叉树的右视图</h3><blockquote><p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p></blockquote><img src="算法高频题总结/image-20220209205752144.png" alt="image-20220209205752144" style="zoom:50%;" /><p>需要curEnd记录是否当前到层的结尾 需要nextEnd记录下一层的最后节点</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1</span><span class="token class-name">TreeNode</span> curEnd <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token class-name">TreeNode</span> nextEnd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">TreeNode</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2 用nextEnd记录最后一个节点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>nextEnd <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>nextEnd <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3 更新当前最后的节点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> curEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>curEnd <span class="token operator">=</span> nextEnd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span></code></pre><h3 id="4）最大宽度（左右节点的距离）">4）最大宽度（左右节点的距离）</h3><blockquote><p>给定一个二叉树，编写一个函数来获取这个树的最大宽度。树的宽度是所有层中的最大宽度。这个二叉树与满二叉树（full binary tree）结构相同，但一些节点为空。</p><p>每一层的宽度被定义为两个端点（该层最左和最右的非空节点，两端点间的null节点也计入长度）之间的长度。</p><pre class="language-none"><code class="language-none">避免不了要记录每一个节点的index 所以需要一个新的节点结构newnode&#123;​treenode node;​int level;​int pos;&#125;</code></pre></blockquote><ol><li><p><strong>在层序遍历基础上 队列添加的是一个新的节点结构来对每个节点的层数和position进行记录</strong> <strong>不需要</strong></p></li><li><p><strong>每次队列进行一次poll循环都要检查 如果curlever != cur.level 说明到了下一层，将curlevel更新，用first抓住第一个的pos</strong></p></li><li><p><strong>更新max</strong></p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">widthOfBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NewNode</span><span class="token punctuation">></span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NewNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️一开始添加的就是newnode</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> curlevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 记录当前层</span>        <span class="token keyword">int</span> firstpos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 记录每层最前</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">NewNode</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NewNode</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur<span class="token punctuation">.</span>pos <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️结构不能搞错 参数不要穿错</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NewNode</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>level <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">,</span> cur<span class="token punctuation">.</span>pos <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>curlevel <span class="token operator">!=</span> cur<span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                curlevel <span class="token operator">=</span> cur<span class="token punctuation">.</span>level<span class="token punctuation">;</span>                firstpos <span class="token operator">=</span> cur<span class="token punctuation">.</span>pos<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> cur<span class="token punctuation">.</span>pos <span class="token operator">-</span> firstpos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewNode</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> node<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> pos<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">NewNode</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> pos<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="3-二叉树的最近公共祖先">3 二叉树的最近公共祖先</h2><blockquote><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p></blockquote><p><code>Info&#123;boolean findP, boolean findQ, treenode ans&#125;</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">.</span>ans<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> findP<span class="token punctuation">;</span><span class="token comment">// 是否包含p</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> findQ<span class="token punctuation">;</span><span class="token comment">// 是否包含q</span><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> ans<span class="token punctuation">;</span><span class="token comment">// 保存结果</span><span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> findP<span class="token punctuation">,</span> <span class="token keyword">boolean</span> findQ<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>findP <span class="token operator">=</span> findP<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>findQ <span class="token operator">=</span> findQ<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>ans <span class="token operator">=</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Info</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Info</span> leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Info</span> rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 填充当前info</span><span class="token keyword">boolean</span> findP <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>findP <span class="token operator">||</span> rightInfo<span class="token punctuation">.</span>findP <span class="token operator">||</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> findQ <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>findQ <span class="token operator">||</span> rightInfo<span class="token punctuation">.</span>findQ <span class="token operator">||</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TreeNode</span> ans <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>ans <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// leftInfo.findP &amp;&amp; leftInfo.findQ</span>ans <span class="token operator">=</span> leftInfo<span class="token punctuation">.</span>ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rightInfo<span class="token punctuation">.</span>ans <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// rightInfo.findP &amp;&amp; rightInfo.findQ</span>ans <span class="token operator">=</span> rightInfo<span class="token punctuation">.</span>ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>findP <span class="token operator">&amp;&amp;</span> findQ<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>findP<span class="token punctuation">,</span> findQ<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="4-二叉树最大路径和">4 二叉树最大路径和</h2><img src="算法高频题总结/image-20220211103231018.png" alt="image-20220211103231018" style="zoom: 67%;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>maxSum<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">&#123;</span> <span class="token comment">// z</span><span class="token keyword">public</span> <span class="token keyword">int</span> maxGain<span class="token punctuation">;</span><span class="token comment">//如果连上父节点的贡献值</span><span class="token keyword">public</span> <span class="token keyword">int</span> maxSum <span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token keyword">int</span> m1<span class="token punctuation">,</span> <span class="token keyword">int</span> m2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>maxGain <span class="token operator">=</span> m1<span class="token punctuation">;</span>maxSum <span class="token operator">=</span> m2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Info</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️ maxsum返回minvalue</span><span class="token punctuation">&#125;</span><span class="token class-name">Info</span> leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Info</span> rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> leftGain <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>maxGain<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️ >0</span><span class="token keyword">int</span> rightGain <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rightInfo<span class="token punctuation">.</span>maxGain<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> maxGain <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftGain<span class="token punctuation">,</span>rightGain<span class="token punctuation">)</span> <span class="token operator">+</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token keyword">int</span> maxSum <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>maxSum<span class="token punctuation">,</span>rightInfo<span class="token punctuation">.</span>maxSum<span class="token punctuation">)</span><span class="token punctuation">,</span>leftGain <span class="token operator">+</span> rightGain <span class="token operator">+</span> head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>maxGain<span class="token punctuation">,</span> maxSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="5-对称二叉树">5 对称二叉树</h2><blockquote><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 复制一个自己的树</span>      <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isMirror</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> h1<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> h2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>h1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//两个树都是空</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>h1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 两个树都不是空 就返回：1.当前节点值要相等 2.左边和右边也是mirror</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>h1<span class="token punctuation">.</span>val <span class="token operator">==</span> h2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> h2<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isMirror</span><span class="token punctuation">(</span>h1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> h2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// </span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//一个是空一个不是空</span>  <span class="token punctuation">&#125;</span></code></pre><h2 id="6-从前序和中序序列构造二叉树">6 从前序和中序序列构造二叉树</h2><blockquote><p>给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 利用二叉树前序 头左右 找到头 再利用中序左右头进行左右树分离 */</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> in <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> pre<span class="token punctuation">.</span>length <span class="token operator">!=</span> in<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pre<span class="token punctuation">.</span>length<span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> in<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token constant">L1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token constant">R1</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token constant">L2</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token constant">R2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 越界情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">L1</span> <span class="token operator">></span> <span class="token constant">R1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token comment">// 利用前序找到头</span>        <span class="token class-name">TreeNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span><span class="token constant">L1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">L1</span> <span class="token operator">==</span> <span class="token constant">R1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token comment">//中序对应找到头的下标find</span>        <span class="token keyword">int</span> find <span class="token operator">=</span> <span class="token constant">L2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>in<span class="token punctuation">[</span>find<span class="token punctuation">]</span> <span class="token operator">!=</span> pre<span class="token punctuation">[</span><span class="token constant">L1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            find<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">// （find - L2)就是左树的长度</span>        head<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token constant">L1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">L1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>find <span class="token operator">-</span> <span class="token constant">L2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> in<span class="token punctuation">,</span> <span class="token constant">L2</span><span class="token punctuation">,</span> find <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>  <span class="token constant">L1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>find <span class="token operator">-</span> <span class="token constant">L2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">R1</span><span class="token punctuation">,</span> in<span class="token punctuation">,</span> find <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">R2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="7-验证二叉搜索树">7 验证二叉搜索树</h2><blockquote><p>给你一个二叉树的根节点 root ，判断其是否是一个有效的二叉搜索树。</p><p>有效 二叉搜索树定义如下：</p><p>节点的左子树只包含 小于 当前节点的数。<br>节点的右子树只包含 大于 当前节点的数。<br>所有左子树和右子树自身必须也是二叉搜索树。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** 用中序遍历*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> last <span class="token operator">=</span> <span class="token operator">-</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span><span class="token comment">// ⚠️</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 1 </span><span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>head <span class="token operator">=</span> head<span class="token punctuation">.</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">// 2</span>head <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>last <span class="token operator">=</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>head <span class="token operator">=</span> head<span class="token punctuation">.</span>right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="8-平衡二叉树">8 平衡二叉树</h2><p><strong>使用递归套路</strong></p><pre class="language-none"><code class="language-none">INFO &#123;高度；是否是平衡二叉树；&#125;</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>isBt<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//需要的信息</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">boolean</span> isBt<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ib<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          height <span class="token operator">=</span> h<span class="token punctuation">;</span>          isBt <span class="token operator">=</span> ib<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//找信息的过程</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Info</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">Info</span> leftInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Info</span> rightInfo <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//解决当前的Info的方法（也就是所有递归都会用到的方法）</span>      <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️ </span>      <span class="token keyword">boolean</span> isBalanced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>isBt <span class="token operator">&amp;&amp;</span> rightInfo<span class="token punctuation">.</span>isBt <span class="token operator">&amp;&amp;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>height <span class="token operator">-</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          isBalanced <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> isBalanced<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><h2 id="9-二叉树的序列化和反序列化">9 二叉树的序列化和反序列化</h2><blockquote><p>思路</p><p>序列化： 准备一个string的队列 然后按照先序顺序将结点转为String类型然后加入队列，左边和右边结点按照顺序递归执行该方法</p><p>反序列化： 将要转化为二叉树的队列传入，然后弹出结点为head（注意转换回为Int类型），head左边递归执行preb（prelist），右边递归执行preb（prelist）</p><p>错误</p><p>判断null值注意判断哈 特别是递归里面 就算是方法前面判断了 当时不代表递归以后不会再次出现，所以方法内还要再判断一次</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 二叉树的前中后序列化 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BT_09_preSerial</span> <span class="token punctuation">&#123;</span><span class="token comment">/** * 序列化 使用队列 * @param head * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">preSerial</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pre</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pre</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">,</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用来规定用什么来占位</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pre</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pre</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 反序列化 * @param head * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TreeNode</span> <span class="token function">buildByPreQueue</span><span class="token punctuation">(</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> prelist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>prelist <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> prelist<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">preb</span><span class="token punctuation">(</span>prelist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TreeNode</span> <span class="token function">preb</span><span class="token punctuation">(</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> prelist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> value <span class="token operator">=</span> prelist<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">TreeNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>head<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">preb</span><span class="token punctuation">(</span>prelist<span class="token punctuation">)</span><span class="token punctuation">;</span>head<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">preb</span><span class="token punctuation">(</span>prelist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="10-二叉树的最大深度">10 二叉树的最大深度</h2><blockquote><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，</p><p>3</p><p>/ <br>9  20<br>/  <br>15   7</p><p>返回它的最大深度 3 。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">findDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            height <span class="token operator">=</span> h<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Info</span> <span class="token function">findDepth</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Info</span> leftInfo <span class="token operator">=</span> <span class="token function">findDepth</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Info</span> rightInfo <span class="token operator">=</span> <span class="token function">findDepth</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="11-最大直径">11 最大直径</h2><blockquote><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p><p>示例 :<br>给定二叉树</p><pre><code>   1  / \ 2   3/ \     </code></pre><p>4   5</p><p>返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 二叉树最大直径 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BT_05_ZhiJing</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> lM <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rM <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lM <span class="token operator">+</span> rM <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>lM<span class="token punctuation">,</span> rM<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 递归套路 * @param root * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max2</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">process2</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Info</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">Integer</span> height<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Integer</span> max<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> h<span class="token punctuation">,</span> <span class="token class-name">Integer</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span>max <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Info</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Info</span> leftInfo <span class="token operator">=</span> <span class="token function">process2</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Info</span> rightInfo <span class="token operator">=</span> <span class="token function">process2</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftInfo<span class="token punctuation">.</span>max<span class="token punctuation">,</span> rightInfo<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">,</span>leftInfo<span class="token punctuation">.</span>height <span class="token operator">+</span> rightInfo<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="12-路径总和">12 路径总和</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 路径总和 Ⅰ * @return 要求返回是否存在总和为target的从根到节点的路径 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> isSum<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>isSum <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> isSum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> preSum<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 是叶子节点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preSum <span class="token operator">+</span> head<span class="token punctuation">.</span>val <span class="token operator">==</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>isSum <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 不是叶子节点</span>preSum <span class="token operator">+=</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">,</span> preSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">,</span> preSum<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 路径总和Ⅱ * @return 要求返回所有满足target的路径 */</span><span class="token comment">// 1 </span><span class="token comment">// 2 注意现场要恢复，因为只有一个path来存路 如果没有清空，后面根本装不下</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">process</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> head<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path<span class="token punctuation">,</span> <span class="token keyword">int</span> preSum<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 叶子节点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">+</span> preSum <span class="token operator">==</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传递是引用不能直接传path</span>path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>preSum <span class="token operator">+=</span> head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不是叶子节点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">,</span> path<span class="token punctuation">,</span> preSum<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">,</span> path<span class="token punctuation">,</span> preSum<span class="token punctuation">,</span> sum<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 恢复现场</span>path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="13-翻转二叉树">13 翻转二叉树</h2><blockquote><p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java">翻转二叉树 <span class="token comment">// 有点像数组swap</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre><h1>6 栈</h1><h2 id="1-有效括号">1 有效括号</h2><blockquote><p>给定一个只包括 <code>'('</code>，<code>')'</code>，<code>'&#123;'</code>，<code>'&#125;'</code>，<code>'['</code>，<code>']'</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p></blockquote><ol><li>遍历所有左边的括号变成对应的右括号压入栈</li><li>遇到的右边的括号<ol><li>如果stack是空的，则false</li><li>弹出栈顶比较不相等 false</li></ol></li><li>最后stack 必须是空的才能满足</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'('</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'['</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&#123;'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                 <span class="token keyword">char</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">')'</span> <span class="token operator">&amp;&amp;</span> cur <span class="token operator">!=</span> <span class="token char">'('</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                 <span class="token operator">==</span> <span class="token char">'&#125;'</span> <span class="token operator">&amp;&amp;</span> cur <span class="token operator">!=</span> <span class="token char">'&#123;'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">']'</span> <span class="token operator">&amp;&amp;</span> cur <span class="token operator">!=</span> <span class="token char">'['</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-用栈实现队列">2 用栈实现队列</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sPop<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> sPush<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sPop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sPush <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sPush<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sPop<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sPush<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sPop<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sPush<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sPop<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sPop<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>sPush<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sPop<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sPush<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sPop<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sPop<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sPush<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="3-最小栈">3 最小栈</h2><blockquote><p>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li><code>push(x)</code> —— 将元素 x 推入栈中。</li><li><code>pop()</code> —— 删除栈顶的元素。</li><li><code>top()</code> —— 获取栈顶元素。</li><li><code>getMin()</code> —— 检索栈中的最小元素。</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> data<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> min<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="4-两个队列实现栈">4 两个队列实现栈</h2><p>在push操作里进行改进就可以：<br>通过</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">public</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> q1<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> q2<span class="token punctuation">;</span>        <span class="token comment">/** Initialize your data structure here. */</span>        <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            q1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/** Push element x onto stack. */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q2<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                q2<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>q1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> tmp <span class="token operator">=</span> q1<span class="token punctuation">;</span>            q1 <span class="token operator">=</span> q2<span class="token punctuation">;</span>            q2 <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/** Removes the element on top of the stack and returns that element. */</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> q1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/** Get the top element. */</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> q1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/** Returns whether the stack is empty. */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> q1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>用一个队列也可以</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> n <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span></code></pre><h2 id="5-单调栈">5 单调栈</h2><p>为了解决给定的一个可能含有重复值的arr，i位置一定有以下信息</p><p>1）arr[i] 左边有离它最近比它小的（大）的数</p><p>2）arr[i] 右边有离它最近比它小的（大）的数</p><h3 id="找到左边和右边离i最近比其小的下表对-res-n-2">找到左边和右边离i最近比其小的下表对 <code>res[n][2]</code></h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code1_MonotonousStack</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getNearLessNoRepeat</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//新的数压栈 如果比栈底小 栈底弹出 并记录</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> leftLessIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftLessIndex<span class="token punctuation">;</span>res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> leftLessIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftLessIndex<span class="token punctuation">;</span>res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//数组中有重复的情况</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getNearLess</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// List&lt;Integer> -> 放的是位置，同样值的东西，位置压在一起</span><span class="token comment">// 代表值    底  ->  顶   小  -> 大</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//新的数压栈 如果比栈底小 栈底弹出 并记录</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> leftLessIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> popi <span class="token operator">:</span> popIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftLessIndex<span class="token punctuation">;</span>res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//相等的比你小的 都要把存入栈的格式改为存储了位置的list数组</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> pushIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pushIndex<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pushIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取决于最晚加入的那个</span><span class="token keyword">int</span> leftLessIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> popi <span class="token operator">:</span> popIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftLessIndex<span class="token punctuation">;</span>res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="正数数组arr中（sub的累加和-min）的最大值">正数数组arr中（sub的累加和*min）的最大值</h3><blockquote><p>给定一个只包含正数的数组arr，arr中任何一个子数组sub，一定都可以算出(sub累加和 )* (sub中的最小值)是什么，<br>那么所有子数组中，这个值最大是多少？</p></blockquote><p>直接找每个数两边最近比它小中间部分累加和（这部分该数一定最小）</p><p>1 建立前缀和数组<code>sums[i]</code>(这样求累加和就可以[0~R] -[0~L-1])</p><p>2 和上面单调栈思路差不多</p><p>​1）栈顶弹出<code>[j]</code>后更新max</p><p>​2）再遍历栈里的元素 右边没有比它最小所以累加直接用<code>sums[N-1]</code>来减</p><pre class="language-java" data-language="java"><code class="language-java"></code></pre><h1>7 递归</h1><h2 id="1-全排列">1 全排列</h2><blockquote><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案</p></blockquote><img src="算法高频题总结/image-20220210103904616.png" alt="image-20220210103904616" style="zoom:50%;" /><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选择的路</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">process</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//  DFS</span><span class="token comment">// 1 for是在树形结构里平行进行  - - -></span><span class="token comment">// 2 先交换成为一种情况</span><span class="token comment">// 3 往下|递归将剩余部分的情况搞定</span><span class="token comment">//      |</span><span class="token comment">//      v</span><span class="token comment">// 4 恢复原来状态 因为平行的分支需要同样的状态</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 剪枝</span>vis<span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span><span class="token function">process</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="全排列2⃣️-不重复">全排列2⃣️ 不重复</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 全排列 * 将给定数组进行排列组合  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recursion</span>回溯_Permutation <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不同打印结果存储</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">process</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//  DFS</span>    <span class="token comment">// 1 for是在树形结构里平行进行  - - -></span>    <span class="token comment">// 2 先交换成为一种情况</span>    <span class="token comment">// 3 往下|递归将剩余部分的情况搞定</span>    <span class="token comment">//      |</span>    <span class="token comment">//      v</span>    <span class="token comment">// 4 恢复原来状态 因为平行的分支需要同样的状态</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 剪枝 数组有负数要加上128</span>                vis<span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token comment">// 2</span>                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 3</span>                <span class="token function">process</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 4</span>                <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-括号生成">2 括号生成</h2><blockquote><p>数字 <code>n</code> 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 <strong>有效的</strong> 括号组合。</p></blockquote><pre class="language-none"><code class="language-none">利用一个原理是 当前面已经做了选择的左括号比右括号多的时候就添加右括号 需要剪枝 在往path里面添加括号的时候进行条件剪枝</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">generateParenthesis</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">process</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ⚠️传进去的参数！</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 剪枝 左边括号还有 和左边-右边》0</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> leftRest<span class="token punctuation">,</span> <span class="token keyword">int</span> leftMinusRight<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ans <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> path<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 到结尾</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一种可能</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>leftRest <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 左边的括号还有 将当前的位置设为左， 剩下的去递归</span>                path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'('</span><span class="token punctuation">;</span>                <span class="token function">process</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> leftRest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> leftMinusRight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>leftMinusRight <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 左边的括号大于右边的括号</span>                path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">')'</span><span class="token punctuation">;</span>                <span class="token function">process</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> leftRest<span class="token punctuation">,</span> leftMinusRight <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h2 id="3-复原ip地址">3 复原ip地址</h2><blockquote><p>有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 ‘.’ 分隔。</p><p>例如：“0.1.2.201” 和 “192.168.1.1” 是 有效 IP 地址，但是 “0.011.255.245”、“192.168.1.312” 和 “192.168@1.1” 是 无效 IP 地址。</p><p>给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 ‘.’ 来形成。你 不能 重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">COUNT</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> segment<span class="token punctuation">;</span> <span class="token comment">// segment[i]存储第i段</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>segment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token constant">COUNT</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// s 字符串 id 段数 segstart</span><span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> segStart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 1 已经递归到第四段</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token constant">COUNT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>segStart <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 并且 所有数字都完成</span><span class="token class-name">StringBuffer</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>segment<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token constant">COUNT</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 记得向上返回！！！</span><span class="token punctuation">&#125;</span><span class="token comment">// 2 四段没玩但是已经到结尾</span><span class="token keyword">if</span> <span class="token punctuation">(</span>segStart <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3 有0的情况</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>segStart<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 有零</span>segment<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> segStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 4 一般情况</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> segEnd <span class="token operator">=</span> segStart<span class="token punctuation">;</span> segEnd <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> segEnd<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>segEnd<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ans <span class="token operator">&lt;=</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// ans属于[0, 255]</span>segment<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span><span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> segEnd <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="4-单词搜索">4 单词搜索</h2><p>dfs+回溯</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">,</span> w <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> h<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> w<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> word<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> directions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dir <span class="token operator">:</span> directions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> newi <span class="token operator">=</span> i <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newj <span class="token operator">=</span> j <span class="token operator">+</span> dir<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newi <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newi <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> newj <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newj <span class="token operator">&lt;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>newi<span class="token punctuation">]</span><span class="token punctuation">[</span>newj<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> newi<span class="token punctuation">,</span> newj<span class="token punctuation">,</span> s<span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="5-子集">5 子集</h2><blockquote><p>给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。</p><p>解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。</p><p>示例 1：</p><p>输入：nums = [1,2,3]<br>输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</p><p>示例 2：</p><p>输入：nums = [0]<br>输出：[[],[0]]</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">subsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用来存放之前决定</span><span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> nums <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">process2</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> res<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 两种可能</span><span class="token function">process2</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>path2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">process2</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> path2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h1>8 并查集</h1><h2 id="并查集">并查集</h2><p>用来解决图的连通性和环的数量</p><h2 id="结构（hash表）">结构（hash表）</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code01_UnionFind</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token class-name">V</span> value<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>value <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 并查集  */</span><span class="token comment">// 1 构造方法</span><span class="token comment">// 2 Node&lt;V> findFather(Node&lt;V> cur)</span><span class="token comment">// 3 boolean isSameSet(V a, V b)</span><span class="token comment">// 4 void union(V a, V b)</span><span class="token comment">// 5 int sets()</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnionFind</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> nodes<span class="token punctuation">;</span><span class="token comment">// 点</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> parents<span class="token punctuation">;</span><span class="token comment">// 最高父亲</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> sizeMap<span class="token punctuation">;</span><span class="token comment">// 所在集合大小</span><span class="token keyword">public</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//1 初始化参数</span>nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sizeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2 遍历：先new一个node 然后更新点集，更新父亲表（自己是自己爹），最后更新sizemap</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">V</span> cur <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>parents<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>sizeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 找爹</span><span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">findFather</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//1 new 一个 栈</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2 如果当前cur不是自己爹 ：1）压栈 2）cur更新为自己爹</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> parents<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>cur <span class="token operator">=</span> parents<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>      <span class="token comment">//3 如果栈不空 cur就是当前最爹 所以循环弹出 将cur设为他们爹</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>parents<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 返回两爹是否相等</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSameSet</span><span class="token punctuation">(</span><span class="token class-name">V</span> a<span class="token punctuation">,</span> <span class="token class-name">V</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">findFather</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">findFather</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 并</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token class-name">V</span> a<span class="token punctuation">,</span> <span class="token class-name">V</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> aHead <span class="token operator">=</span> <span class="token function">findFather</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> bHead <span class="token operator">=</span> <span class="token function">findFather</span><span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果两爹不同</span><span class="token keyword">if</span><span class="token punctuation">(</span>aHead <span class="token operator">!=</span> bHead<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1 抓住size大小</span><span class="token keyword">int</span> aSize <span class="token operator">=</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aHead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> bSize <span class="token operator">=</span> sizeMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bHead<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 2 小的那个接在大的下面（big是small的父</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> small <span class="token operator">=</span> aSize <span class="token operator">&lt;</span> bSize <span class="token operator">?</span> aHead <span class="token operator">:</span> bHead<span class="token punctuation">;</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> big <span class="token operator">=</span> small <span class="token operator">==</span> aHead <span class="token operator">?</span> bHead <span class="token operator">:</span> aHead<span class="token punctuation">;</span>parents<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>small<span class="token punctuation">,</span> big<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 3 更新大集的size 并转移小集的sizemap</span>sizeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>big<span class="token punctuation">,</span> aSize <span class="token operator">+</span> bSize<span class="token punctuation">)</span><span class="token punctuation">;</span>sizeMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> sizeMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="1-岛屿数量">1 岛屿数量</h2><blockquote><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> islands <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>islands<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">infect</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> islands<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 从(i,j)这个位置出发，把所有练成一片的'1'字符，变成0</span><span class="token comment">// DFS</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">infect</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> board<span class="token punctuation">.</span>length <span class="token operator">||</span> j <span class="token operator">>=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">||</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">infect1</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">infect1</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">infect1</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">infect1</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * BFS */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">infect2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Queue</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cur <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> cur<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h3 id="使用并查集（面试）">使用并查集（面试）</h3><p>为什么要并查集？ 如果有多台cpu 大岛变成小岛就会很容易</p><p><strong>面试就讲一下怎么通过并查集来进行union ： 并查集就是可以将a, b所在的集合进行合并；需要每个岛的位置 所以需要一个index方法来返回每格子的位置就是行数乘以矩阵宽度再加上列数， 然后要进行union（） 具体过程就是先找到两个要合并的点的父亲，如果不相同就再调出两个所在集合的大小sizemap，然后将小的集合接在大的集合下面， 更新sizemap。 这里找父亲的操作可以用一个help数组倒序遍历来代替栈</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 使用并查集 * @param board * @return */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">numIslands2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> row <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> col <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token class-name">UnionFind2</span> uf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnionFind2</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把第一行第一列先处理 就不需要后面考虑边界</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span> <span class="token operator">&amp;&amp;</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 除了第一行第一列的部分</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span>  <span class="token comment">// 看上面和左边</span><span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> uf<span class="token punctuation">.</span><span class="token function">sets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnionFind2</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> col<span class="token punctuation">;</span><span class="token comment">// 用来计算矩阵数r*col + c</span><span class="token keyword">private</span> <span class="token keyword">int</span> sets<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">UnionFind2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>col <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>sets <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> row <span class="token operator">=</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> row <span class="token operator">*</span> col<span class="token punctuation">;</span>parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">index</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>sets<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// (r,c) -> i</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> r <span class="token operator">*</span> col <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 原始位置 -> 下标</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> hi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>help<span class="token punctuation">[</span>hi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>i <span class="token operator">=</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>hi<span class="token operator">--</span><span class="token punctuation">;</span> hi <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> hi<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>parent<span class="token punctuation">[</span>help<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> r1<span class="token punctuation">,</span> <span class="token keyword">int</span> c1<span class="token punctuation">,</span> <span class="token keyword">int</span> r2<span class="token punctuation">,</span> <span class="token keyword">int</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token function">index</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token function">index</span><span class="token punctuation">(</span>r2<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> f1 <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> f2 <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f1 <span class="token operator">!=</span> f2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>f1<span class="token punctuation">]</span> <span class="token operator">>=</span> size<span class="token punctuation">[</span>f2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>size<span class="token punctuation">[</span>f1<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>f2<span class="token punctuation">]</span><span class="token punctuation">;</span>parent<span class="token punctuation">[</span>f2<span class="token punctuation">]</span> <span class="token operator">=</span> f1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>size<span class="token punctuation">[</span>f2<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>f1<span class="token punctuation">]</span><span class="token punctuation">;</span>parent<span class="token punctuation">[</span>f1<span class="token punctuation">]</span> <span class="token operator">=</span> f2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>sets<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> sets<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-省份数量（朋友圈）">2 省份数量（朋友圈）</h2><blockquote><p>有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。</p><p>省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findCircleNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">M</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token class-name">M</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">UnionFind</span> unionFind <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">M</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    unionFind<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> unionFind<span class="token punctuation">.</span><span class="token function">sets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用数组结构的并查集</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parents<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> help<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> sets<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            help <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            sets <span class="token operator">=</span> <span class="token class-name">N</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 1 定义一个指针</span>        <span class="token comment">// 2 while(i不是自己爹）&#123;</span>        <span class="token comment">// 2.1 压help栈（虚拟的</span>        <span class="token comment">// 2.2 i指向自己的爹    &#125;</span>        <span class="token comment">// 3 for遍历help：模拟栈弹出 &#123;所有人爹设为i&#125;</span>        <span class="token comment">// 4 返回i:此时i指向最爹</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findFather</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> hi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> i <span class="token operator">!=</span> parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                help<span class="token punctuation">[</span>hi<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                i <span class="token operator">=</span> parents<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>hi<span class="token operator">--</span><span class="token punctuation">;</span> hi <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> hi<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                parents<span class="token punctuation">[</span>help<span class="token punctuation">[</span>hi<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> iF <span class="token operator">=</span> <span class="token function">findFather</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> jF <span class="token operator">=</span> <span class="token function">findFather</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>iF <span class="token operator">!=</span> jF<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token punctuation">[</span>iF<span class="token punctuation">]</span> <span class="token operator">&lt;</span> size<span class="token punctuation">[</span>jF<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    size<span class="token punctuation">[</span>jF<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>iF<span class="token punctuation">]</span><span class="token punctuation">;</span>                    parents<span class="token punctuation">[</span>iF<span class="token punctuation">]</span> <span class="token operator">=</span> jF<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    size<span class="token punctuation">[</span>iF<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>jF<span class="token punctuation">]</span><span class="token punctuation">;</span>                    parents<span class="token punctuation">[</span>jF<span class="token punctuation">]</span> <span class="token operator">=</span> iF<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                sets<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> sets<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></code></pre><h1>7 图</h1><h2 id="将矩阵转化为自己的结构-creatGraph">将矩阵转化为自己的结构(creatGraph)</h2><ol><li>new一个自己的graph</li><li>遍历矩阵每一行 for(matrix.length)<ol><li>weight:<code>matrix[i][0]</code> from<code>[i][1]</code> to:<code>[i][2]</code></li><li>判断是否contanskey(from和to) 分别放入点集</li><li>edge初始化 并赋值 (weight,fromNode,toNode)</li><li>更新出入度、直接点、直接边</li><li>边放入边集</li></ol></li></ol><h2 id="1-图的bfs">1 图的bfs</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code01_BFS</span> <span class="token punctuation">&#123;</span><span class="token comment">// 从node出发，进行宽度优先遍历</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token class-name">Node</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Node</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> next <span class="token operator">:</span> cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-DFS">2 DFS</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">all<span class="token punctuation">.</span></span><span class="token class-name">Graph</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code02_DFS</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Node</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> next <span class="token operator">:</span> cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="3-拓扑排序">3 拓扑排序</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 拓扑排序 ： 有向无环图 *  * @author chs * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Code03_TopologySort</span> <span class="token punctuation">&#123;</span><span class="token comment">// directed graph and no loop</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> <span class="token function">sortedTopology</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// key 某个节点   value 剩余的入度</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> inMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 只有剩余入度为0的点，才进入这个队列</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> zeroInQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> node <span class="token operator">:</span> graph<span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>inMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> node<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>in <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>zeroInQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>zeroInQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Node</span> cur <span class="token operator">=</span> zeroInQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> next <span class="token operator">:</span> cur<span class="token punctuation">.</span>nexts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>inMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> inMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>zeroInQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>